(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    467292,       8897]
NotebookOptionsPosition[    462323,       8811]
NotebookOutlinePosition[    462686,       8827]
CellTagsIndexPosition[    462643,       8824]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "UTILITY", " ", "FUNCTIONS", " ", "\[IndentingNewLine]", "for", " ", 
    "binary", " ", "predictions"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "accuracy", ",", " ", "precision", ",", " ", "recall", ",", " ", "apr"}],
      "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"accuracy", "[", 
      RowBox[{"features_", ",", " ", "labels_", ",", " ", "pred_"}], "]"}], 
     " ", ":=", " ", 
     RowBox[{"N", "@", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"xorRes", " ", "=", " ", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Xor", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], 
             "}"}]}], "]"}]}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{"Count", "[", 
          RowBox[{"xorRes", ",", " ", "False"}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Count", "[", 
            RowBox[{"xorRes", ",", " ", "True"}], "]"}], " ", "+", " ", 
           RowBox[{"Count", "[", 
            RowBox[{"xorRes", ",", " ", "False"}], "]"}]}], ")"}]}]}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"precision", "[", 
      RowBox[{"features_", ",", " ", "labels_", ",", " ", "pred_"}], "]"}], 
     " ", ":=", " ", 
     RowBox[{"N", "@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{"And", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], 
             "}"}]}], "]"}], ",", " ", "True"}], "]"}], "/", " ", 
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"pred", "@", "features"}], ",", " ", "True"}], "]"}]}], 
       ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"recall", "[", 
      RowBox[{"features_", ",", " ", "labels_", ",", " ", "pred_"}], "]"}], ":=",
      " ", 
     RowBox[{"N", "@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{"And", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], 
             "}"}]}], "]"}], ",", " ", "True"}], "]"}], "/", " ", 
        RowBox[{"Count", "[", 
         RowBox[{"labels", ",", " ", "True"}], "]"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"apr", "[", 
      RowBox[{"features_", ",", " ", "labels_", ",", " ", "pred_"}], "]"}], ":=",
      " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"accuracy", "[", 
        RowBox[{"features", ",", " ", "labels", ",", " ", "pred"}], "]"}], 
       ",", " ", 
       RowBox[{"precision", "[", 
        RowBox[{"features", ",", " ", "labels", ",", " ", "pred"}], "]"}], 
       ",", " ", 
       RowBox[{"recall", "[", 
        RowBox[{"features", ",", " ", "labels", ",", " ", "pred"}], "]"}]}], 
      "}"}]}], ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Data", " ", 
     RowBox[{"notes", ":", " ", 
      RowBox[{
       RowBox[{
       "splitting", " ", "a", " ", "long", " ", "trace", " ", "into", " ", 
        "w"}], "-", 
       RowBox[{"long", " ", "tuples"}], "\[IndentingNewLine]", "-", " ", 
       RowBox[{
       "the", " ", "start", " ", "of", " ", "nth", " ", "tuple", " ", "is", 
        " ", "at", " ", 
        RowBox[{"(", 
         RowBox[{"n", "-", "1"}], ")"}], "*", "w"}], " ", "+", " ", "1", 
       "\[IndentingNewLine]", "-", " ", 
       RowBox[{
       "the", " ", "end", " ", "of", " ", "nth", " ", "tuple", " ", "is", " ",
         "at", " ", "n", "*", "w"}], " ", "\[IndentingNewLine]", "-", " ", 
       RowBox[{
       "the", " ", "predicted", " ", "element", " ", "by", " ", "nth", " ", 
        "tuple", " ", "is", " ", "at", " ", "nw"}], "+", "predhor", 
       "\[IndentingNewLine]", "-", " ", 
       RowBox[{
       "the", " ", "last", " ", "available", " ", "tuple", " ", "with", " ", 
        "prediction", " ", "is", " ", 
        RowBox[{"L", "/", "w"}]}], "-", "predhor"}]}]}], 
    "\[IndentingNewLine]", "*)"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "PREDICTION", " ", "FOR", " ", "DETECTORS", " ", "ON", " ", 
      "DETECTORS"}], " ", "-", " ", "OLD"}], " ", "*)"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sesh4DetTraces", " ", "=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Import", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"\"\<Numeric\>\"", "\[Rule]", "True"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", " ", 
       RowBox[{"allBinDetFilenames", "[", 
        RowBox[{"{", "4", "}"}], "]"}]}], ")"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.7834262266651917`*^9, 3.783426231419497*^9}, 
   3.783426388862121*^9, {3.783427966124732*^9, 3.7834280561377163`*^9}, {
   3.783428087233387*^9, 3.783428122695479*^9}, {3.783429768319478*^9, 
   3.783429795269782*^9}, {3.7834299830284977`*^9, 3.783429983808785*^9}, {
   3.783431797536026*^9, 3.783431797806786*^9}, {3.783433879746811*^9, 
   3.7834339924438553`*^9}, {3.783434022580327*^9, 3.783434100848332*^9}, {
   3.783434138392272*^9, 3.7834341574608097`*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"b92a199a-472a-4586-8b5b-d4cb6128dae8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"predWinSize", " ", "=", " ", "3"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"predHorSize", " ", "=", " ", "1"}], ";"}]}], "Input",
 CellChangeTimes->{{3.783360069198806*^9, 3.783360096496657*^9}, {
   3.7833659676872387`*^9, 3.783365983419981*^9}, 3.783366048666827*^9, {
   3.783366145724984*^9, 3.783366170458529*^9}, {3.783366608048834*^9, 
   3.783366616101161*^9}, {3.7834262427019157`*^9, 3.783426243592824*^9}, 
   3.783427501731943*^9, {3.783431589351742*^9, 
   3.783431592087338*^9}},ExpressionUUID->"26ce1fbb-7275-4eec-b255-\
82e293a86acb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainTuples", " ", ":=", " ", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"predWinSize", "+", "1"}]}], "]"}], " ", "&"}], " ", "/@", 
       " ", "sesh4DetTraces"}], ",", "1"}], "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"features", " ", ":=", " ", 
    RowBox[{"trainTuples", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{"1", ";;", "predWinSize"}]}], "]"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", " ", ":=", " ", 
   RowBox[{"trainTuples", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"predWinSize", " ", "+", "1"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7833656234365263`*^9, 3.7833656424717293`*^9}, 
   3.783366015539961*^9, {3.783366054972021*^9, 3.783366055198865*^9}, {
   3.783366114636611*^9, 3.78336615045019*^9}, {3.783366618784276*^9, 
   3.78336662636497*^9}, {3.783426246216177*^9, 3.78342624815737*^9}, {
   3.783427503306938*^9, 
   3.783427504661347*^9}},ExpressionUUID->"c79ea574-7559-4cca-9b28-\
de4b705c1126"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pred", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7833656956136217`*^9, 3.78336573997151*^9}},
 CellLabel->
  "In[246]:=",ExpressionUUID->"a28396e6-896e-48f6-8c09-336897604308"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "3", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "3", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["685", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 685, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 3]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3426787970643080940, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 685, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.8554744525547445, 0.8467153284671532, 
                    0.8467153284671532}, "Method" -> "Naive", "VectorLength" -> 
                   3, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.8554744525547445, 0.8467153284671532, 
                    0.8467153284671532}, 
                   "StandardDeviation" -> {0.35162183319712204`, 
                    0.36026168406578296`, 0.36026168406578296`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.6054265391101754, -0.4032401208880409, 
                   0.6861895588299732}, {-0.6161912894846994, \
-0.30820921828744785`, -0.724786432354955}, {-0.5037529161248189, 
                   0.8616289704210498, 0.06187500971234583}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.8554744525547445, 0.8467153284671532, 
                    0.8467153284671532}, 
                    "StandardDeviation" -> {0.35162183319712204`, 
                    0.36026168406578296`, 0.36026168406578296`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 3, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.009855, "MaxTrainingMemory" -> 114816, 
                  "DataMemory" -> 18552, "FunctionMemory" -> 21744, 
                  "LanguageVersion" -> {12., 0}, "Date" -> 
                  DateObject[{
                    2019, 11, 21, 18, 10, 52.229907`8.470494227514484}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 3, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12., 0}, "ID" -> 
             4507977886487902166]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.8554744525547445, 0.8467153284671532, 
              0.8467153284671532}, 
             "StandardDeviation" -> {0.35162183319712204`, 
              0.36026168406578296`, 0.36026168406578296`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 90821989271419185]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 2148322281829064388, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1567982190013531112]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.13973799126637554`, True -> 0.8602620087336245]],
     "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray[
             "Real32",{{-0.3710165321826935, -0.2973569333553314, \
-0.5613973736763}}], "Biases" -> RawArray["Real32",{-2.0965261459350586`}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 3, 
           "$InputDimensions" -> {3}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.11", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[235809], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.125084`5.5487467543795574, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.37115235358581306`, 0.046311787123787265`], "Accuracy" -> 
         Around[0.8791285234768442, 0.021206879237682833`], "EvaluationTime" -> 
         6.16575280649389*^-6, "TestSize" -> 274, "ModelMemory" -> 9200., 
         "ModelUtility" -> 0.2733397794129635, "TrainingSize" -> 548, 
         "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
         162797.3333333333, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
           Around[0.39310327920976446`, 0.06377524519288713], 
           Around[0.34920142796186165`, 0.05303859135511679]}, 
         "AccuracyHistory" -> {
           Around[0.8729896373438509, 0.029410026195434966`], 
           Around[0.8852674096098374, 0.028052085855209987`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.01, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 685], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 56139703351470]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6842534101999997, 0.007750487850503532], "Accuracy" -> 
              Around[0.6982343205665548, 0.04596853719284711], 
              "EvaluationTime" -> 7.126427896022372*^-6, "TestSize" -> 200, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31598937402084204`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              63984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6842534101999997, 0.0054804225165949955`]}, 
              "AccuracyHistory" -> {
                Around[0.6982343205665548, 0.03250466437028821]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6838059682530636, 0.004582189456141589], "Accuracy" -> 
              Around[0.8850020900637865, 0.01906859446408214], 
              "EvaluationTime" -> 4.2593557032389*^-6, "TestSize" -> 585, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31441172590231137`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 72304, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6838059682530636, 0.0032400972371192157`]}, 
              "AccuracyHistory" -> {
                Around[0.8850020900637865, 0.01348353245324874]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6809356481582551, 0.010195122966969351`], "Accuracy" -> 
              Around[0.8948900922928074, 0.03865015952028675], 
              "EvaluationTime" -> 5.214123624600984*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3118559937624822, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              162632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6809356481582551, 0.007209040584974741]}, 
              "AccuracyHistory" -> {
                Around[0.8948900922928074, 0.027329789890736558`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.214123624600984*^-6, "MeanCrossEntropy" -> 
             Around[0.6809356481582551, 0.010195122966969351`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 162632, "TrainingTime" -> 0.0225], 
           "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[6.242023031345563, 0.9268000555787361], "Accuracy" -> 
              Around[0.8333302976302724, 0.020578244957922053`], 
              "EvaluationTime" -> 4.313179487982468*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> -2.5537209588799907`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 70552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.242023031345563, 0.6553466041037934]}, 
              "AccuracyHistory" -> {
                Around[0.8333302976302724, 0.014551016554664564`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.37115555314306364`, 0.04631807974328066], "Accuracy" -> 
              Around[0.8791285234768442, 0.021206879237682833`], 
              "EvaluationTime" -> 6.282275206290147*^-6, "TestSize" -> 274, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.27332806036208257`, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.023396783926626794`, 
              "TrainingMemory" -> 162712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3931109668120608, 0.06378321538345921], 
                Around[0.3492001394740665, 0.05304441485617069]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`], 
                Around[0.8852674096098374, 0.028052085855209987`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.282275206290147*^-6, "MeanCrossEntropy" -> 
             Around[0.37115555314306364`, 0.04631807974328066], "ModelMemory" -> 
             9200., "TrainingMemory" -> 162712., "TrainingTime" -> 
             0.04919860305797227], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6788023594833956, 0.004283163404723203], "Accuracy" -> 
              Around[0.6974457733493351, 0.02518200076539418], 
              "EvaluationTime" -> 4.344822261918462*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.30698940663947116`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6788023594833956, 0.0030286538884098375`]}, 
              "AccuracyHistory" -> {
                Around[0.6974457733493351, 0.017806363505055055`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6555636364990768, 0.00496409285244434], "Accuracy" -> 
              Around[0.891199859078856, 0.020180029379283187`], 
              "EvaluationTime" -> 4.187231831682519*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2724069002658259, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 73264, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6555636364990768, 0.0035101437184030643`]}, 
              "AccuracyHistory" -> {
                Around[0.891199859078856, 0.014269435618634895`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5748896310052054, 0.017041451751118073`], "Accuracy" -> 
              Around[0.8873376040556882, 0.03964812712055532], 
              "EvaluationTime" -> 5.214123624600984*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.1454873879865295, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 162632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5748896310052054, 0.012050126094478954`]}, 
              "AccuracyHistory" -> {
                Around[0.8873376040556882, 0.028035459548290932`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.214123624600984*^-6, "MeanCrossEntropy" -> 
             Around[0.5748896310052054, 0.017041451751118073`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 162632, "TrainingTime" -> 
             0.02775444725300673], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3790209135014214, 0.05666214269462242], "Accuracy" -> 
              Around[0.8990671872302971, 0.016891478532486626`], 
              "EvaluationTime" -> 4.620881168799707*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.24754944917881305`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 70792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3790209135014214, 0.040066185335927304`]}, 
              "AccuracyHistory" -> {
                Around[0.8990671872302971, 0.011944079014588285`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.38949973951014255`, 0.041677632412253814`], "Accuracy" -> 
              Around[0.8413204640246106, 0.02342061678074892], 
              "EvaluationTime" -> 4.187231831682519*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.22856376873171247`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 76936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38949973951014255`, 0.029470536502504918`]}, 
              "AccuracyHistory" -> {
                Around[0.8413204640246106, 0.016560876945239007`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3930338572209023, 0.0900896261208379], "Accuracy" -> 
              Around[0.8729896373438509, 0.04159205791533213], 
              "EvaluationTime" -> 5.966532844117591*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.1958825841029722, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 162568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3930338572209023, 0.0637029855446052]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.966532844117591*^-6, "MeanCrossEntropy" -> 
             Around[0.3930338572209023, 0.0900896261208379], "ModelMemory" -> 
             9200, "TrainingMemory" -> 162568, "TrainingTime" -> 
             0.05948109390179353], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.49450440378949, 0.08240609808408508], "Accuracy" -> 
              Around[0.8990671872302971, 0.016891478532486626`], 
              "EvaluationTime" -> 4.1909714215098424`*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.021739671784637093`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 70792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.49450440378949, 0.05826991076638032]}, 
              "AccuracyHistory" -> {
                Around[0.8990671872302971, 0.011944079014588285`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.40431931817299865`, 0.03992814480387507], "Accuracy" -> 
              Around[0.834824433036745, 0.021980314005454398`], 
              "EvaluationTime" -> 4.611766175285994*^-6, "TestSize" -> 585, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.1928385448581903, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 77952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.40431931817299865`, 0.02823346195101847]}, 
              "AccuracyHistory" -> {
                Around[0.834824433036745, 0.015542429085866448`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.37115235358581306`, 0.046311787123787265`], "Accuracy" -> 
              Around[0.8791285234768442, 0.021206879237682833`], 
              "EvaluationTime" -> 6.16575280649389*^-6, "TestSize" -> 274, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.2733397794129635, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 162797.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39310327920976446`, 0.06377524519288713], 
                Around[0.34920142796186165`, 0.05303859135511679]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`], 
                Around[0.8852674096098374, 0.028052085855209987`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.16575280649389*^-6, "MeanCrossEntropy" -> 
             Around[0.37115235358581306`, 0.046311787123787265`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 162797.3333333333, 
             "TrainingTime" -> 0.044893402086799775`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[17.917666079461096`, 2.606027578650495], "Accuracy" -> 
              Around[0.8232668408885899, 0.021075269763031354`], 
              "EvaluationTime" -> 4.498673102327082*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> -3.6076145184374893`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 70824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[17.917666079461096`, 1.8427397728229238`]}, 
              "AccuracyHistory" -> {
                Around[0.8232668408885899, 0.014902466164775271`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3931110340054073, 0.09020318751526851], "Accuracy" -> 
              Around[0.8729896373438509, 0.04159205791533213], 
              "EvaluationTime" -> 5.966532844117591*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.19563960515803525`, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 162632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3931110340054073, 0.06378328557668808]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.966532844117591*^-6, "MeanCrossEntropy" -> 
             Around[0.3931110340054073, 0.09020318751526851], "ModelMemory" -> 
             9200, "TrainingMemory" -> 162632, "TrainingTime" -> 
             0.05135120354355853], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[26.825660409720935`, 5.361773103479629], "Accuracy" -> 
              Around[0.8833712001133613, 0.01894404135778873], 
              "EvaluationTime" -> 4.712755538992046*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -4.021709036148, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 70848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[26.825660409720935`, 3.7913461206540853`]}, 
              "AccuracyHistory" -> {
                Around[0.8833712001133613, 0.013395460107170822`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.37115558323975795`, 0.04631814081203805], "Accuracy" -> 
              Around[0.8791285234768442, 0.021206879237682833`], 
              "EvaluationTime" -> 5.966532844117591*^-6, "TestSize" -> 274, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.2733279494572376, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.037777821026070295`, 
              "TrainingMemory" -> 166162.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.3931110397851283, 0.06378329245143316], 
                Around[0.34920012669438755`, 0.053044472337911396`]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`], 
                Around[0.8852674096098374, 0.028052085855209987`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.966532844117591*^-6, "MeanCrossEntropy" -> 
             Around[0.37115558323975795`, 0.04631814081203805], "ModelMemory" -> 
             9200., "TrainingMemory" -> 166162.66666666666`, "TrainingTime" -> 
             0.06717489943227666], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4045284118752036, 0.039969432846579854`], "Accuracy" -> 
              Around[0.834824433036745, 0.021980314005454398`], 
              "EvaluationTime" -> 4.2593557032389*^-6, "TestSize" -> 585, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.19231152257175865`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 76872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4045284118752036, 0.028262657005996943`]}, 
              "AccuracyHistory" -> {
                Around[0.834824433036745, 0.015542429085866448`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3711552606448173, 0.04631750714395689], "Accuracy" -> 
              Around[0.8791285234768442, 0.021206879237682833`], 
              "EvaluationTime" -> 5.966532844117591*^-6, "TestSize" -> 274, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.27332913059848585`, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.018584726074662904`, 
              "TrainingMemory" -> 162818.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.39311026572412033`, 0.06378248979851893], 
                Around[0.34920025556551426`, 0.05304388537758236]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`], 
                Around[0.8852674096098374, 0.028052085855209987`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.966532844117591*^-6, "MeanCrossEntropy" -> 
             Around[0.3711552606448173, 0.04631750714395689], "ModelMemory" -> 
             9200., "TrainingMemory" -> 162818.66666666666`, "TrainingTime" -> 
             0.039079839517939766`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6823242159296578, 0.010214638911385231`], "Accuracy" -> 
              Around[0.8948900922928074, 0.03865015952028675], 
              "EvaluationTime" -> 5.966532844117591*^-6, "TestSize" -> 137, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31389275141780215`, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 162568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6823242159296578, 0.00722284044161247]}, 
              "AccuracyHistory" -> {
                Around[0.8948900922928074, 0.027329789890736558`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.966532844117591*^-6, "MeanCrossEntropy" -> 
             Around[0.6823242159296578, 0.010214638911385231`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 162568, "TrainingTime" -> 
             0.01787238528129633], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6380853677028451, 0.005068119144536514], "Accuracy" -> 
              Around[0.884054725627375, 0.017863824724402125`], 
              "EvaluationTime" -> 4.1909714215098424`*^-6, "TestSize" -> 670, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.24545757491530162`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              65848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6380853677028451, 0.0035837014149631328`]}, 
              "AccuracyHistory" -> {
                Around[0.884054725627375, 0.01263163160055265]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5210319041834387, 0.010302732776432821`], "Accuracy" -> 
              Around[0.8850020900637865, 0.01906859446408214], 
              "EvaluationTime" -> 4.295596145182688*^-6, "TestSize" -> 585, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.04515643481342679, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 75272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5210319041834387, 0.007285132210968554]}, 
              "AccuracyHistory" -> {
                Around[0.8850020900637865, 0.01348353245324874]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.40604477076015055`, 0.02550023646380001], "Accuracy" -> 
              Around[0.8791285234768442, 0.021206879237682833`], 
              "EvaluationTime" -> 6.364972768870189*^-6, "TestSize" -> 274, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.1956562738215154, 
              "TrainingSize" -> 548, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 162714.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.4156985282616845, 0.03593478471919454], 
                Around[0.39639101325861664`, 0.031300353513188196`]}, 
              "AccuracyHistory" -> {
                Around[0.8729896373438509, 0.029410026195434966`], 
                Around[0.8852674096098374, 0.028052085855209987`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.364972768870189*^-6, "MeanCrossEntropy" -> 
             Around[0.40604477076015055`, 0.02550023646380001], "ModelMemory" -> 
             9200., "TrainingMemory" -> 162714.66666666666`, "TrainingTime" -> 
             0.029811164905763916`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 56135408384174]], "MaxTrainingSize" -> 685, 
      "PreprocessorEvaluationTime" -> 3.79638671875`3.*^-6, 
      "PreprocessorMemory" -> 43360, "InputDimension" -> 3, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.40448757800413054`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.783348653076523`16.330451354542067*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.19600000000000004`, 
          "ElapsedTimes" -> 0.19441200000000003`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 100, "TimeBudgets" -> 0.28, "ElapsedTimes" -> 
          0.333011, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 548, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.40159700000000004`, "ExperimentCounts" -> 15]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[56143998318766]], "ID" -> 56148293286062]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{True, True, True}}, "ID" -> 4635246341379078022]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.38143, 
      "MaxTrainingMemory" -> 801224, "DataMemory" -> 55176, "FunctionMemory" -> 
      210464, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 11, 21, 18, 10, 53.580992`8.481585724590978}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.78336574391336*^9, 3.7833657571971684`*^9}, 
   3.783366031549781*^9, 3.7833660648084707`*^9, {3.7833661309555607`*^9, 
   3.783366159955407*^9}, {3.7833663244038553`*^9, 3.783366329925758*^9}, 
   3.783366653597136*^9},
 CellLabel->
  "Out[246]=",ExpressionUUID->"ea59e3df-d835-45dc-acbf-0b132ee592f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"Tally", "@", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Xor", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{3.783365905586879*^9},
 CellLabel->
  "In[247]:=",ExpressionUUID->"8e1f8f9f-fbfd-4c66-aa41-17ac782984aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"False", ",", "612"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "73"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7833659059928083`*^9, 3.783366033621233*^9, {3.783366069424605*^9, 
   3.783366083505869*^9}, 3.783366132495863*^9, 3.783366164990449*^9, 
   3.783366656214267*^9},
 CellLabel->
  "Out[247]=",ExpressionUUID->"504efb50-e573-45c1-8ec3-205432a0aefc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Accuracy", " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xorRes", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Xor", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], "}"}]}], 
        "]"}]}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"Count", "[", 
       RowBox[{"xorRes", ",", " ", "False"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "True"}], "]"}], " ", "+", " ", 
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "False"}], "]"}]}], ")"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.783365802994828*^9, 3.783365940447611*^9}, {
  3.783366679893965*^9, 3.7833667350892887`*^9}},
 CellLabel->
  "In[249]:=",ExpressionUUID->"0f406ef8-3295-4b9c-88e4-b2c73cac2a27"],

Cell[BoxData["0.8934306569343066`"], "Output",
 CellChangeTimes->{
  3.783365834420013*^9, {3.783365920270121*^9, 3.783365944413775*^9}, 
   3.783366082332301*^9, 3.783366134048499*^9, {3.783366166616246*^9, 
   3.783366168943344*^9}, 3.783366331962735*^9, {3.783366709792654*^9, 
   3.7833667356466513`*^9}},
 CellLabel->
  "Out[249]=",ExpressionUUID->"73f6bb05-b6c6-488b-953a-f16353ae97a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "a", " ", "quick", " ", "and", " ", "dirty", " ", "test", " ", "for", " ", 
    "different", " ", "window", " ", "sizes"}], " ", "*)"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"accuracies", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"predWinSize", " ", "=", " ", "#"}], "}"}], ",", " ", 
       RowBox[{
        RowBox[{"trainTuples", " ", ":=", " ", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Partition", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"predWinSize", "+", "1"}]}], "]"}], " ", "&"}], " ", "/@",
              " ", "sesh4DetTraces"}], ",", "1"}], "]"}], " ", "/.", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
            RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"features", " ", ":=", " ", 
         RowBox[{"trainTuples", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"1", ";;", "predWinSize"}]}], "]"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"labels", " ", ":=", " ", 
         RowBox[{"trainTuples", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"predWinSize", "+", "1"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pred", " ", "=", " ", 
         RowBox[{"Classify", "[", 
          RowBox[{
           RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
           RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"#", ",", " ", 
          RowBox[{"N", "@", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"xorRes", " ", "=", " ", 
               RowBox[{"MapThread", "[", 
                RowBox[{"Xor", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], 
                  "}"}]}], "]"}]}], "}"}], ",", " ", 
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{"xorRes", ",", " ", "False"}], "]"}], "/", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Count", "[", 
                 RowBox[{"xorRes", ",", " ", "True"}], "]"}], " ", "+", " ", 
                RowBox[{"Count", "[", 
                 RowBox[{"xorRes", ",", " ", "False"}], "]"}]}], ")"}]}]}], 
            "]"}]}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}], "&"}], " ", "/@",
     " ", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "60"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7833663421113453`*^9, 3.783366467777944*^9}, {
   3.783366507946929*^9, 3.783366508454501*^9}, {3.78336674482304*^9, 
   3.7833667948893843`*^9}, 3.7833668358904037`*^9, {3.783366945849928*^9, 
   3.783366954694044*^9}, {3.783426253669898*^9, 
   3.783426265818659*^9}},ExpressionUUID->"ad14427d-40bf-4554-973f-\
654381238f15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0.851528384279476`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0.861353711790393`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0.8934306569343066`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0.8834244080145719`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "0.8905908096280087`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "0.8772378516624041`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "0.906158357771261`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "0.8881578947368421`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "0.9197080291970803`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "0.8987854251012146`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "0.9118942731277533`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "0.8947368421052632`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "0.8762886597938144`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "0.8956043956043956`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "0.9058823529411765`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "0.9308176100628931`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "0.88`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "0.8881118881118881`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "0.9191176470588235`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "0.9140625`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "0.8934426229508197`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"22", ",", "0.9152542372881356`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", "0.9203539823008849`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"24", ",", "0.9065420560747663`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "0.9038461538461539`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"26", ",", "0.8888888888888888`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"27", ",", "0.9375`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"28", ",", "0.8369565217391305`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"29", ",", "0.945054945054945`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"30", ",", "0.9651162790697675`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"31", ",", "0.9404761904761905`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"32", ",", "0.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"33", ",", "0.9871794871794872`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"34", ",", "0.935064935064935`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"35", ",", "0.918918918918919`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"36", ",", "0.9722222222222222`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"37", ",", "0.9857142857142858`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"38", ",", "0.9705882352941176`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"39", ",", "0.9402985074626866`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"40", ",", "0.9538461538461539`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"41", ",", "0.9682539682539683`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"42", ",", "0.8387096774193549`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"43", ",", "0.9491525423728814`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"44", ",", "0.847457627118644`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"45", ",", "0.9310344827586207`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"46", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"47", ",", "0.8727272727272727`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"48", ",", "0.9622641509433962`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"49", ",", "0.9615384615384616`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"50", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"51", ",", "0.9019607843137255`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"52", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"53", ",", "0.9791666666666666`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"54", ",", "0.9787234042553191`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"55", ",", "0.9565217391304348`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"56", ",", "0.9782608695652174`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"57", ",", "0.8666666666666667`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"58", ",", "0.8666666666666667`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"59", ",", "0.9555555555555556`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"60", ",", "0.9047619047619048`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.783366441202944*^9, 3.783366450844678*^9}, 
   3.783366524077199*^9, 3.783366761735531*^9, 3.783366812558605*^9, 
   3.7833668821523447`*^9, 3.783366951661375*^9, 3.783367039892043*^9},
 CellLabel->
  "Out[256]=",ExpressionUUID->"2a093beb-403d-4c87-8c26-dc637994a159"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot", "[", "accuracies", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"window", " ", "of", " ", "4"}], ",", " ", 
    RowBox[{"horizon", " ", "1"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.783366567317624*^9, 3.783366576483903*^9}, 
   3.7833668231696157`*^9, {3.783431604241544*^9, 
   3.783431612342951*^9}},ExpressionUUID->"6e26ec68-ff28-409e-8017-\
2a868b35d14f"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdkm9IU2EUxqf2QYpllIXkikypJbW0Wq7cvM82p5tuiyKJJBLFsDFoSlYQ
SjdCkZEVCCuIiFiMfSicSGCUE8xIl2sfhEmh+5AkzjYnrYEyw/bnPUE+vJfL
7z7nnPe8574FTZZzVzIFAoE88STfaS1zGTvU7UPcT459wMiA1yl9RJwN5bcn
c3FbiPE2+IueqbM0xLnI2HpUP3SHOA/2uzf31G0nFmF9Lerj1on3Ybj7126P
mXg/Wl9e7eGuhRkXQTI56/g6Sv4BBCZy5uUS8sXI95jF/S/IL0ZHW+zeg83E
h9Hrcd73OIkl+LOWFHEJiutlWaoJqleKQ5cejsbE5B/Dl8Lzz03/+jsOU0oU
fwLpKRFL8crujec+pviTmB/YqfygI78Mdtl0qfU6sQxNGlNHcybxKXw0hsaM
Ico/DdGntsQiLk/vJ1hiLMeR5oItF8cXGSsQmFMkFvkVeFu41FP+nZhDd2Ne
YhED3smkWH0eaF21WVZtEeYrIXXd0gtDrD9eiU6/0DHeQv2qkGpPxOJ5FVwr
1v4VK+WrkZMS+WpYf+NHaBftX4mGha7LC12M+UqMROLuSJx8Dabrza/f+Nn5
eA0ubBIevNFAfhVSuJfdT74Kva6ZqezP1F81m9cy86sRzve7G8N0n7Vo1xpK
Ah7aX4szyfGPUX3dhnwdZmeSov9Rs8GvQV1KdP5adLbY3YNn6fy1WDRYbk89
pfp6xBxlw0ED+Xq8f5cU9Wf4n3kDuGBfRbCP8o1Q+KJyXzTE/QVCUB7s
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.827898550724638},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 60.}, {0.827898550724638, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.78336657771627*^9, 3.783366823672286*^9, 
  3.7833669305814533`*^9, 3.783367043851635*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"2756728e-0eec-4a33-9c94-cfac7d8c4980"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "PREDICTION", " ", "FOR", " ", "DETECTORS", " ", "ON", " ", "DETECTORS"}],
     " ", "-", " ", "NEW"}], "  ", "*)"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"trainTuples", " ", "=", " ", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"(*", " ", 
        RowBox[{"predictions", " ", "for", " ", "tuples"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"trace", " ", "=", " ", "#"}], "}"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"(*", 
                 RowBox[{"tuple", " ", "itself"}], "*)"}], 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                 RowBox[{"(*", 
                  RowBox[{
                  "true", " ", "value", " ", "after", " ", "horizon"}], 
                  "*)"}], 
                 RowBox[{"trace", "[", 
                  RowBox[{"[", "  ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", "predWinSize"}], " ",
                     "+", " ", "predHorSize"}], "  ", "]"}], "]"}]}], "}"}], 
               "  ", "&"}], "   ", "/@", " ", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"enumerated", " ", "tuples"}], ",", " ", 
                RowBox[{"with", " ", "discarded", " ", "those", " ", 
                 RowBox[{"w", "/", "o"}], " ", "true", " ", "label"}]}], " ", 
               "*)"}], " ", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"enumerate", "[", 
                 RowBox[{"Partition", "[", 
                  RowBox[{"trace", ",", " ", "predWinSize"}], "]"}], "]"}], 
                ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
                  RowBox[{
                   RowBox[{"Quotient", "[", 
                    RowBox[{
                    RowBox[{"Length", "@", "trace"}], ",", " ", 
                    "predWinSize"}], "]"}], "-", "predHorSize"}]}], "&"}]}], 
               "]"}]}], ")"}]}], "]"}], " ", "&"}], "/@", " ", 
         "sesh4DetTraces"}], ",", "1"}], "]"}], 
      RowBox[{"(*", " ", 
       RowBox[{"replace", " ", 
        RowBox[{"1", "/", "0"}], " ", "with", " ", "booleans"}], " ", "*)"}], 
      " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
        RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"features", " ", "=", " ", 
     RowBox[{"trainTuples", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"labels", " ", "=", " ", 
     RowBox[{"trainTuples", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7834262367202597`*^9, 3.7834262383526373`*^9}, {
   3.7834262722575293`*^9, 3.783426276014613*^9}, {3.783430025633335*^9, 
   3.783430051568475*^9}, {3.783430152457828*^9, 3.783430172437456*^9}, 
   3.783430311194829*^9, {3.783430630023244*^9, 3.783430639057312*^9}, {
   3.783431789155792*^9, 
   3.7834317910541887`*^9}},ExpressionUUID->"d0b3e9bd-c525-4e82-8eac-\
2efff73478c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "training", " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"pred", " ", "=", " ", 
   RowBox[{"Classify", "[", 
    RowBox[{
     RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.783430045837686*^9, 3.783430154228792*^9, {3.783430327279394*^9, 
   3.783430353264398*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"5cd90aec-916f-4e89-ab39-d1029ba4ab28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["680", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 680, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 4]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3426787970643080940, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 680, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.8617647058823529, 0.8529411764705882, 
                    0.8529411764705882, 0.8676470588235294}, "Method" -> 
                   "Naive", "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.8617647058823529, 0.8529411764705882, 
                    0.8529411764705882, 0.8676470588235294}, 
                   "StandardDeviation" -> {0.34514677686146045`, 
                    0.3541645464350675, 0.3541645464350675, 
                    0.33887407711185036`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.5068297649687719, -0.4980057122700226, 
                   0.2844283992414613, 
                   0.6435948924541485}, {-0.5083395347188725, \
-0.467885650891587, -0.4564786335443839, -0.5606257149373444}, \
{-0.46913219399786543`, 0.6170508391644554, -0.530826341816989, 
                   0.34261733942458833`}, {-0.514421511348669, 
                   0.3902839865054992, 
                   0.6549436141039817, -0.39255290201900317`}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.8617647058823529, 0.8529411764705882, 
                    0.8529411764705882, 0.8676470588235294}, 
                    "StandardDeviation" -> {0.34514677686146045`, 
                    0.3541645464350675, 0.3541645464350675, 
                    0.33887407711185036`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 4, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.014619, "MaxTrainingMemory" -> 126968, 
                  "DataMemory" -> 22648, "FunctionMemory" -> 21744, 
                  "LanguageVersion" -> {12., 0}, "Date" -> 
                  DateObject[{
                    2019, 11, 22, 11, 57, 26.751403`8.179921545965056}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 4, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12., 0}, "ID" -> 
             4507977886487902166]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.8617647058823529, 0.8529411764705882, 
              0.8529411764705882, 0.8676470588235294}, 
             "StandardDeviation" -> {0.34514677686146045`, 0.3541645464350675,
               0.3541645464350675, 0.33887407711185036`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 90821989271419185]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 2148322281829064388, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1567982190013531112]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[False -> 0.1436950146627566, True -> 0.8563049853372434]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray[
             "Real32",{{-0.19245584309101105`, -0.2922575771808624, \
-0.26740193367004395`, -0.3047530949115753}}], "Biases" -> 
           RawArray["Real32",{-1.8397384881973267`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 4, 
           "$InputDimensions" -> {4}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.11", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 10., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[201377], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.121371`5.535659923690687, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.39527507651007304`, 0.04204093496596701], "Accuracy" -> 
         Around[0.8696311158175725, 0.021892893292167967`], "EvaluationTime" -> 
         5.505109982315636*^-6, "TestSize" -> 272, "ModelMemory" -> 9200., 
         "ModelUtility" -> 0.21397121336661806`, "TrainingSize" -> 544, 
         "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
         171634.66666666666`, "ExperimentCount" -> 2, 
         "MeanCrossEntropyHistory" -> {
           Around[0.3768114250539215, 0.05090638764322242], 
           Around[0.4137387279662246, 0.05633315126497531]}, 
         "AccuracyHistory" -> {
           Around[0.8760926313270933, 0.029050098653072832`], 
           Around[0.8631696003080517, 0.03014424736822909]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 680], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 221989865550504]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6798265720143803, 0.010821784341327518`], "Accuracy" -> 
              Around[0.7293324703446179, 0.06330693293020206], 
              "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 100,
               "ModelMemory" -> 9200, "ModelUtility" -> -0.3104145814720263, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6798265720143803, 0.0076521570922910825`]}, 
              "AccuracyHistory" -> {
                Around[0.7293324703446179, 0.04476476157106783]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6594514357960843, 0.004759510270842664], "Accuracy" -> 
              Around[0.849005351904736, 0.02136343667888245], 
              "EvaluationTime" -> 3.977178653076419*^-6, "TestSize" -> 580, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.278248982182393, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              75360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6594514357960843, 0.0033654819876398692`]}, 
              "AccuracyHistory" -> {
                Around[0.849005351904736, 0.015106230945087196`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5747753633001522, 0.016027763159532707`], "Accuracy" -> 
              Around[0.8848397696530516, 0.03985561669927089], 
              "EvaluationTime" -> 6.010404409147867*^-6, "TestSize" -> 136, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.14493906860546135`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 171224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5747753633001522, 0.011333340017357502`]}, 
              "AccuracyHistory" -> {
                Around[0.8848397696530516, 0.028182176836426247`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147867*^-6, "MeanCrossEntropy" -> 
             Around[0.5747753633001522, 0.016027763159532707`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 171224, "TrainingTime" -> 
             0.023679849994669898`], "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[125.63449969793386`, 21.423428544063526`], "Accuracy" -> 
              Around[0.8519813481444632, 0.020772524971150067`], 
              "EvaluationTime" -> 4.324671915780886*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -5.560066101626484, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[125.63449969793386`, 15.148651599772762`]}, 
              "AccuracyHistory" -> {
                Around[0.8519813481444632, 0.014688393269467104`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.39678299542064455`, 0.04612749100621003], "Accuracy" -> 
              Around[0.8588469313654121, 0.022007807162051918`], 
              "EvaluationTime" -> 5.757757195731751*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.20822770272203361`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 171474.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.37624441458172786`, 0.055542358375785986`], 
                Around[0.4173215762595612, 0.061775174962520274`]}, 
              "AccuracyHistory" -> {
                Around[0.8631696003080517, 0.03014424736822909], 
                Around[0.8545242624227725, 0.030904916148306243`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.757757195731751*^-6, "MeanCrossEntropy" -> 
             Around[0.39678299542064455`, 0.04612749100621003], "ModelMemory" -> 
             9200., "TrainingMemory" -> 171474.66666666666`, "TrainingTime" -> 
             0.044893402086799775`], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5149285414184459, 0.017834767090399155`], "Accuracy" -> 
              Around[0.7301068742765369, 0.02441642065581318], 
              "EvaluationTime" -> 4.222482484829466*^-6, "TestSize" -> 665, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.036329554900792815`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 69528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5149285414184459, 0.012611084750503912`]}, 
              "AccuracyHistory" -> {
                Around[0.7301068742765369, 0.01726501661802879]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4258451748943116, 0.029452764244981347`], "Accuracy" -> 
              Around[0.8453071205801683, 0.02319784269556144], 
              "EvaluationTime" -> 4.393391957830069*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.14678812400115904`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 79528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4258451748943116, 0.020826249322314996`]}, 
              "AccuracyHistory" -> {
                Around[0.8453071205801683, 0.016403351878930314`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.39527507651007304`, 0.04204093496596701], "Accuracy" -> 
              Around[0.8696311158175725, 0.021892893292167967`], 
              "EvaluationTime" -> 5.505109982315636*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.21397121336661806`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 171634.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.3768114250539215, 0.05090638764322242], 
                Around[0.4137387279662246, 0.05633315126497531]}, 
              "AccuracyHistory" -> {
                Around[0.8760926313270933, 0.029050098653072832`], 
                Around[0.8631696003080517, 0.03014424736822909]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.505109982315636*^-6, "MeanCrossEntropy" -> 
             Around[0.39527507651007304`, 0.04204093496596701], "ModelMemory" -> 
             9200., "TrainingMemory" -> 171634.66666666666`, "TrainingTime" -> 
             0.03753003305505265], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6989397429640739, 0.10056798945219923`], "Accuracy" -> 
              Around[0.8491870165201506, 0.020930021046871517`], 
              "EvaluationTime" -> 5.01187233627272*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3633337594259416, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6989397429640739, 0.07111230731194726]}, 
              "AccuracyHistory" -> {
                Around[0.8491870165201506, 0.014799759812620012`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3967794246412674, 0.04612260017776071], "Accuracy" -> 
              Around[0.8588469313654121, 0.022007807162051918`], 
              "EvaluationTime" -> 6.010404409147866*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.20823890659595523`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 171448., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.37624340122128613`, 0.05553688958696964], 
                Around[0.4173154480612487, 0.06176867859923292]}, 
              "AccuracyHistory" -> {
                Around[0.8631696003080517, 0.03014424736822909], 
                Around[0.8545242624227725, 0.030904916148306243`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147866*^-6, "MeanCrossEntropy" -> 
             Around[0.3967794246412674, 0.04612260017776071], "ModelMemory" -> 
             9200., "TrainingMemory" -> 171448., "TrainingTime" -> 
             0.044893402086799775`], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6841804858147675, 0.004278628738413411], "Accuracy" -> 
              Around[0.7287391050235665, 0.024490417676348228`], 
              "EvaluationTime" -> 4.222482484829466*^-6, "TestSize" -> 665, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31486991656864494`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 64128, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6841804858147675, 0.0030254473951117655`]}, 
              "AccuracyHistory" -> {
                Around[0.7287391050235665, 0.01731734041303672]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6840196607725787, 0.004561770619007807], "Accuracy" -> 
              Around[0.849005351904736, 0.02136343667888245], 
              "EvaluationTime" -> 3.8360072659442475`*^-6, "TestSize" -> 580, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31471780073268907`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 73632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6840196607725787, 0.003225658938917975]}, 
              "AccuracyHistory" -> {
                Around[0.849005351904736, 0.015106230945087196`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6811806386448463, 0.010123303901045268`], "Accuracy" -> 
              Around[0.8848397696530516, 0.03985561669927089], 
              "EvaluationTime" -> 6.010404409147867*^-6, "TestSize" -> 136, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31219361711072535`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 171224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6811806386448463, 0.007158256836441339]}, 
              "AccuracyHistory" -> {
                Around[0.8848397696530516, 0.028182176836426247`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147867*^-6, "MeanCrossEntropy" -> 
             Around[0.6811806386448463, 0.010123303901045268`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 171224, "TrainingTime" -> 
             0.022046141092229014`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6845243970546637, 0.004428559389968563], "Accuracy" -> 
              Around[0.729430420267707, 0.025745033891804738`], 
              "EvaluationTime" -> 4.8400722311497616`*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3154155750115616, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 64224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6845243970546637, 0.0031314643755341307`]}, 
              "AccuracyHistory" -> {
                Around[0.729430420267707, 0.018204488046772622`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6845020047236577, 0.004851080151470831], "Accuracy" -> 
              Around[0.8471477070994817, 0.02309298603796183], 
              "EvaluationTime" -> 3.981071705534969*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3155061899844116, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 73136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6845020047236577, 0.003430231671184489]}, 
              "AccuracyHistory" -> {
                Around[0.8471477070994817, 0.01632920702528907]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6825916495494447, 0.010143273266210118`], "Accuracy" -> 
              Around[0.8848397696530516, 0.03985561669927089], 
              "EvaluationTime" -> 6.010404409147867*^-6, "TestSize" -> 136, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31426260204366696`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 171224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6825916495494447, 0.007172377309965394]}, 
              "AccuracyHistory" -> {
                Around[0.8848397696530516, 0.028182176836426247`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147867*^-6, "MeanCrossEntropy" -> 
             Around[0.6825916495494447, 0.010143273266210118`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 171224, "TrainingTime" -> 
             0.016238676378855448`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6837843453992754, 0.004276324739878692], "Accuracy" -> 
              Around[0.7287391050235665, 0.024490417676348228`], 
              "EvaluationTime" -> 4.067474871184692*^-6, "TestSize" -> 665, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31429079948693195`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6837843453992754, 0.0030238182221240216`]}, 
              "AccuracyHistory" -> {
                Around[0.7287391050235665, 0.01731734041303672]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6816059819062764, 0.004549381396756891], "Accuracy" -> 
              Around[0.849005351904736, 0.02136343667888245], 
              "EvaluationTime" -> 4.651522780245356*^-6, "TestSize" -> 580, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.31118397876386594`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 74128, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6816059819062764, 0.0032168984358507246`]}, 
              "AccuracyHistory" -> {
                Around[0.849005351904736, 0.015106230945087196`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6676451414691092, 0.010077782809158078`], "Accuracy" -> 
              Around[0.8848397696530516, 0.03985561669927089], 
              "EvaluationTime" -> 6.010404409147867*^-6, "TestSize" -> 136, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.29216938115807656`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 171296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6676451414691092, 0.00712606856368089]}, 
              "AccuracyHistory" -> {
                Around[0.8848397696530516, 0.028182176836426247`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147867*^-6, "MeanCrossEntropy" -> 
             Around[0.6676451414691092, 0.010077782809158078`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 171296, "TrainingTime" -> 
             0.023679849994669898`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9215359375458395, 0.13426957894487063`], "Accuracy" -> 
              Around[0.8582876600111516, 0.01934626549064459], 
              "EvaluationTime" -> 4.500617022589517*^-6, "TestSize" -> 665, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.640163871801894, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9215359375458395, 0.09494292977898049]}, 
              "AccuracyHistory" -> {
                Around[0.8582876600111516, 0.013679875519070078`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.39678263960227067`, 0.0461270037952382], "Accuracy" -> 
              Around[0.8588469313654121, 0.022007807162051918`], 
              "EvaluationTime" -> 6.411774039229529*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.20822881845062546`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.03433366024913229, 
              "TrainingMemory" -> 171432., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3762443124312142, 0.05554181181997762], 
                Around[0.4173209667733271, 0.06177452842601554]}, 
              "AccuracyHistory" -> {
                Around[0.8631696003080517, 0.03014424736822909], 
                Around[0.8545242624227725, 0.030904916148306243`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.411774039229529*^-6, "MeanCrossEntropy" -> 
             Around[0.39678263960227067`, 0.0461270037952382], "ModelMemory" -> 
             9200., "TrainingMemory" -> 171432., "TrainingTime" -> 
             0.06286969846110416], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4623271519378337, 0.04085152201496546], "Accuracy" -> 
              Around[0.7744304935594323, 0.023013895554166688`], 
              "EvaluationTime" -> 4.222482484829466*^-6, "TestSize" -> 665, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.06081123116976972, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 71152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4623271519378337, 0.02888638823857361]}, 
              "AccuracyHistory" -> {
                Around[0.7744304935594323, 0.016273281607870203`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3934654169588101, 0.034208022913949865`], "Accuracy" -> 
              Around[0.8633756059719441, 0.020501828864451687`], 
              "EvaluationTime" -> 4.2960742868875105`*^-6, "TestSize" -> 580, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.22236997727440788`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 79848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3934654169588101, 0.024188724973438748`]}, 
              "AccuracyHistory" -> {
                Around[0.8633756059719441, 0.014496982216779883`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.39645210886775073`, 0.045648355102002075`], "Accuracy" -> 
              Around[0.8588469313654121, 0.022007807162051918`], 
              "EvaluationTime" -> 6.010404409147866*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.20927925221556576`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.02511886431509579, 
              "TrainingMemory" -> 171410.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.37616311982087963`, 0.05500552999526745], 
                Around[0.4167410979146219, 0.061138601580849425`]}, 
              "AccuracyHistory" -> {
                Around[0.8631696003080517, 0.03014424736822909], 
                Around[0.8545242624227725, 0.030904916148306243`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.010404409147866*^-6, "MeanCrossEntropy" -> 
             Around[0.39645210886775073`, 0.045648355102002075`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 171410.66666666666`, 
             "TrainingTime" -> 0.04724751231848087], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.42393213677490205`, 0.027027996778737066`], "Accuracy" -> 
              Around[0.869682016037912, 0.025756473502104648`], 
              "EvaluationTime" -> 5.505109982315636*^-6, "TestSize" -> 272, 
              "ModelMemory" -> 9200., "ModelUtility" -> 0.15235790970223995`, 
              "TrainingSize" -> 544, "TrainingTime" -> 0.01721682899963702, 
              "TrainingMemory" -> 171469.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4124988092826018, 0.03319545261563147], 
                Around[0.4353654642672023, 0.03627969279803244]}, 
              "AccuracyHistory" -> {
                Around[0.8848397696530516, 0.028182176836426247`], 
                Around[0.8545242624227725, 0.030904916148306243`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.505109982315636*^-6, "MeanCrossEntropy" -> 
             Around[0.42393213677490205`, 0.027027996778737066`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 171469.3333333333, 
             "TrainingTime" -> 0.038737865249183295`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 221985570583208]], "MaxTrainingSize" -> 680, 
      "PreprocessorEvaluationTime" -> 3.65966796875`2.*^-6, 
      "PreprocessorMemory" -> 43360, "InputDimension" -> 4, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.4116147210672148, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.783412647569855`16.330458700473628*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.196, "ElapsedTimes" -> 
          0.18601, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 100, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.303077, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 544, "TimeBudgets" -> 0.39999999999999997`, 
          "ElapsedTimes" -> 0.407322, "ExperimentCounts" -> 16]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[221994160517800]], "ID" -> 
         221998455485096]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{True, True, True, True}}, "ID" -> 
           4635246341379078022]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.343183, 
      "MaxTrainingMemory" -> 811944, "DataMemory" -> 60296, "FunctionMemory" -> 
      213024, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 11, 22, 11, 57, 28.061691`8.20068881962794}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.783430324463315*^9, 3.783430333860487*^9}, 
   3.7834306480774*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"2cd292c5-bcff-4b1c-810f-88124d50ead0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "accuracy", " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xorRes", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Xor", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], "}"}]}], 
        "]"}]}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"Count", "[", 
       RowBox[{"xorRes", ",", " ", "False"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "True"}], "]"}], " ", "+", " ", 
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "False"}], "]"}]}], ")"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.783430348042367*^9, 3.7834303578073187`*^9}, 
   3.783430402709421*^9},
 CellLabel->
  "In[105]:=",ExpressionUUID->"fb41438c-c0f4-4536-9643-8c826b7c7c70"],

Cell[BoxData["0.8764705882352941`"], "Output",
 CellChangeTimes->{3.78343035811483*^9, 3.783430405139291*^9, 
  3.783430649485549*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"be0201d0-ba33-4a7a-be6c-e6549ceade53"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "PREDICTION", " ", "FOR", " ", "MONITORS", " ", "ON", " ", "MONITORS"}], 
   " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"monNum", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"monWinSize", " ", "=", " ", "5"}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"predWinSize", " ", "=", " ", "4"}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"predHorSize", " ", "=", " ", "4"}], ";"}], " "}]}]], "Input",
 CellChangeTimes->{{3.783426602486602*^9, 3.7834266231518593`*^9}, {
  3.7834300493457623`*^9, 3.783430049630494*^9}, {3.783431620765527*^9, 
  3.783431642783836*^9}, {3.7834317179709253`*^9, 3.7834317232820873`*^9}, {
  3.783431782204265*^9, 3.78343178398766*^9}, {3.7834353846287603`*^9, 
  3.783435385042706*^9}},
 CellLabel->
  "In[261]:=",ExpressionUUID->"2036f10a-0664-43ea-83eb-ac0093169329"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sesh4PrMonTraces18", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"\"\<Numeric\>\"", "\[Rule]", "True"}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", " ", 
     RowBox[{"allBinMonFilenames", "[", 
      RowBox[{
       RowBox[{"{", "4", "}"}], ",", " ", "monWinSize", ",", " ", "monNum"}], 
      "]"}]}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.783426405110736*^9, 3.783426468913166*^9}, {
  3.7834265126582727`*^9, 3.783426516210387*^9}, {3.7834265973811417`*^9, 
  3.783426635279222*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"3953cb9a-faa0-4790-9fe1-b4efe101c04f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainTuples", " ", "=", " ", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"predictions", " ", "for", " ", "tuples"}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", " ", "=", " ", "#"}], "}"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"(*", 
               RowBox[{"tuple", " ", "itself"}], "*)"}], 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
               RowBox[{"(*", 
                RowBox[{"true", " ", "value", " ", "after", " ", "horizon"}], 
                "*)"}], 
               RowBox[{"trace", "[", 
                RowBox[{"[", "  ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", "predWinSize"}], " ",
                   "+", " ", "predHorSize"}], "  ", "]"}], "]"}]}], "}"}], 
             "  ", "&"}], "   ", "/@", " ", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"enumerated", " ", "tuples"}], ",", " ", 
              RowBox[{"with", " ", "discarded", " ", "those", " ", 
               RowBox[{"w", "/", "o"}], " ", "true", " ", "label"}]}], " ", 
             "*)"}], " ", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"enumerate", "[", 
               RowBox[{"Partition", "[", 
                RowBox[{"trace", ",", " ", "predWinSize"}], "]"}], "]"}], ",",
               " ", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
                RowBox[{
                 RowBox[{"Quotient", "[", 
                  RowBox[{
                   RowBox[{"Length", "@", "trace"}], ",", " ", 
                   "predWinSize"}], "]"}], "-", "predHorSize"}]}], "&"}]}], 
             "]"}]}], ")"}]}], "]"}], " ", "&"}], "/@", " ", 
       "sesh4PrMonTraces18"}], ",", "1"}], "]"}], 
    RowBox[{"(*", " ", 
     RowBox[{"replace", " ", 
      RowBox[{"1", "/", "0"}], " ", "with", " ", "booleans"}], " ", "*)"}], 
    " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"features", " ", "=", " ", 
   RowBox[{"trainTuples", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", " ", "=", " ", 
   RowBox[{"trainTuples", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.783426654433341*^9, 3.783426662152543*^9}, {
  3.78343073981398*^9, 3.783430745564707*^9}},
 CellLabel->
  "In[266]:=",ExpressionUUID->"7ce2e0ea-5482-4ad4-8951-3d80a84533d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pred", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[271]:=",ExpressionUUID->"44d78411-3452-40dc-88c6-d5e169fcdacc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["665", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 665, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 4]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3426787970643080940, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 665, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.010526315789473686`, 0.010526315789473686`, 
                    0.010526315789473686`, 0.013533834586466165`}, "Method" -> 
                   "Naive", "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.010526315789473686`, 0.010526315789473686`, 
                    0.010526315789473686`, 0.013533834586466165`}, 
                   "StandardDeviation" -> {0.1020564180508701, 
                    0.1020564180508701, 0.1020564180508701, 
                    0.11554509902134463`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.5111480308146866, -0.48378073317229764`}, \
{-0.5111480308146866, -0.48378073317229775`}, {-0.502265039353345, 
                   0.4240702723436607}, {-0.4745368388564992, 
                   0.5933606058181835}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.010526315789473686`, 0.010526315789473686`, 
                    0.010526315789473686`, 0.013533834586466165`}, 
                    "StandardDeviation" -> {0.1020564180508701, 
                    0.1020564180508701, 0.1020564180508701, 
                    0.11554509902134463`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.009312, "MaxTrainingMemory" -> 126992, 
                  "DataMemory" -> 22648, "FunctionMemory" -> 21744, 
                  "LanguageVersion" -> {12., 0}, "Date" -> 
                  DateObject[{
                    2019, 11, 22, 13, 16, 52.762076`8.474896850130254}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 4, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12., 0}, "ID" -> 
             4507977886487902166]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.010526315789473686`, 0.010526315789473686`, 
              0.010526315789473686`, 0.013533834586466165`}, 
             "StandardDeviation" -> {0.1020564180508701, 0.1020564180508701, 
              0.1020564180508701, 0.11554509902134463`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 90821989271419185]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 2148322281829064388, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1567982190013531112]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       False -> 0.9820089955022488, True -> 0.017991004497751123`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{
             11.732022285461426`, -11.865057945251465`, -14.537546157836914`, 
             15.90771484375}}], "Biases" -> 
           RawArray["Real32",{5.061600685119629}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 4, 
           "$InputDimensions" -> {4}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.11", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.00001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[283841], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.130986`5.568769873520731, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.013972770224488932`, 0.0071200207280556725`], "Accuracy" -> 
         Around[0.9893513341461101, 0.008400494203034606], "EvaluationTime" -> 
         4.0827674668749076`*^-6, "TestSize" -> 565, "ModelMemory" -> 9200, 
         "ModelUtility" -> 3.4804437529973424`, "TrainingSize" -> 100, 
         "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 81136, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.013972770224488932`, 0.005034614938996945]}, 
         "AccuracyHistory" -> {
           Around[0.9893513341461101, 0.0059400464162840515`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.00001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 665], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 57780380927302]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.1750941027892345, 0.08466695222120987], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.962708452228806*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.9569632274100358, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 71944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1750941027892345, 0.05986857605801492]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.013972770224488932`, 0.0071200207280556725`], 
              "Accuracy" -> Around[0.9893513341461101, 0.008400494203034606], 
              "EvaluationTime" -> 4.0827674668749076`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.4804437529973424`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 81136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.013972770224488932`, 0.005034614938996945]}, 
              "AccuracyHistory" -> {
                Around[0.9893513341461101, 0.0059400464162840515`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.020158952314409437`, 0.024805810592735296`], 
              "Accuracy" -> Around[0.9683833987661303, 0.026069254068309653`],
               "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 2.990932884885922, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 169864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.020158952314409437`, 0.01754035688295222]}, 
              "AccuracyHistory" -> {
                Around[0.9683833987661303, 0.018433746332176745`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.020158952314409437`, 0.024805810592735296`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 169864, 
             "TrainingTime" -> 0.07488226063428294], "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6667238590862746, 0.006760852580325062], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.161339675904338*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2898001999177068, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 64848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6667238590862746, 0.004780644706150418]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.49701761992075166`, 0.014741763318773542`], "Accuracy" -> 
              Around[0.9838686551342821, 0.020807182872848818`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.00006174065226427494,
               "TrainingSize" -> 532, "TrainingTime" -> 0.015848931924611134`,
               "TrainingMemory" -> 169992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.49701761992075166`, 0.010424000809351875`]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.49701761992075166`, 0.014741763318773542`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 169992, 
             "TrainingTime" -> 0.02775444725300673], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6746796657948633, 0.006972259135019686], "Accuracy" -> 
              Around[0.9852585568105309, 0.008800726451649647], 
              "EvaluationTime" -> 4.496472020903845*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.30170092790810654`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 63872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6746796657948633, 0.004930131714562272]}, 
              "AccuracyHistory" -> {
                Around[0.9852585568105309, 0.006223053353329287]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6706162510342916, 0.016106438138650012`], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2983872593689295, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              169872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6706162510342916, 0.011388971628601058`]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.6706162510342916, 0.016106438138650012`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169872, "TrainingTime" -> 
             0.018809573444801927`], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.07762484977195158, 0.029458536461116354`], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.1613396759043384`*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.7895568835182565`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 70664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07762484977195158, 0.020830330895486533`]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.018156271637680736`, 0.00701601252397364], "Accuracy" -> 
              Around[0.9919925180262332, 0.00784111307238254], 
              "EvaluationTime" -> 4.410129356450896*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.241142003749721, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.018156271637680736`, 0.004961070032591506]}, 
              "AccuracyHistory" -> {
                Around[0.9919925180262332, 0.005544504225532178]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.06089931516709185, 0.03742123833256545], "Accuracy" -> 
              Around[0.9838686551342821, 0.020807182872848818`], 
              "EvaluationTime" -> 5.370939372709284*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.9894692964033296`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 169808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06089931516709185, 0.026460811385355]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.370939372709284*^-6, "MeanCrossEntropy" -> 
             Around[0.06089931516709185, 0.03742123833256545], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169808, "TrainingTime" -> 
             0.0521177248700464], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.09260340577557478, 0.04253222558923062], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.604477415418505*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.5983942250635716`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 71720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.09260340577557478, 0.030074825133100974`]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.01588988224824752, 0.0070371474602776846`], "Accuracy" -> 
              Around[0.9893513341461101, 0.008400494203034606], 
              "EvaluationTime" -> 3.937848166810025*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.364050685440348, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.01588988224824752, 0.004976014689372041]}, 
              "AccuracyHistory" -> {
                Around[0.9893513341461101, 0.0059400464162840515`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.02097490194557883, 0.024573849742394512`], "Accuracy" -> 
              Around[0.9838686551342821, 0.020807182872848818`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 2.9607576613206703`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 170000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.02097490194557883, 0.017376335792706452`]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.02097490194557883, 0.024573849742394512`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 170000, 
             "TrainingTime" -> 0.05537740267671587], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.11839161995536317`, 0.05621880208482344], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.31992438832553*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.3498760403922705`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.11839161995536317`, 0.039752696184363064`]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.014322657448925066`, 0.007100204695025087], "Accuracy" -> 
              Around[0.9893513341461101, 0.008400494203034606], 
              "EvaluationTime" -> 4.0827674668749076`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.458225120629454, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80968, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.014322657448925066`, 0.005020602887664801]}, 
              "AccuracyHistory" -> {
                Around[0.9893513341461101, 0.0059400464162840515`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.019026022487923327`, 0.012365067166733707`], 
              "Accuracy" -> Around[0.9873102576562462, 0.010172040800707924`],
               "EvaluationTime" -> 5.629285395450575*^-6, "TestSize" -> 266, 
              "ModelMemory" -> 9200., "ModelUtility" -> 3.14659368918725, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.039810717055349706`, 
              "TrainingMemory" -> 170114.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.016173708189507457`, 0.017581372681221237`], 
                Around[0.021878336786339197`, 0.016500495039949586`]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`], 
                Around[0.9907518601782103, 0.012604450758942431`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.629285395450575*^-6, "MeanCrossEntropy" -> 
             Around[0.019026022487923327`, 0.012365067166733707`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 170114.66666666666`, 
             "TrainingTime" -> 0.06971601946887591], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6738675150747545, 0.006823257747105456], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.31992438832553*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3004547985357452, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 63976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6738675150747545, 0.004824771822761913]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6684002957473911, 0.016059976418306008`], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2950794442265917, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              169872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6684002957473911, 0.01135611823108022]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.6684002957473911, 0.016059976418306008`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169872, "TrainingTime" -> 
             0.018809573444801927`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3463786688880166, 0.007796998690708119], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.1613396759043384`*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.3625772836931548, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              67800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3463786688880166, 0.005513310647102343]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.07846536018720739, 0.028434602168770622`], "Accuracy" -> 
              Around[0.9838686551342821, 0.020807182872848818`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.7819737598046919`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 169928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07846536018720739, 0.020106300013879416`]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.07846536018720739, 0.028434602168770622`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 169928, 
             "TrainingTime" -> 0.059763396319187145`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6087605602007367, 0.006363142848196254], "Accuracy" -> 
              Around[0.9849383250691989, 0.008583099454969838], 
              "EvaluationTime" -> 4.2873079905761205`*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.19891157972129048`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6087605602007367, 0.004499421457618253]}, 
              "AccuracyHistory" -> {
                Around[0.9849383250691989, 0.006069167828207732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.19898270717706462`, 0.022256077260847704`], "Accuracy" -> 
              Around[0.9838686551342821, 0.020807182872848818`], 
              "EvaluationTime" -> 7.121692560128052*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.8992605333218454, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 169864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.19898270717706462`, 0.015737423153757132`]}, 
              "AccuracyHistory" -> {
                Around[0.9838686551342821, 0.014712900106779989`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.121692560128052*^-6, "MeanCrossEntropy" -> 
             Around[0.19898270717706462`, 0.022256077260847704`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 169864, 
             "TrainingTime" -> 0.0328840612843538], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.020383800653669303`, 0.012143727197791948`], 
              "Accuracy" -> Around[0.9843712162008738, 0.011830581444387719`],
               "EvaluationTime" -> 8.048807685994888*^-6, "TestSize" -> 266, 
              "ModelMemory" -> 9200., "ModelUtility" -> 3.0872911281590847`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.0343520900862391, 
              "TrainingMemory" -> 170050.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.018853637456395636`, 0.017615058413223535`], 
                Around[0.02191396385094297, 0.016512249890415567`]}, 
              "AccuracyHistory" -> {
                Around[0.9779905722235372, 0.016262432000325972`], 
                Around[0.9907518601782103, 0.012604450758942431`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.048807685994888*^-6, "MeanCrossEntropy" -> 
             Around[0.020383800653669303`, 0.012143727197791948`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 170050.66666666666`, 
             "TrainingTime" -> 0.07729220269403797], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 57776085960006]], "MaxTrainingSize" -> 665, 
      "PreprocessorEvaluationTime" -> 3.69970703125`2.*^-6, 
      "PreprocessorMemory" -> 43360, "InputDimension" -> 4, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.09011394525813347, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.783417413603686`16.330459247561954*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.19599999999999998`, 
          "ElapsedTimes" -> 0.190305, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 100, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.317665, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 532, "TimeBudgets" -> 0.39999999999999997`, 
          "ElapsedTimes" -> 0.418597, "ExperimentCounts" -> 12]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[57784675894598]], "ID" -> 57788970861894]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{False, False, True, True}}, "ID" -> 
           4635246341379078022]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.386215, 
      "MaxTrainingMemory" -> 796400, "DataMemory" -> 59216, "FunctionMemory" -> 
      207904, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 11, 22, 13, 16, 54.119965`8.485932481493762}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783430827132723*^9, 3.783431739092551*^9, 
  3.783435414135152*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"5146169c-0ead-4018-a62f-45facdefbc23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "accuracy", " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xorRes", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Xor", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"pred", "@", "features"}], ",", " ", "labels"}], "}"}]}], 
        "]"}]}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"Count", "[", 
       RowBox[{"xorRes", ",", " ", "False"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "True"}], "]"}], " ", "+", " ", 
        RowBox[{"Count", "[", 
         RowBox[{"xorRes", ",", " ", "False"}], "]"}]}], ")"}]}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"83c8cc8a-466f-449c-b0e8-589454243dbc"],

Cell[BoxData["0.9923664122137404`"], "Output",
 CellChangeTimes->{3.783431135229319*^9, 3.7834317399667273`*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"54bde6df-8023-4f45-aca5-15393f79b5aa"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "PREDICTION", " ", "FOR", " ", "MONITORS", " ", "ON", " ", "DETECTORS"}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", "evalMonPredOverDet", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"evalMonPredOverDet", "[", 
      RowBox[{
      "monWinSize_", ",", " ", "predWinSize_", ",", " ", "predHorSize_"}], 
      "]"}], " ", ":=", "   ", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"trainTuples", " ", "=", " ", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"(*", " ", 
           RowBox[{"predictions", " ", "for", " ", "tuples"}], " ", "*)"}], 
          " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"detTrace", " ", "=", " ", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                 RowBox[{"monTrace", " ", "=", " ", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"(*", 
                    RowBox[{"tuple", " ", "itself"}], "*)"}], 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{
                    "true", " ", "value", " ", "after", " ", "horizon"}], 
                    "*)"}], 
                    RowBox[{"monTrace", "[", 
                    RowBox[{"[", "  ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", "predWinSize"}], " ",
                     "+", " ", "predHorSize"}], "  ", "]"}], "]"}]}], "}"}], 
                  "  ", "&"}], "   ", "/@", " ", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"enumerated", " ", "tuples"}], ",", " ", 
                   RowBox[{"with", " ", "discarded", " ", "those", " ", 
                    RowBox[{"w", "/", "o"}], " ", "true", " ", "label"}]}], 
                  " ", "*)"}], " ", 
                 RowBox[{"Select", "[", 
                  RowBox[{
                   RowBox[{"enumerate", "[", 
                    RowBox[{"Partition", "[", 
                    RowBox[{"detTrace", ",", " ", "predWinSize"}], "]"}], 
                    "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
                    
                    RowBox[{
                    RowBox[{"Quotient", "[", 
                    RowBox[{
                    RowBox[{"Length", "@", "detTrace"}], ",", " ", 
                    "predWinSize"}], "]"}], "-", "predHorSize"}]}], "&"}]}], 
                  "]"}]}], ")"}]}], "]"}], " ", "&"}], "/@", " ", 
            RowBox[{"Inner", "[", 
             RowBox[{
             "List", ",", " ", "sesh4DetTraces", ",", " ", "sesh4PrMonTraces",
               ",", " ", "List"}], "]"}]}], ",", "1"}], "]"}], 
         RowBox[{"(*", " ", 
          RowBox[{"replace", " ", 
           RowBox[{"1", "/", "0"}], " ", "with", " ", "booleans"}], " ", 
          "*)"}], " ", "/.", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
           RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"features", " ", "=", " ", 
        RowBox[{"trainTuples", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"labels", " ", "=", " ", 
        RowBox[{"trainTuples", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"pred", " ", "=", " ", 
        RowBox[{"Classify", "[", 
         RowBox[{
          RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
          RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "APR", " ", "*)"}], " ", 
       RowBox[{"apr", "[", 
        RowBox[{"features", ",", " ", "labels", ",", "pred"}], "]"}]}], 
      ")"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.783434426758328*^9, 3.7834344278547297`*^9}, {
  3.783435325279949*^9, 
  3.7834353491354923`*^9}},ExpressionUUID->"11c780b2-14e6-4cf4-b82e-\
8a1a392dd5c7"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", "example", " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"monNum", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"monWinSize", " ", "=", " ", "5"}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"predWinSize", " ", "=", "4"}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"predHorSize", " ", "=", " ", "4"}], ";"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sesh4PrMonTraces", " ", "=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Import", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"\"\<Numeric\>\"", "\[Rule]", "True"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", " ", 
       RowBox[{"allBinMonFilenames", "[", 
        RowBox[{
         RowBox[{"{", "4", "}"}], ",", " ", "monWinSize", ",", " ", 
         "monNum"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sesh4DetTraces", " ", "=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Import", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"\"\<Numeric\>\"", "\[Rule]", "True"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", " ", 
       RowBox[{"allBinDetFilenames", "[", 
        RowBox[{"{", "4", "}"}], "]"}]}], ")"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.783431805891322*^9, 3.783431848836569*^9}, {
  3.783431983197845*^9, 3.78343199902283*^9}, {3.7834321545272512`*^9, 
  3.783432155535017*^9}, {3.7834343933302507`*^9, 3.7834344321642437`*^9}, {
  3.783435459963293*^9, 3.783435462468585*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"bb1b4240-13d2-4663-af8f-82f4305d4666"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainTuples", " ", "=", " ", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"predictions", " ", "for", " ", "tuples"}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"detTrace", " ", "=", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
            RowBox[{"monTrace", " ", "=", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"(*", 
               RowBox[{"tuple", " ", "itself"}], "*)"}], 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
               RowBox[{"(*", 
                RowBox[{"true", " ", "value", " ", "after", " ", "horizon"}], 
                "*)"}], 
               RowBox[{"monTrace", "[", 
                RowBox[{"[", "  ", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", "predWinSize"}], " ",
                   "+", " ", "predHorSize"}], "  ", "]"}], "]"}]}], "}"}], 
             "  ", "&"}], "   ", "/@", " ", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"enumerated", " ", "tuples"}], ",", " ", 
              RowBox[{"with", " ", "discarded", " ", "those", " ", 
               RowBox[{"w", "/", "o"}], " ", "true", " ", "label"}]}], " ", 
             "*)"}], " ", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"enumerate", "[", 
               RowBox[{"Partition", "[", 
                RowBox[{"detTrace", ",", " ", "predWinSize"}], "]"}], "]"}], 
              ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
                RowBox[{
                 RowBox[{"Quotient", "[", 
                  RowBox[{
                   RowBox[{"Length", "@", "detTrace"}], ",", " ", 
                   "predWinSize"}], "]"}], "-", "predHorSize"}]}], "&"}]}], 
             "]"}]}], ")"}]}], "]"}], " ", "&"}], "/@", " ", 
       RowBox[{"Inner", "[", 
        RowBox[{
        "List", ",", " ", "sesh4DetTraces", ",", " ", "sesh4PrMonTraces", ",",
          " ", "List"}], "]"}]}], ",", "1"}], "]"}], 
    RowBox[{"(*", " ", 
     RowBox[{"replace", " ", 
      RowBox[{"1", "/", "0"}], " ", "with", " ", "booleans"}], " ", "*)"}], 
    " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"0", "\[Rule]", " ", "False"}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"features", " ", "=", " ", 
   RowBox[{"trainTuples", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", " ", "=", " ", 
   RowBox[{"trainTuples", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.783431996898366*^9, {3.783432251427649*^9, 3.783432282860038*^9}, {
   3.783435477334361*^9, 3.7834354775714493`*^9}},
 CellLabel->
  "In[283]:=",ExpressionUUID->"71d9b17c-3e8b-4a0e-a6b8-191c9026e0f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pred", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"features", " ", "\[Rule]", " ", "labels"}], ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[288]:=",ExpressionUUID->"13824a22-2306-48af-a1c3-3ad397ee5914"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["665", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 665, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 4]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3426787970643080940, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 665, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.8766917293233083, 0.8691729323308272, 
                    0.8721804511278196, 0.8827067669172933}, "Method" -> 
                   "Naive", "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.8766917293233083, 0.8691729323308272, 
                    0.8721804511278196, 0.8827067669172933}, 
                   "StandardDeviation" -> {0.32879072532450704`, 
                    0.33721112976036016`, 0.33388877159660924`, 
                    0.3217693747946074}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.5260743720380336, -0.45490271973676516`, 
                   0.24665537841433566`, 
                   0.6748854680315496}, {-0.5160145619882085, \
-0.44590891695072227`, -0.5223706335558338, -0.511881950061172}, \
{-0.41454311077057365`, 0.6902322255930756, -0.49692598695962914`, 
                   0.32372526554114395`}, {-0.5339744714998665, 
                   0.34323203246893735`, 
                   0.6475759484276391, -0.4215547730624387}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.8766917293233083, 0.8691729323308272, 
                    0.8721804511278196, 0.8827067669172933}, 
                    "StandardDeviation" -> {0.32879072532450704`, 
                    0.33721112976036016`, 0.33388877159660924`, 
                    0.3217693747946074}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 4, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.010467, "MaxTrainingMemory" -> 126992, 
                  "DataMemory" -> 22648, "FunctionMemory" -> 21744, 
                  "LanguageVersion" -> {12., 0}, "Date" -> 
                  DateObject[{
                    2019, 11, 22, 13, 18, 9.773971`7.742646032819607}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 4, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12., 0}, "ID" -> 
             4507977886487902166]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.8766917293233083, 0.8691729323308272, 
              0.8721804511278196, 0.8827067669172933}, 
             "StandardDeviation" -> {0.32879072532450704`, 
              0.33721112976036016`, 0.33388877159660924`, 0.3217693747946074},
              "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 90821989271419185]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1594110942329843211]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[False -> 1, True -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 2148322281829064388, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1567982190013531112]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       False -> 0.9820089955022488, True -> 0.017991004497751123`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{0.19926555454730988`, 0.22573578357696533`, 
             0.7160890698432922, 2.9281060695648193`}}], "Biases" -> 
           RawArray["Real32",{11.087051391601562`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 4, 
           "$InputDimensions" -> {4}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.11", "Unstable" -> False]], 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.00001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[286561], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.133664`5.577559447080998, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.003394924369504275, 0.006078091350746996], "Accuracy" -> 
         Around[0.991672135530488, 0.007524873789762307], "EvaluationTime" -> 
         4.540955433869089*^-6, "TestSize" -> 600, "ModelMemory" -> 9200, 
         "ModelUtility" -> 4.686256224010877, "TrainingSize" -> 15, 
         "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 71624, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.003394924369504275, 0.004297859610784503]}, 
         "AccuracyHistory" -> {
           Around[0.991672135530488, 0.005320889284313842]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.00001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 665], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 57831920534931]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.003394924369504275, 0.006078091350746996], "Accuracy" -> 
              Around[0.991672135530488, 0.007524873789762307], 
              "EvaluationTime" -> 4.540955433869089*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> 4.686256224010877, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.003394924369504275, 0.004297859610784503]}, 
              "AccuracyHistory" -> {
                Around[0.991672135530488, 0.005320889284313842]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.008716745614722682, 0.008635993613021593], "Accuracy" -> 
              Around[0.9839329956796318, 0.009316416066419208], 
              "EvaluationTime" -> 4.2652100563860136`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.868579462429387, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.008716745614722682, 0.006106569646051281]}, 
              "AccuracyHistory" -> {
                Around[0.9839329956796318, 0.006587700976920323]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.06593204257583177, 0.038606509746932194`], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 7.121692560128052*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.9152322278175276`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 169864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06593204257583177, 0.027298924840000297`]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.121692560128052*^-6, "MeanCrossEntropy" -> 
             Around[0.06593204257583177, 0.038606509746932194`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 169864, 
             "TrainingTime" -> 0.06971601946887593], "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.667267781673627, 0.006765801709947478], "Accuracy" -> 
              Around[0.9908598255744031, 0.007430466324724428], 
              "EvaluationTime" -> 4.31992438832553*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2906155121188466, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 65600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.667267781673627, 0.0047841442692674]}, 
              "AccuracyHistory" -> {
                Around[0.9908598255744031, 0.005254133125590926]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5037281769791896, 0.014949027680738265`], "Accuracy" -> 
              Around[0.972884556479861, 0.024700382194358345`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.013352819584235398`,
               "TrainingSize" -> 532, "TrainingTime" -> 0.015848931924611134`,
               "TrainingMemory" -> 170112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5037281769791896, 0.010570558845195433`]}, 
              "AccuracyHistory" -> {
                Around[0.972884556479861, 0.01746580774753024]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.5037281769791896, 0.014949027680738265`], "ModelMemory" -> 
             9200, "TrainingMemory" -> 170112, "TrainingTime" -> 
             0.02775444725300673], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6746801883472053, 0.006972263889524868], "Accuracy" -> 
              Around[0.991672135530488, 0.007524873789762307], 
              "EvaluationTime" -> 4.540955433869089*^-6, "TestSize" -> 600, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3017017024684614, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 63808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6746801883472053, 0.004930135076505127]}, 
              "AccuracyHistory" -> {
                Around[0.991672135530488, 0.005320889284313842]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6738660411251823, 0.0073289512731396075`], "Accuracy" -> 
              Around[0.9901347376315782, 0.008232052773515373], 
              "EvaluationTime" -> 4.4101293564508965`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.3006023886445023, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 73480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6738660411251823, 0.005182351144222797]}, 
              "AccuracyHistory" -> {
                Around[0.9901347376315782, 0.005820940339238247]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6706281684510714, 0.01610669079549403], "Accuracy" -> 
              Around[0.972884556479861, 0.024700382194358345`], 
              "EvaluationTime" -> 6.76161206150954*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.2984050208955493, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              169864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6706281684510714, 0.011389150283968776`]}, 
              "AccuracyHistory" -> {
                Around[0.972884556479861, 0.01746580774753024]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.76161206150954*^-6, "MeanCrossEntropy" -> 
             Around[0.6706281684510714, 0.01610669079549403], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169864, "TrainingTime" -> 
             0.018809573444801927`], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.020662751676942072`, 0.005950286917831535], "Accuracy" -> 
              Around[0.9908598255744031, 0.007430466324724428], 
              "EvaluationTime" -> 4.604477415418505*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.130272308881154, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.020662751676942072`, 0.004207488229604279]}, 
              "AccuracyHistory" -> {
                Around[0.9908598255744031, 0.005254133125590926]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.02008749485844258, 0.007158182773300656], "Accuracy" -> 
              Around[0.9901347376315782, 0.008232052773515373], 
              "EvaluationTime" -> 4.2652100563860136`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.14565941098606, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 81008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.02008749485844258, 0.00506159957997362]}, 
              "AccuracyHistory" -> {
                Around[0.9901347376315782, 0.005820940339238247]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.04345939916151365, 0.025606843478785005`], "Accuracy" -> 
              Around[0.9828931829743388, 0.012652090283650457`], 
              "EvaluationTime" -> 6.025178340193556*^-6, "TestSize" -> 266, 
              "ModelMemory" -> 9200., "ModelUtility" -> 2.3313740523744726`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 170072., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06611006725553507, 0.026698611705642698`], 
                Around[0.020808731067492234`, 0.013354835782758251`]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021], 
                Around[0.9907518601782103, 0.012604450758942431`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.025178340193556*^-6, "MeanCrossEntropy" -> 
             Around[0.04345939916151365, 0.025606843478785005`], 
             "ModelMemory" -> 9200., "TrainingMemory" -> 170072., 
             "TrainingTime" -> 0.05948109390179353], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.006595596844466029, 0.006030748579847225], "Accuracy" -> 
              Around[0.9908598255744031, 0.007430466324724428], 
              "EvaluationTime" -> 4.1613396759043384`*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 4.160254157090083, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71592, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.006595596844466029, 0.004264383216441113]}, 
              "AccuracyHistory" -> {
                Around[0.9908598255744031, 0.005254133125590926]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.014882946093946518`, 0.007969541666495251], "Accuracy" -> 
              Around[0.9839329956796318, 0.009316416066419208], 
              "EvaluationTime" -> 4.0827674668749076`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.4126451496730907`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.014882946093946518`, 0.005635316955327531]}, 
              "AccuracyHistory" -> {
                Around[0.9839329956796318, 0.006587700976920323]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.06611933901563247, 0.03857022240562562], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 4.8819234113116905`*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.9127908027725256`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 169928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06611933901563247, 0.027273265814891184`]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.8819234113116905`*^-6, "MeanCrossEntropy" -> 
             Around[0.06611933901563247, 0.03857022240562562], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169928, "TrainingTime" -> 
             0.05948109390179353], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.0049999590186963466`, 0.00853714001260759], "Accuracy" -> 
              Around[0.9886609441420988, 0.008912617938344957], 
              "EvaluationTime" -> 8.763191788879876*^-6, "TestSize" -> 500, 
              "ModelMemory" -> 9200, "ModelUtility" -> 4.311392319596608, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 71608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.0049999590186963466`, 0.006036669594853834]}, 
              "AccuracyHistory" -> {
                Around[0.9886609441420988, 0.0063021725823285855`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.010522116051329144`, 0.008484716487296666], "Accuracy" -> 
              Around[0.9839329956796318, 0.009316416066419208], 
              "EvaluationTime" -> 3.7929288667451404`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 3.711604809679632, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 80904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.010522116051329144`, 0.005999600564612776]}, 
              "AccuracyHistory" -> {
                Around[0.9839329956796318, 0.006587700976920323]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.066021916494741, 0.03863498837390032], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 5.656961479535563*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.9139355102422564`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 169928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.066021916494741, 0.027319062270248343`]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.656961479535563*^-6, "MeanCrossEntropy" -> 
             Around[0.066021916494741, 0.03863498837390032], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169928, "TrainingTime" -> 
             0.06464733506720052], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6738730440493025, 0.006823306982205992], "Accuracy" -> 
              Around[0.9908598255744031, 0.007430466324724428], 
              "EvaluationTime" -> 4.31992438832553*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.30046300153030125`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 64480, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6738730440493025, 0.004824806637235374]}, 
              "AccuracyHistory" -> {
                Around[0.9908598255744031, 0.005254133125590926]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6685187087367326, 0.01606249868056525], "Accuracy" -> 
              Around[0.972884556479861, 0.024700382194358345`], 
              "EvaluationTime" -> 6.145977440933157*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> -0.29525649137561094`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 169864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6685187087367326, 0.011357901739827661`]}, 
              "AccuracyHistory" -> {
                Around[0.972884556479861, 0.01746580774753024]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.145977440933157*^-6, "MeanCrossEntropy" -> 
             Around[0.6685187087367326, 0.01606249868056525], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169864, "TrainingTime" -> 
             0.022046141092229014`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.35641225175043467`, 0.006175506421673586], "Accuracy" -> 
              Around[0.9908598255744031, 0.007430466324724428], 
              "EvaluationTime" -> 4.193956073653747*^-6, "TestSize" -> 650, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.33505433015789665`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              68736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35641225175043467`, 0.004366742468026463]}, 
              "AccuracyHistory" -> {
                Around[0.9908598255744031, 0.005254133125590926]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.13312927946778233`, 0.00684408731778977], "Accuracy" -> 
              Around[0.9901347376315782, 0.008232052773515373], 
              "EvaluationTime" -> 3.6480095666802583`*^-6, "TestSize" -> 565, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.3130517345051862`, 
              "TrainingSize" -> 100, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 79064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.13312927946778233`, 0.004839500553441995]}, 
              "AccuracyHistory" -> {
                Around[0.9901347376315782, 0.005820940339238247]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.0842364335728752, 0.02729854023672836], "Accuracy" -> 
              Around[0.972884556479861, 0.024700382194358345`], 
              "EvaluationTime" -> 6.76161206150954*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 1.7181740272517263`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 169928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.0842364335728752, 0.019302982917884442`]}, 
              "AccuracyHistory" -> {
                Around[0.972884556479861, 0.01746580774753024]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.76161206150954*^-6, "MeanCrossEntropy" -> 
             Around[0.0842364335728752, 0.02729854023672836], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169928, "TrainingTime" -> 
             0.04139858039386974], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.205027846433972, 0.02172484270770381], "Accuracy" -> 
              Around[0.972884556479861, 0.024700382194358345`], 
              "EvaluationTime" -> 8.512365248928307*^-6, "TestSize" -> 133, 
              "ModelMemory" -> 9200, "ModelUtility" -> 0.870485312786231, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 169864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.205027846433972, 0.01536178359882848]}, 
              "AccuracyHistory" -> {
                Around[0.972884556479861, 0.01746580774753024]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.512365248928307*^-6, "MeanCrossEntropy" -> 
             Around[0.205027846433972, 0.02172484270770381], "ModelMemory" -> 
             9200, "TrainingMemory" -> 169864, "TrainingTime" -> 
             0.044893402086799775`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.06592987558188883, 0.038605614990607016`], "Accuracy" -> 
              Around[0.9750345057704672, 0.022713034468542524`], 
              "EvaluationTime" -> 0.000010716432926349431`, "TestSize" -> 133,
               "ModelMemory" -> 9200, "ModelUtility" -> 1.9152640759001882`, 
              "TrainingSize" -> 532, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              192080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.06592987558188883, 0.02729829215173525]}, 
              "AccuracyHistory" -> {
                Around[0.9750345057704672, 0.01606054069403021]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010716432926349431`, "MeanCrossEntropy" -> 
             Around[0.06592987558188883, 0.038605614990607016`], 
             "ModelMemory" -> 9200, "TrainingMemory" -> 192080, 
             "TrainingTime" -> 0.225], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 57827625567635]], "MaxTrainingSize" -> 665, 
      "PreprocessorEvaluationTime" -> 3.8876953125`2.*^-6, 
      "PreprocessorMemory" -> 43360, "InputDimension" -> 4, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.09011394525813347, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.783417490646182`16.33045925640558*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.19599999999999992`, 
          "ElapsedTimes" -> 0.18538100000000002`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 100, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.360842, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 532, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3899349999999999, "ExperimentCounts" -> 11]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[57836215502227]], "ID" -> 57840510469523]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{False, False, False, False}}, "ID" -> 
           4635246341379078022]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.420009, 
      "MaxTrainingMemory" -> 795224, "DataMemory" -> 59216, "FunctionMemory" -> 
      208928, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 11, 22, 13, 18, 11.166513`7.8004925620251}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783433374452989*^9, 3.783435491187168*^9},
 CellLabel->
  "Out[288]=",ExpressionUUID->"2d7f6f70-67db-428d-9fc5-50549d7d9ecd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"apr", "[", 
  RowBox[{"features", ",", "labels", ",", "pred"}], "]"}]], "Input",
 CellChangeTimes->{{3.783433642352906*^9, 3.783433660217649*^9}, {
  3.7834337131302032`*^9, 3.783433725867621*^9}, {3.78343563955215*^9, 
  3.783435657493614*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"c7e2f21c-b125-4791-97f2-2d9281520521"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9880597014925373`", ",", "0.6428571428571429`", ",", "0.75`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.783433713752981*^9, 3.78343372934271*^9}, 
   3.783435512452372*^9, {3.783435649228159*^9, 3.783435658362878*^9}},
 CellLabel->
  "Out[296]=",ExpressionUUID->"9bf3e31e-07f6-4f2a-af2f-dca8332477dc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiscretePlot3D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"evalMonPredOverDet", "[", 
      RowBox[{"5", ",", " ", "predWin", ",", " ", "predHor"}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"predWin", ",", "3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"predHor", ",", " ", "3", ",", "3"}], "}"}], ",", " ", 
    RowBox[{"AxesLabel", "\[Rule]", "Automatic"}], ",", " ", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], " "}]], "Input",ExpressionUUI\
D->"f12b3397-ea02-4231-b1e9-1993fd082209"],

Cell[BoxData[
 RowBox[{"plotAcc", " ", "=", " ", 
  RowBox[{"DiscretePlot3D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"evalMonPredOverDet", "[", 
      RowBox[{"predWin", ",", " ", "predWin", ",", " ", "predHor"}], "]"}], 
     "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"predWin", ",", "3", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"predHor", ",", " ", "3", ",", "3"}], "}"}], ",", " ", 
    RowBox[{"AxesLabel", "\[Rule]", "Automatic"}], ",", " ", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.8", ",", "1"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783435912167943*^9, 3.783435950210052*^9}, {
  3.783435995404804*^9, 3.7834360188115597`*^9}, {3.783436071562907*^9, 
  3.7834360926460457`*^9}, {3.783436145395123*^9, 
  3.78343614575603*^9}},ExpressionUUID->"7e75dce0-7614-451d-a1d3-\
17d32cea70e0"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"plot", ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"0.9", ",", "1"}], "}"}]}]}], "]"}]], "Input",ExpressionUUID->\
"5ef4dffd-b6ed-4794-90a1-7e83c2818822"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"INITIAL", " ", "RESULTS"}], " ", "*)"}], " ", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "aprSet"}]], "Input",
 CellChangeTimes->{{3.783437538622963*^9, 3.783437544860486*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"31c4809d-d2cb-4517-9b25-33c03b679a8d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"0.9714076246334311`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"0.9720382634289919`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.9741506646971935`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9747961452928094`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9769345238095238`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.977595220313667`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.97976011994003`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.9804364183596689`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.9818731117824774`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"0.9933774834437086`", ",", "0.8064516129032258`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9855715871254163`", ",", "0.6666666666666666`", ",", 
       "0.8181818181818182`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.984375`", ",", "0.5909090909090909`", ",", "0.7222222222222222`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9809203142536476`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.981941309255079`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.985244040862656`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9863013698630136`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.9873708381171068`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.9919168591224018`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9940740740740741`", ",", "0.8125`", ",", "0.9285714285714286`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9880597014925373`", ",", "0.6428571428571429`", ",", "0.75`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.9834586466165414`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9833333333333333`", ",", "0.`", ",", "0.`"}], "}"}]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9893129770992366`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.9938461538461538`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.993798449612403`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.996875`", ",", "Indeterminate", ",", "0.`"}], "}"}]}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.9968503937007874`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9962894248608535`", ",", "0.9230769230769231`", ",", 
       "0.9230769230769231`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"0.9962546816479401`", ",", "0.8181818181818182`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9924385633270322`", ",", "0.6666666666666666`", ",", 
       "0.8571428571428571`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9904580152671756`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9922928709055877`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.9961089494163424`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9960707269155207`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.998015873015873`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.9979959919839679`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"0.9955257270693513`", ",", "0.7777777777777778`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"0.9909502262443439`", ",", "0.75`", ",", "0.75`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.988558352402746`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9952038369304557`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.9951456310679612`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.995085995085995`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"0.9973753280839895`", ",", "0.8888888888888888`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"0.9973404255319149`", ",", "0.8333333333333334`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.9973045822102425`", ",", "1.`", ",", "0.75`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9972677595628415`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.997229916897507`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.9971910112359551`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9971509971509972`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.9971098265895953`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"0.9970674486803519`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.9877300613496932`", ",", "0.3333333333333333`", ",", 
       "0.3333333333333333`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.9937694704049844`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"0.9936708860759493`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9935691318327974`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9966777408637874`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"0.9965986394557823`", ",", "0.8333333333333334`", ",", "1.`"}],
       "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"0.9965397923875432`", ",", "1.`", ",", "0.5`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"0.9964788732394366`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9963503649635036`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.9962825278810409`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9962121212121212`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"0.9961389961389961`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "4", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"0.9959016393442623`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "7", ",", 
     RowBox[{"{", 
      RowBox[{"0.99581589958159`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", 
     RowBox[{"{", 
      RowBox[{"0.9957264957264957`", ",", "Indeterminate", ",", "0.`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "9", ",", 
     RowBox[{"{", 
      RowBox[{"Indeterminate", ",", "Indeterminate", ",", "Indeterminate"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", 
     RowBox[{"{", 
      RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.783437545443055*^9},
 CellLabel->
  "Out[348]=",ExpressionUUID->"7648c619-1c1e-4280-8704-7526297ec021"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"accSet", ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<pred win\>\"", ",", " ", "\"\<pred hor\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.783437411248971*^9, 3.783437420207161*^9}, {
  3.7834377379981747`*^9, 3.783437742505433*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"9cbb678c-e2d2-4219-8099-575e255d0f48"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx12H9cTfcfB/Ao28XF7bq7rrvrur9EpqjRTOi1iOVrhvnRL8zKj6GUrPCd
W0whj1VWihBrG5VUqLC1ahGVSEmlX3L76Wdlpaiub9/NOXvsfR7O/eM8Hs/e
j1ef8zn3nvP5vJVfbV68pr+BgcGYfgYGhgbsAeYsXu7ilfNei82/nYesjT09
LVLqAgwfmGs4cwJ1ERwP7U/aa0FdAgv+lUn8WdRl+EPtl/PNp9QVSBqnarBw
oq6C46T3LNNXUddgQGLvuF0bGeex16U38QvLzKPOg9MnxZtu7qcu+PvsT10E
py1pr8+7UpcguG2auWATdRlGJGfvlu+lrkBPV1vd9RDqKlhELP816DB1DdRG
eZtyf2dcwF7XStcMj62F1HlI7eWvnhhNXYB9nQGztduoi+D710FdgoS82cne
sdRlOJVn4B1xk7oCJnd61llyXIW1/z8aqWtg5qq/Ycm6iL2uCxKNS9QD6jzo
7QL8FnFcANMnh/cMzabed7/mtPe7e466BPt7f3hVlUVdBkXt6L4PdQX4K8Iu
Ft6nrkJPRkt3Rgt1DZ4Gus47xLqEvS7j6v45DpXUeUB1qk11KnUBnk6fqrCL
oc78n1bikre4Ap6DQi6mltMcFRKtAk9Zc1yDz2ZdOJRRxriMHX/3aX2c3yPq
PLRuKvG14rgAi25Fzn/8kLoI1YmHhkdzXIJGl460BRyXwa/9p9G9zdQVOKCf
MSWO4yoMH91ZvZjjGjSf8NO/bGJcwV7Xv+eNcR5808uF3x6l9QJodfU/dhRQ
F+Hw/bs6E45L8Ni8beeiG9QVeDk29WJuPeMqdjwvN/qUqDjOQ9pz842n66gL
sKbHJ24sxyXY/q7MVKqjLkPSeqeGAw+oK/Dgu2Ezu2qpq/COfmndStY17Dj/
PrUS573FBW9xCeYHfjnKvYbmy3DSzmLB5WrqCtzurSrsraLOnJl8IzDnVXkz
cpdvaSHOh9WYzy4NcKbOw/fLmlJWLmZc/rf7q+H5UepHwxvpfVSj89Yjzwns
/VK+qVdBu1YRb6ej+QIEGdX3G72MuhAJ+VfLrjhQF6HC8OTy4/OoizEnc/rh
VV9Ql6BWr50YvJxxPjsPLotzn55MoPUGGJTpvjt7M63nYd+JlrX6MFovReyg
6pe2TtRlePJQoclfR3P4qNAGJo8IoS7A1W5blc23NEcO103PP4z1pK5AqSCo
vmcrzRGibbI8RuJBXYTm9gjrQ+40R4n4cMPB2b7UVbBztfJRf0tzxNg9+V7x
FS/qEhyvtmn5JIjmqPF+THzbgN3UNRA51uX/HM64EMzfJx84XFOfSfMNYJ4j
7xdVQOt5qFDae2Zx6qXQpX83Mi+Sugw16Q92OMXTHD6uRA/QNSVQF6DcK8Rt
znGaI8ei1ds/SEqkroDx2s4xOxNpjhC3LXj67GPU++5LTer0U+E0R4mEyeMP
1pynrsJ8/crQbZk0RwzDfTJHzVnqEkTVbVwam0Jz1JidGvn1iGLqGsRecD3W
W8S4+I0bYZ/xbNXSGppvAN5MrzV7y2k9DycOHl8VeYPWS3G4Li/t4+vUZahb
EmpaWUpz+EhxG6vr+I26AAfC1xebnqc5cvzkOFQTV0pdgZGS3GG7OPlC/PyJ
2HhIPHURzNSv/B+V0xwlLj/oGfp+HXUVzgk/OCd8THPEuKq13+lRS11CnMlR
Q2TcWdf1iLoGQzomDa5nXfrGjRBtW7HV/DbNN4BuR1jo9hpaz4NkTE7lQE69
FILWYX0f6nJ8+k3ZjQ1VNIePZ0veKZhxjboAJwast5JcozkKZHx48KJtFXUl
0twyHafV0xwhxjX951RHO3URPMryBxa20xwV7r6atqi3jroat2q2bmuuozli
ksO4BlFeI+dV3ac5GoxaM7g1js158x7sm/9tVo+s3++gOQYIzPb/6ImO1vOQ
Er7M7l42rZfAO3GH82nOeKTAq6IQbTvN4cPN7lLShWzqAqx3mOnrWUlz5Njm
d2TjvVrqCmj3rPVJqqU5QiR++nuFfSV1EaZdn/JfXQXNUeKYVOe+hZOvQm38
TNu5nHwxbKIbCn6toC5Bs523dCEnX41JFncv89icN+uKvvmfGn7auzCT5vTt
c794XWLTQet5iCgzzDzIqZci9WD+grGc8cgxPTjhsa6R5vAR9Wh/4IJy6gJs
aTn7y9BymqOAbdj2F5caqSsRqC7N/56TL4Te3WTO6TLqCjxdqttRy/leqXC7
dMH9pZz1mArfB5+qdaDrsT6fN0f/wJnNUbPz6bw9MvVOG603QM8U6w3Gz2k9
7y31Yuz7sytAwRm/BJZHA++kltIcPiy1v5WEtVEXEGdypLh545dzHqXU5ViS
u3fB+DqaI0K6YbBoCCdfAt2cmT/N4nyv+s5hATfDOPOswZOkTP2rx3SeNWjN
fK3vbqE5GrQX2rzu+ZPuIzTouu/3ureTjkeDnpa/goi/bf6l0Pqu2NVzn7oM
48pyjsRwXI4sN8U1B44rUI4X73TXUFfi8c4jjokcV8PwdbzXRPZ9wex/jLBx
9YSLThLqfGyY9pVBpJq6EFaFsfd05tTFyFlo0mo/jboUL0cou7PsGGf26Wro
02Xy3jJaL8fUUwvvfrGIuhJ7Eo4O7nShrsbEzfvPRq9hnNm/GWFCyjj/a3HU
+Tir+DqtcQ91Icw+rvS750VdjPZzXREP1lGXovi21iFyO3U5gpY4feh9gLoS
Edc1n5uGU1dj/GehYaZnGGf2mUYISm5oKkqjzkf0jrziZQeoC+F/UV/9itMH
E+MHRU1YRwh1KeLyYowH/EZdjrW3tO5unD6YEteOWawruEddjXw3yyPzOX0w
IzgklTz9htPv4kM0clj/5CLqQtgemXOl7TJ1MZ7/OEvvwHEpSjwc3bW3qcsR
EX3vRien36WEUfAfjtebqKvRHmOqjuf0u4wwboVL/6O51PkQD+mcaJxAXQgf
uSxUVUSdWY/QvpYUx7Lr3M1e0HoZpgZcr3R6Ql2Okrln7PfpqCsRcnJQ0jb2
/cX0i4zgE/RQ4Mzpa/FxcpSVTsBxISIzxMlXOf0rMXQBdmt8OC7F+dj5j8dw
XI6Al57j73D6V0oUBkcN1LKuYd0lo8E5o4G6Cs3aZ03aZ9TV2GrT6W3TSfPV
0K6y9jBh85nnvBGmr9w0MOMmdT52FK6smJpCXYjBq1fYBnP6YGLY7nWdlM7p
g0lhbvbV/KQi6jJs+eCOdEg5dTnSTGc/3MA+n1XsOB2Sikc3cPpgfAR3Lg5a
x3Ehxtt8aV/P6Y+J0LLL/uFJjouRctVy/wqOSyGaav3uHeZ36v9PfdSAu9Fh
D2l93/7iRYqxLaf/pkR71vnQM5w+G9M/oH0z/ltciDClw9yjnTRHBJNZycFW
LdTFuOzGKy1qpC7Fi4bcKcM5fTk5LinfDXFm+nL+zPtRiJp+c4MCu+g+QoaE
83+umMHmS1mvSk/tPcP+jpj1hhrWI8I2m3LWhyJcSR7W6FpG62XoCrEeFVBL
vydKzKo0KwjlrANlEOSL/QuqqKvRXTPey6yZ3hc1Xj/b4GXOPk/+ud7OrJ+3
LuSsr8T4fEyjc2wzdRV8Z8Y0ePQ9P/8H/eDZLg==
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNlWdwVkUUhncJLUQSekkgJEBsoAg2FMUQe7Ci2FBUVESFIKIiKsUGiDQV
rNgbikjUUSn2H4oFewEF7L0gOgjW8X3mvM7w45l7vv3O3T179t7nVg4bPaiu
QUppsygQZ4hCcbo4S5SIj8VxorF4R9QK7nlDHOK41nGRGGiIV4kjxFbiSDFI
NHR8lGgk3hYTRLm4VBztcf4/VTQVp4gzRWsxWBzveqhriOc/wf+R84k4UTQR
7zlmL2vEyaK5GGqIV4uTRAuvdaxo4zkvFK3EBeJc0UWMddxOjBaniWIxTFws
OogvxHDRSXwjLnLM2Nmuhx6PFG3FOWKE6Ox4lOtZ4z609LmM8vxfei/tvG6d
6CjGiPOcTzxVlIkprpX8z5xT6n2dL9p7X9eISvGDGCeqxHpxtWPG/hZ9xMPi
EtfDvh8Se4tF4iaxm2iQU5roOX8Ul7mHkw3xd2KS6CouF1e4NuIbRXcx1/du
K650Tjfva6L3Tk+uEhXOmet7fxY3ix3ENNfCPktV2yxdtxEz/R85m1wreTPE
bLG9mCOucw3XGuIN/o+c38V4sXWK55n8ncQ8cb/oLe4Td4qdxT3iQfeKnt0q
tnP+fMeM3S56idvELWJ3x785h9w7fC6cz91e9y6x0ON/+Tfjf4gbRE/xgPP3
cG33il08/oSoEYd7vIdrflT0F0Xq4QJd9xKFip9yvMBrsna5xh/RtW+KZ2O6
2NE9Xyz6ifoUzxbPP+/LCx5/zGtRW8Mc4zWu60mxr2il8ZcdM7ZU7COWiadd
53KxROznuFj3VOv6jDhGNEvhscYa39PjuIj3Gs901PhzunbLEe+vuI2uz+t6
gFghXhS7ikPFK+JA8aoh7qD8111/S8cHiX9TvNu8s+t8b7XnrHVtH6ZwEz58
P4VLcReexLH4G+/iVhz7lmPcuNp55H/k/bAv3I67ePdxEd7D24NNkdcd6Pnf
TOFE3PhpCg/jMfyKP5s4xqs4Dc8McTzU91LPKu8Fv61N4SDe969TuKzYddIT
vkcfeBx3fZ7imeDZeDaFuypS+Ge4a8P/Y70v8vEpz9W3jtu6fjyMu3Bqnesh
xpN8j/DSSMeMjfEZrXWMc75y71gL5+MjvIRzJqdwywbXg+u+T+Eo3lkcNN61
jXMf+Nas837YFx7GI/jkF8fl3gvuxVH4b5LrIR7hPtCPCa6BWq53bbhqpseZ
E0/yXr+bwpsVrpO9lPlcGMd1v6bwD+8vvpru2qYZ4vXeG3vET3gct//kdbl3
s8dL3cM5ro0cvIrrcNQsx4zhYhw723vp4drneS1qw1m4K+fwLe/yQtfKupuc
jwP/TOFEPIU/8SleLcjhZ9bCqTgTd+Efnrlq0SLH94/ncLHnILcsh6v7+r7D
UvigUw5vUjPfCGL8/49r7un+17t+xhd5ngI7ltr4nr6Wwhv4o9x19HE+399m
Ob7F5HMfTsefjXJc8WnnTJNSOliXle4RvcJ/5Pd2f2q8TpUd3t/341Bc2toe
pS8VObzJPMvcz14+6+W+l9pYj3Vf2qImnL3E9ePwLjl6i+8fd0/q3WPOZWMK
rw7wWTTP4Xzm4bvOs1Lpe/p5vq459rPS58I3rVJjJXZ7d/d2gOde4bPmW0GM
59vnqI86C/08MH/THE6vcc1V3meN/yOHcypxndTLGSz12Wz0vmb4GZrvM/2/
p9TxH7fNOnQ=
           "]], Polygon3DBox[CompressedData["
1:eJwtlXm0jlUUxvfHLddwcQ0XV5eLK4qmpXkV1VJZlRRNSpKSxitUGlEaNKNJ
Iw0SDTRIRTQYS1EyFQ1o1pwGjb9n7eeP39rnfOe85+x3v/t5vjYDh/SurhER
Y6EIVkBNOAaOhXVQAr09b1OI6EU8BNoyXkWsBafCAPgMyuA06A/LQecfBUfC
h1AfjoM+UJczuhLnQjvGG4ilcLrP+xE6wFVwJXwKTeBsOM/nlfi+gbAaiv38
mbARmsEZXv8CWsIlcHHkfQ2hGobCJ9AYLoWzYBM0h3PhHPgIGkBfOAm+htZw
IQyBN+EN6AlHw1fQCs53vmugDgyG4z2v6/oc4fdrCqfAyfAl7AA3wgj4TnWC
MXANfOP7r4ZrPa+Ei2A4fA9VcANcDx+7vsP8/iuhM9wDd8K3+sZwBVwOn0ML
GOX7foKOvm+0z2sEg1zvtX6fE52/vt+OcBPcCrdAOd/5V+JWf58y12+47yt3
fkNdvwq4LPL7/wDt4d7InlU92sLtMA5+hp3gOtejwF17Ep9XHRn/QdwNbnM+
yuVm4i+ROfXyd3sBZkX2S7nrrfr9CbvDBBjv+zp6fhf8DrvANJgI22APuN/r
qncneAymwgNe056/IvPbFe6DB+GfyPy1/1H4DXaGyZ4Xkf9+xEfgYajJfF/i
Q35+m/PV+hTXQL25l2uzHezP+HGvt2L+JHF7Yi2oY30+A0/DU96jteJC5tcF
ZsDMyH7V95I+pZ+G7DmY+BzMc377EKf7vBrM9ybOhiegNvMDiIvhRXgv0pfk
P/IL5XMg8SWY4/MPIi6Ft+B136U7S1krgXown3kDYn3oxvg1WAJVhRx387r2
ypPa+ZlmxMN9vva/DK9E1ky1Wx/pH/K/fpH9Xy/SP+V376rOcEKkvt/Xc5H+
J/+Qn8gP5U/ylw9U+0h/0XmNefjQSH/U+67z+fIH+av8Sn4ovclP5FfyO+lf
+lV+8iv51wX+5vr2d0f2n/xafiN/kn9Jn9KSNLUl0g8qI/UknWyO9EP5w0jv
0d5Rnqv/1b/Su/Qpf5T/yb9HR+pXfiA9y8/kJ/J36VF6kr6kT/Wv+lmakDbU
n+pL+Zn8745Iv5IeOnku/UvD0rJ01ZJ3/TuyPyfDpMh+U/9JX9Kn9CBvkN6l
+60+Q89O8vvK/6pdvwp+fzayR9Qrtd2P6mf1b5H1J71on/Qywzkol2Jrp7KQ
emhdyLuVg/TTiHn3yP5W/2uvtPhq5DOK6j/1q3pZ/T7L+eus9rCM8b/wX+T/
9YLI/yW9X6n1+HbkvjLmh0VqoMp9r15Tz7Vg/A5xESyM/L8XGi/w2fO9rwk0
LaQ+Klwbaa/Ke7Smu5pDD98vvep85axcJZT/Afnc+hM=
           "]]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], 
       Line3DBox[{206, 2, 207, 3, 208, 4, 209, 5, 210, 6, 212, 7, 213, 8, 214,
         9, 101, 18, 118, 27, 135, 36, 151, 44, 150, 53, 194, 195, 196, 197, 
        198, 73, 256, 255, 254, 72, 280, 71, 279, 70, 278, 277, 276, 69, 275, 
        68, 274, 67, 199, 60, 183, 54, 169, 45, 153, 37, 137, 28, 120, 19, 
        103, 10, 86, 1, 206}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{2, 76, 11, 87, 20, 104, 29, 121, 38, 138, 46, 154, 55, 170, 
        61, 184, 68}], 
       Line3DBox[{206, 74, 215, 85, 223, 102, 231, 119, 239, 136, 247, 152, 
        258, 168, 265, 182, 274}], 
       Line3DBox[{3, 80, 12, 91, 21, 108, 30, 125, 39, 142, 47, 158, 56, 174, 
        62, 188, 69}], 
       Line3DBox[{207, 75, 216, 90, 224, 107, 232, 124, 240, 141, 248, 157, 
        259, 173, 266, 187, 275}], 
       Line3DBox[{4, 82, 13, 95, 22, 112, 31, 129, 40, 146, 48, 162, 57, 285, 
        268, 191, 277}], 
       Line3DBox[{208, 81, 217, 94, 225, 111, 233, 128, 241, 145, 249, 161, 
        260, 177, 267, 291, 281, 276}], 
       Line3DBox[{5, 84, 14, 99, 23, 116, 32, 133, 41, 155, 49, 166, 58, 186, 
        63, 192, 70}], 
       Line3DBox[{209, 83, 218, 98, 226, 115, 234, 132, 242, 149, 250, 165, 
        261, 185, 269, 271, 292, 278}], 
       Line3DBox[{6, 89, 15, 106, 24, 123, 33, 282, 244, 283, 50, 286, 263, 
        288, 64, 201, 71}], 
       Line3DBox[{210, 88, 219, 105, 227, 122, 235, 139, 243, 156, 251, 171, 
        262, 189, 270, 200, 279}], 
       Line3DBox[{7, 93, 16, 110, 25, 127, 34, 143, 42, 160, 51, 175, 59, 178,
         65, 203, 72}], 
       Line3DBox[{212, 92, 220, 109, 228, 126, 236, 140, 245, 159, 252, 172, 
        264, 190, 272, 202, 280}], 
       Line3DBox[{8, 97, 17, 114, 26, 131, 35, 147, 43, 164, 52, 179, 180, 
        181, 66, 293, 255}], 
       Line3DBox[{213, 96, 221, 113, 229, 130, 237, 144, 246, 163, 253, 176, 
        287, 193, 273, 204, 254}], 
       Line3DBox[{214, 100, 222, 117, 230, 134, 238, 148, 211, 167, 257, 284, 
        78, 289, 290, 205, 256}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{86, 74, 76, 75, 80, 81, 82, 83, 84, 88, 89, 92, 93, 96, 97, 
        100, 101}], 
       Line3DBox[{18, 222, 17, 221, 16, 220, 15, 219, 14, 218, 13, 217, 12, 
        216, 11, 215, 10}], 
       Line3DBox[{103, 85, 87, 90, 91, 94, 95, 98, 99, 105, 106, 109, 110, 
        113, 114, 117, 118}], 
       Line3DBox[{27, 230, 26, 229, 25, 228, 24, 227, 23, 226, 22, 225, 21, 
        224, 20, 223, 19}], 
       Line3DBox[{120, 102, 104, 107, 108, 111, 112, 115, 116, 122, 123, 126, 
        127, 130, 131, 134, 135}], 
       Line3DBox[{36, 238, 35, 237, 34, 236, 33, 235, 32, 234, 31, 233, 30, 
        232, 29, 231, 28}], 
       Line3DBox[{137, 119, 121, 124, 125, 128, 129, 132, 133, 139, 282, 140, 
        143, 144, 147, 148, 151}], 
       Line3DBox[{53, 257, 52, 253, 51, 252, 50, 251, 49, 250, 48, 249, 47, 
        248, 46, 247, 45}], 
       Line3DBox[{150, 167, 164, 163, 160, 159, 283, 156, 155, 149, 146, 145, 
        142, 141, 138, 136, 153}], 
       Line3DBox[{44, 211, 43, 246, 42, 245, 244, 243, 41, 242, 40, 241, 39, 
        240, 38, 239, 37}], 
       Line3DBox[{169, 152, 154, 157, 158, 161, 162, 165, 166, 171, 286, 172, 
        175, 176, 179, 284, 77, 194}], 
       Line3DBox[{54, 258, 55, 259, 56, 260, 57, 261, 58, 262, 263, 264, 59, 
        287, 180, 78, 195}], 
       Line3DBox[{183, 168, 170, 173, 174, 177, 285, 185, 186, 189, 288, 190, 
        178, 193, 181, 79, 289, 196}], 
       Line3DBox[{198, 205, 293, 204, 203, 202, 201, 200, 192, 292, 191, 291, 
        188, 187, 184, 182, 199}], 
       Line3DBox[{60, 265, 61, 266, 62, 267, 268, 269, 63, 270, 64, 272, 65, 
        273, 66, 290, 197}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
     "]], {}},
  Axes->True,
  AxesLabel->{
    FormBox["\"pred win\"", TraditionalForm], 
    FormBox["\"pred hor\"", TraditionalForm], None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{364.29907618087014`, 286.34876746367684`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-2.4294316304955483`, -1.4929959685794745`, 1.8217642521888449`},
  ViewVertical->{0.4586880858736134, 0.2818846410199463, 
   0.8427017794182333}]], "Output",
 CellChangeTimes->{{3.783437414581378*^9, 3.7834374204048777`*^9}, 
   3.783437742890664*^9},
 CellLabel->"Out[356]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzMvQd4HdXxPny5Rd3qXbJ01S13SghgisEFXHG3hZtkWXKvcq8ytsFF2AYb
F7CxcRHuMqJX0auCAwlJlOaEREl+JMQgOiGZb2bOObtn9+6VZJL/83x6npV0
+94z8868U87skLJF0yvmlC2aUV7mv3Vh2fzpM8qr/P3nLcS7PJe5XJc9gcc4
v8uL/4PLFfDrSZfr/7f/J/G/njUVFRVQWVlJh8sjfu+YNm2aS/3sDXxNGj7r
73jMw9e6PJlTp051eWLolU6vSRav+RE+9y/4nJn0mgPa4yn8rzcH3+Xn+Pj9
+Nme0aNHP6g9JVW8RYcpU6a8gg8fpdPTH08Tj9Mp/B8et9JHPBB42pdPnz79
AfXV3OK+M/j81erU9wW8JjQRH/sMj/H4nt7q6uqr8T3+6fQZ4mv6euPj7+Lj
X+DxO/V149u51NXa+3Vr51Lrr+nusNQbtcd7OC/1eu0peeItYktLS6vxKaX0
FhEOy6+/Jof/DemNb7sdX3NBHiBfH+EgnTu1l2eJlaOPpLc4j8+5iAd9vMvt
x/V0eS7Kt6THXb52SnOd9hmZ4hTp3bbL96ejDg/6XPFyHz1Md6u/PelUve1Q
BP3rCGUMV1+nAR+/IL8OvR/db3wVt/nVL8pTqZNfVX5NZ4XSV1/gJ0RJjJaP
PnO+fD+POH36aPXV6I5hUkD8Ue6DtI4eepmhV1u0j0iSp6IJmJ7LyxNqCv+C
9vFgWVkPfavtSjD6W8ebZ0+6cl6+fbV8OeuOmz+Iv4haJSVw+p9eQ1/H8r6x
4n3plUrgdFp0mvSaSPmx+KvUZf5ctCyaR8mFP3+z9u4dzLNWKqvLOIofDqN3
307v2iHkMogKuWy+/JQLUg5Cszz0Dsb32qR9SqT5KdXyE3SlFZ8S4dc/pV+R
D3aPioRFN4fXyU87L09KwmaYXAm+dbf2aeHipHUhk1rYdTZC6oL+qROuCoXD
46NcbnhmerTLB2fKOly0fborRHw8vWWdUoS7tI8PcVYEqxp7ekrN5luh5qnU
qVOZcV0YfTyeBJ2Kl5adFkjJXryENb1ULYJuIYVIQpw0nc6ig/mJ5+klKR3c
/Iln8RND5Sd2T/eUyk+ktQ41VcmAvf6JlwWq0kVNlcQnhpIqGZ+Kn6A+FZ7F
zwyTn4xiOEhrIe1umPhk3ai5NohP/oV46C28e4IyoQWB2qbbEaXy+GuYfiKo
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
S53pWdyEEJeYxXxaYAfXFX97pMcZ3NmcXSTbT/Srk+h9hfLiSI4j0WRbqWXw
p7wUSQTeHoV6yTRITH6Vu2wCLi2jsgpCe8N7S0t/MQ6/R/WkaLj4aDoM7ouE
5D60189nkia7/gtVNkx/e1SZCqGpFA1rhdDmPRlQNRb5/nWX89YXN9QuyHNF
Q+38PO7CoIPa6RpWZkPjuo7QWN0Rmu7KgKaNeGzIgOYtadz7WjW8M2VcRb9r
iJMukyazIrv6sCr/Sz/Q3v9zczLD4g/rUwO2ArVsSTDV+e5Adf6rps4/wbib
9+StEer8ewd1VmX3VomSLJTq/TmvaOGEnSg9E4wolXew2H/S4VN4kD6jD3CF
Sf1ecovZrCOS89ZZ43LyX6tD5vKD67AlKpY6PFkqaZA9fsMqtS74K6SpdsnM
kD/VA9tnxpJCk3a9kIkWrPHBXFZuvPXfKDfpLsKk+WE20y5Rg8P7zqaJ7OsZ
1mdZhXMo9qe6UqDlUDrUVBSxea6tyoeWA+kiEKj2cw3iUoMBo2Z7N33iv8W0
FzLK4mBDnehly3wzq/N32rFmdBEcrsx1aDIMVGsxByY+QK0pOh5wfQ/ZaBhE
rZebat0WraEELE9dcqI1M4LRmg5sqakMse+ORKullrSGKM0jkxPELmCf1O2H
7zALcpcLfbSMcZd719oc5HejeIsJpu1t5RJVaqwTI0GEHdbrtPXuEapUmBUY
NelFUmN4sSNUTeoK9VsKlCqTXj3Hjwmmrquyqx26zHZ6XZ7QZTepMj0gSglm
OYFss6nL0Lg1G0oGdIfKYV2heS9/DtKORKhfIdM+P0CPiaNTdnQv8nNhnFFr
DdX16KqLn0e/f8QE47mFWTD4xh7WPX5bEwwVtmxWaEWF75/kh0W3FxoJHlbh
ldbw9ZfLY00VJuu82Jls3H5jV26KMslGtDPZCNglRuHqrNtycb1tZMNQ4cOl
VMg8NbkD67HiIElR5vAwqceW3gQ5g6rNGYhSj2X5KlgHdahpuQ1r3sXUY2PA
EenxwSVxhh67SY+9pMaosM1n/ND7+iug5YmO/wtllkaZ4s62lNkLLUcyoGZa
J1bihvV+UR5ONsvDkj5fmk1OcrLJpMduXY8p3WLRYy+pset6VuLf35mqbVS9
dCX+5YoEMfdkdTuVeImNYqASvyuVeLXc5mhSjGh42U4xpgdSDLLFD45PdKQY
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
dEWq1uTanf8uuz0Pdo3PhEcrkwNi8KNlKQaxenF2ArculY0dxHH2lAljYcCA
ATC5X2dYNbQjLJgyAnaUXwlnJ0fCtpFJMPyGYjg1MRLP4RT1MZ2cGIUWULkP
gsax8SLamHBlaAPpsYifrWMartHBwGxL7Tpwab3Y52W5zWXfUNm7awhc2J+i
ZvI+Rmh4PEOnV+RNMEgX9MrTSuaWmjbI/Dr4DxkktzydxZXoyrHdoPkckRpE
gkcCgXJUHLW8kaUBwdR8/O+dbCRmJbf3gIYHC5T6C5y0iQD6aNp9T1pP3eWN
+3MZBTxaSnTSitaoHwKDTgwD3oVPjbZ1WrXuZJqVbx3R+JYWptNYyprJhRxy
UJaK5nJXDSuGvWV58Kf1KfDRnSnwh3UpcKE6BX6/FkOKDUnw1/WJ8Jc7E+HP
6xLhT9WJ8Ec8/rA2kat0v1+dwE6DYHK4HBdna0mumxo4XF3EBWCv78GzSqqG
FsKmsTnwUGlHqJ+Rxg6DUlQPTu4Ix6ZkwMrh+QGdsafRSbyN0amFXy2UcYcW
c7wzPxrmjbgKpo/rD8umjYaleOycfh2cnZ7FBGtfSTKsuT0LJtxSxG0bEyZM
gMVjfwzVQ9NhzZB0mNaPxiicnBjpJlAgNHSPwdC4IwpuyPUe1KBhNGrQz48t
0YbamKOibhmIE8kyLh9ylcmuzOsjTI3xqEl4lLt8jKe+uyyuo+VsJou+uTbr
UhgXBujsOhyqfDSN8oDgWOQ5qNEJeZcVMaTq7FL2FNgRwxGJjxETCo1H8wWy
3sm2o0a8zi0bpggztLOo/h5RUGSg4FmQF3PL7Xe1dxaJ7RmCfHGeq23gxNuB
Y0wA4F1HRL30uqBOuY4K1FAdcN+MAjcVtV19Yd+0fJ7javTRbkvhwORXa9M5
MPmOAhPJsr5ilhUPn0uW9alqB1QVDRmfPzsnjcHx6oKUgEDkjxiIvFOVCCcq
MhgsBBoCz0S07QQYvso8AuWu0bKFtioefoHs6sM2AhLyJ2/MT4S9s66D5dNH
w+xppTB51G1w9x2dLYH6i9O1+jZGJJTD2l2SBosqRsPQAX3dPPzWC0sGZsKJ
CZHqcMPxCZGEnAkSOdKhHEHkZMW5SzXkWOYAXm1xKhcqzTkocngVZ7wuqpal
K7Qg3aUuPshjph81p0gGww4pxr5FRVA9tXMbtCsgmKc6IU1gM7Hj4r3/3Bku
91kI7sPNGbL9SWdestnD5ZEwcGJeEkj46LvZnBjGCGNTJ8aWmylZhEKTqp8E
Vt6P59gSYmK3Kg0nQECJZhG3gSfRLix6D412EY/eqitXqqcFVpQua9iaK/hY
nYSUdEIth9Nh35wCbpyi/FjN1CJoqskMysPoUnWEJ+pJN8olGLnQ3BYO8hFL
LRJLF+1bMGSd/LWF4iLC1Fprx5KMVNwUqqD//N0KQc1+gwd1iRCkyP+YAUuM
EbAwnBZJOCGM3l6YCMfn9ET4jIGqaePhrhmD4Om5WfDavAR4cpq4VNcLM2JF
oRChpAL85yrNvNcTlA4ui2c47S/LhW0jkmBAry5wyzXdYe6tKPvj4yM98Mj4
SCQgteMj0f1EovuJhH2jIijf1dvEkeVCjWKKtrp2ueW6Q6EmOTOuI9HDxFFd
eHi4uKbhcrqm4TkxMdsjZ2dbaJogJeSCyAihC3K3xdRaHhdNEs1npN+RPR4U
GpBKkn1veSrLiLgDssV2D9T8eI7mgdxGoM+czcvAwZD/ZZk1fjpH4ult8k6E
nZYXES+rJV7GdReduq9rQZJKAxiFSC8zOno+OyiVRPNaK/O6awqOovFG43vz
UbH7myIZGktOg+yo0lI1rgtXW1oOprdK49R+vppJhbBwRGduMTRq7jziXnTh
fq4KjEE80V9lUzo1o28dl2tJh9ljfB06v14ey7E+eaIdd2TDr5YSfGIsnqhx
USI8Nb8Ats3qB1XTxyMhHwaPIHzeRC8kqFs0U7d35kXD4iF5nBt7HaHzahBP
9CR6osclfOiCXA+W5sL+cbFw3Y96wqrB6TAMo5zKvjmwd0wsA8hDAEKFI/gc
wWPDbXwJIj+pvswZq14Tdi5WDKmcMd8KM59epyowXW0Bjj/ZA+UDM2DMrRzC
nCMMtdMr0dyLtr2S287oZDOiMVSJQg0KO6ShNzdBSa+k0gGBnolacG3EjmHl
NmEVCdCYDTVLOkP17C50D7M8gtq+NcWcYWM8ncpVvu0NtW1Edj2ayIKmR0TH
ACHLoHw212TDExmYDNcVvDQN28RGQ6ro0l++4uS6PJpIpqUD0gKYnZEOsJVl
qGWxYWkWfL8rCf6FbuhbBNLX6Ia+Qmr3Bbqhlq1ynKgsvdjdz19k+XEmxjnU
ut4mgKhNCxGE7ohyZVR5WTk8z8DPMwsLYM+c3jBnWhmsQ8wcmfsjeAddT2D4
Ey0whPh5Gw+af7B3fLpgc4iflyzuJ0q4H6pIlmHgX5bCGDo4OZPcDoy7qRAe
QYzsGBHPuWTC0spBqMLH7ohEW8cQKomEeTeEXTA9kKU75SoLesgxGcUYcTEJ
j2pW5KcX8X3h1tEzXUL42uMX6eKGdaL03LCJk12toMnRQck2cHewSo2AUSg7
KDWwlPa8qohdjngyR5IZELLHRsTA2MW15pmY0rkJQfSZr4iMdGNtPtQs7iyw
U4LYOZMneZ5Xj5wkIi1wEg2UFD1RhkNxPXe73JOrG0dO1E7ZuCeX8/e0WvSX
Vo6n/6lcm43bGTk2dR0ko6CTYnim5nvSObnw5y1p8P39SfDdziT4BkH1NXqm
LxFUX6BnakFQfbpFXUPVnJmg+h5VPV9tk/pwWbyRW9MLNBJMLoEmr5F5rhx6
Fcwq6e+GlTPGIGk+MOc6aFiYbYZGVU65hGg3ocmVwHhSdO55pHPkjww6p/xR
hemPqIx5uDQTZlaUMp4GXNcF1g9Ngdo7IvDMjpVEEJe/LRNuv74YZvUnLn+0
hEBFgDqMR/9CX4PVJSmk2EBlCYUiTVqn2r/kVS1ss24QVHXL4glUHrryCeXP
JOGgq0UEpXy6f0LfRPVAl8n3HPMMPvZK1DBDkKJ6e8sTWS57lroNd0TdYw7u
yG1gyWNiycv+iNBXVd4NmuryFM7eMco/NiCpdzVaL3kD5IYia9CkAelqO5Ao
hS32HcsiUOPeXAYT96KhZ7I03NRr5R6jF1nzTMdSbWUeAaSGFdl8QaR/I8X7
124EEQLpG6R4X6Fn+hKB9DlSvBYE0qfomf6JnukTpHh/R8/0fxvVFYsEiCgY
OlWZwcFRw9wU3Ru5CT2ucMIPs7kPlibBwXm9CDLsecgDDe93Dbw8l6Y/IJ9z
ZZvBkCOIoqFxvtUjLZKsTuQXhEdSrM7ukR4tjYKHJYq2l+Qwqzs0rgPUlkTA
0XGEpCP4OwyqB6cwkqYi07t/VKxA0bhIuCLDQ4UXWfgsldFOg/RDzNgEZHz9
8DYNaqULfdEVvGhjoStPR5q3TpZ6LsiaaaSVLrJnyzHBVq3yEQS28/ckktEM
kWCTTswGtnbRQhks2GFnejFC3PNCI9UYEkSefY9WG7DzGi387Agfz3EbKQob
EWTkUccCOjAigeS0BvdHR/ssxlk/oYcbs00EuuXrZFXJgKCliYc+lmOrQ3nq
lAIxGEJ2hHMw9A0Jc02H/aY/68X9C9T3RjO3jJ63xzOsG7/OplnJ4SPByWHV
qM5wbE4efI9R1r/2JMG3CMFvkBx+hX7sC4Tg5+jHPkMIXkQ/9k+E4D8Qgn9H
P/Z/CMG/oh/7C0KwaVUC7J7k5wQ4WShKNEwfIBLhVBc6WO6HJ6u6wKqZY2AR
RkdbZg+CVxf54adLEjkJcaYilSujT85IZsclsYerh8hDwQdgb0G0S3iwJIG/
uRojtHkwxQh1D3ZuciTsx4iK8Ffev4gZIXow8l+MPw8cHhuB7OWe4fEw8eZ8
GIOPLxuYDntGREBWrJsnG8tyKsHESOO5xCROQpO4mFIoXWzv60pxOTza+3uN
nJPFl07IteBQjZWlG/SuYnujtadNDn+zpNIlDknxzqSR20sTvs/LUCRIyqvV
MyJJFx81rhjpkPlwy+spyBZSNfHEiVjSlYEfEGEYKWrzab+6Qo7bodOhNWKp
Gkhr7ypyuS1ZwzezrVlDUbAK46Cs8Vg+F672VRdDy6t+qN9ZBNVzuiI+/W4D
pB4HkHq0TiLKinB89ny2W253sGzYkV1FFL6pBCgR56ZjOepLSsKJ2GzYkSeK
dWpOr7GX2cYzz7TNM1v2pvHesnfXdYTvMXj7Dt3jt4jPr9E9fok88wvEZwu6
x88QnxfRPX6C+PwH8swL65Pg3JxM7nCgWi4FaXR5KCpM7ZqQDU/iY1sn94SJ
Y4fDzKkTYf2sYVA1/mYYdNMVjNsJfTtD5W2dYMPoHNg7MRO2lWQzNh8uTdcT
hCgmRKWro4HL9xCXTn7xCckuH6tIQHZp9YvPIi6ftvjFSKhDbD44OZcjtn7I
1ZldClzCkbER8PBY8o8Pj4lw878+WHBrJgxFJznmuqyLkT7uklNBm7G1hrEo
7qMxc7btxR66lNQudV+OhYda0vQx4j7ipKA6jNIFJP06JOcPjmRIRnAPpVfY
47PpTETFZb4VGj06GtlHBrZPNB3IdnKNIvUWzglt4mQ0jY6g2HBvnkh0Iz+l
qRjkJd1OLRRtkFPZeeSYK6G5oyojslZkRBr2F3DWBHGHYMSX3oA+6jnkAu/5
rYD0OgBSwV3bQefSQkDVOCgm1BCNbarNsTpOE4yuG63tr6o3/AknP9k2VaUS
GeX2P92dCt9jzPcd+slvEItfo5/8ErH4OWKxBf3kn7ckw0tLM2HO7cUw8MYe
UHZbF9g3xQ+/WUsbnMV008Mzu8GwYcNgLnLODYi7EwuvhveWZqjYjrkpxXWv
zkuEo1MyYB/ib8OoHNSnAhjfR7B/wiL9P/XWTtxVtG5EDhyfkgrPzUxwEwBd
6QYE350XbbjH1cP8Jj1VCRPNPT5VLvL1yj2enRQJu0uLeGsn09OxHZR7JOco
AHhwdIQHDo6JQBVfPSgFbu6RSUnHWGuAZ2RNJABvQ7C9ZwPgA/Ky5zoAi8y3
APVQnLhPNV9wh5KYnce5SWMTUOWtsXBhT7IrmgHoEQ3M4urhrqDoc3SEHk4W
SEfoMtEnJ7IT8Gh/GpE10ji8LZwBavnzHY1a9A90idzCtL2wDZcoqwBUQiOW
iv+riBFxx/irWdqFHKOHbtBr6O6fMFTpSdJHemxENoI/Hj2y6B98w7rlj3oU
5V5vk8d6TB7L28aZy8o2LusAe7tjPGdzjE7EFR1jTXkRLBzdGf6NseO/9ifD
t+gYv0FAfnxvCry2OhNWju2EjqwHTBnYBfZX5sIf7kqCj9Ep/h/GjOfX5sKx
RdfDmlljYPGM8TB2+EA4UFnMqRZRMUvWs5YGGCnJ8iskqXrKf++ETAYhNScd
Qse4e3wmg3HOoAJu86OhlQRWGlw5pX+RG9YM97vS4EhpChyZnMIDBfbckc7+
kLmqkf2PMrP/CMR66Q/PIBjvKcW3KymBscRVNX94eEwEHMLj4OhweGh0OAr0
odHEYMt/FNKgSOlNpt8yhrSKq9LxlTw24H0TEIE0a5hGadOVQ6/VCGqRFXV8
K8HKTtlFivv44sz00RAb6YbtZdFwZFEOuT4viTZKIlK6QhORoo6g2t5cboOa
ugOoqTF8T1BTsyhHm+725hrZiqaH/W57HUFOUQvaqp7lsftB2UKlgzBMB6E4
3kY6eiSfPWHtpk4cGVIhQDpEBcSW1wzHSMh7j92igGS2eHIj178DIEmpVNnc
W3t3J6hZpG07FMlY6SuDR5adONnLVBdjaGMEj909WtKhdveYZqGqVPZuWOOH
i0hV376zI2wpLeRrPk0d3AV2Ts2HX9+dBp+ia7yIFLV5ayo8uvLHsHb2GJg7
vQweqroZGlfnsFukazwtGloosp5hTiUEHYxuQiJadsLiuwvj2CE2zEkIkqwR
pPSZGQlQW5YCD05MZyy6qeHWJS4tPPbmYlg4KBd2jUsTxBRBaCRsppjElDzi
6YmRsGHKjQzE9UNS7B5RgHBUuBsOjAr34C8CYi+/t84GREtDlQCibwve/g8e
38tmQ5qgqTI1EoCqCZe9qZiiaeRJmeaqQWouVaZL8jAALz6cQirCF4DmHM1d
OXwrlH6HSpLatDtL+Uh51ehWQEna+7jWe2S6SwImpwaVuyT39GhHY1hy7dpC
t7XvxM17qrzqKj8yCdmar7TQVbfMcBIeiD9Kb+U2ShNEHxv8XH6gaLHpbJ5o
2lKZ1RALROG8n4PIfeuK3XSjHTD1ckzq4+IgaRQhlD6RPtttZGJbxyjC02gC
U4NNlMO0ZHmCOMyTVofZsM7PrJWmYJXc2h12T8+Hn92dAV+hs/wSo8iP702H
NzZ0h+q5Y2HprAlw97zh8PKabvDHjSnw143x0LweGeu6OL6oJX2ld6oSLwme
xQzPFcPyYB5yV71Pi+G50ArPRoe48S0krURYaS4JkVeCKZ3JpD5FsHRwNuwZ
l2zmdBCeirSemhAJa6f0gdIJYwP95GgBUUQn7B8ZjgJ9UP6OgKKk4J1bYg9V
KF1Z+z8y7qNkzlX4HBrkVkh4lL5SXkze8QoVguyG/7RSXJ5QGYXx+BiN+6e3
eg3/v8JsM3bO3wqL4VX7I1Uommi6aaP5RVznOySw9FiKVuEQDRI/ZVwanqwC
p4vwViT99sr5/LTHiTdunJU+IUh6V11Oi9O7yiKEM3mm6aDCXXOlX1bjevDU
N7QOLo+tFc2kz+SwMZ6z+et20WfuQ7u9h+65fey5m07nsSmgjWXoVl0cjbq8
otLfKA+OWZEve9kktLwuPDf81O9pp1lwcYeb2FmAvJz4Of7vcltyxcQj3rR3
jTpZCTQQZBzISLCBVK1sz4gFtVzQzO7DaQvnPdmwb24hX3WXJsKQ7144Bpn0
IWTSyKY/3ZcBP7unMxxb2QeWzZ4AmxeMgMfXXAN/qUmDT+5JgL8zi06Av90V
D3/ZEI8hrdiWT5dtprTSH6jt7BIMRCRvDCDfbe88+6luIERSCZcGzYMr0xLR
7hiXyVtn6H+674050XB/SRosH+LnGY9kLKgLumpgNtw7Ognq0DicmSgNRFkf
WDShDxwb5+i/4cDIcHhwBLrwB0aQfdgxNAwSIsRFD6R9sHSkCfsQ8kdEHE0A
JttwNRLib/B2F3yONA0iJZzW6tU98IdMRSdpeWjMMKWPf0wbOfF19Il/lwy+
1dSyaCj1khWj16ghYcni5Osk/+BAQPT7+NRuHsNENFQnENE9ZScN0dJcND8k
Wg/IRrhlAYg17ly6uoDpo3wfh9da2UczDiGqwRuaHsqGqold2VA0HfR7nDqB
vGwQqI2B+7vP+N0OxR8biXfLqRvGgDGRWTKyTcSo63dIVLo8ihkwfgU98JjU
4D02FefJJlTPxdh4ayeyB+20CcS28I3r7xPmoPmpHKYisofcyG6Lna/KLAgu
47EaBdoagXZPzenkXJi68NBzwXkDXQpu34JCDr1IcHQR7qad4hIrLQ+lM1/4
5X1d4PhaNAFzJsCWqhFwdu2N8Kcd2fD5riT47D6k8jsS4Z9oDv5Bl2jbjCbh
7njJF+KYyj85i7u93ZdsD4o58UwJ53bYA8cMF9kCamWg2+/K+16X2S7i9TtG
p8Kc23Jh0PVdRGzeuxCWDsyEXSPjYfqkUXBn6Y1sD0yyEK6TBWkK9g2n36v6
hBrtdVohSB8AC7J5QV5j8Co5GZyuMfhbPOhqEIreC8PgafPCKGJzRTgZAjIM
9Lx4NAJ0J83ax5dXGNltuRHDktn2mug3suKp4j5Lu4XPtAjVLlXt7RwC57dy
SpstQsNGSRZOySu7d5BmgcgCX/u1PWbhMbtZIJCgytKGbLIMPKdgTSG0nOsY
vG3d5Aqydf3SUm0RemegaDR/IZv/p0w0T2MQAb5bb1jXInuXzhPIHjQ9lk9c
wetkGEJ0w8BtUSXDelD3rls29BIvIcrAhuidbM0stM0WXEXQeFCaFH2mlsYV
aCVpYwC1tZMRoOujk2Foqc00Aol/HMqD+rtughlTx8NyNASPrr8RLuwshG8f
TIavMYD4CgOIL2hL4c5EEd9vS+Ty099lpo05wnq6sp3gCFQWfmkuhaCGVbim
Dasg0m2U/6au2w8XBzaoqxD/PMYQwcwCddpS/KBMAj1Gz3mLTYPIvb0o61Bn
kRGvH5YOZX3yodfVPYWJwDB/86Qr4MDoDpIihNspAjwwPBz20jEsHPbgseCG
UAKMnORfXWleM1TNvdVbCbtYLIC6RIxLswCW68QIBIep8dDk/l/H40E8duOh
UusS/JasugS/pZ4lrrRkRAzztcDDWmIm8G9JFJdxVpyAmGT9mjx1fedTaeFs
AXzQfMAgBuKwJN2D4p/C9DOZrJwEe1r/xt05FDF4HLqwBPRDDOhr3fftyOyF
GQ0ZPNZwe6GoI6/GuP1Fv9GC5VaO+V2LKxfuXaYKiA24Cei0IsMRuruRn7/P
1sCJFRiAfyZHsgKvwQroFFTSz5kNaH1dJvJdhZyMp6qY2pFMaXfVtkVUiYgV
jbyh67Gp7MGXJ7Ph+W29YH3VOJg/swwOrhkAR5b0gAmDLod/P4xBwcEU+G5/
MnzzAAJ+bxJ8uTtJsACZ0AtgARtoNLxgAfdP9FNg4DHxnunUyxiAd9ob/Mrc
hEvGO+H75VmxXGemv4h1ETGkG08jyL9G6XZZ91ItIZQ62DEyCUpvyee9kv37
94fbrusCU2/JgTUDk+HgKAsDIP/PUN99exjsHhYGt+R5KdfNW+L54pbavBXj
qtmdLShX18bRUW65QI6Ab3QOvgUhfLR8GwopKEdQi89rLW0vN5MZRTP6EVXq
UHXB7YaJEycaW/eL8zNge0UmxfwnKeZndDftEmVPuhVOv0MkuqtLi2HfvEKJ
7nRHdEcY6G45hYiuEoiuHNmNa9lyX1qwRi+7U6ceS3TsTk6dfHqW5sp9DGkq
W5ELbNhboDylBPQl8Hvm9e/7oeEQxgi3Xu6hGyamRSXNB42PFAg4P5urqmqC
G1A+EiMLzjWKT2sT1h5z06iYlUwjxqnlWbWcEKL5qluS2395DqnGoe6we/VQ
WD5vAtQsGwnnd18OX9ZmGZVsCvWbd6XD9xjmf/dQsuHCv1QuHDn9pztsLhzR
/LeNpgunHCA1VX64NF5DdEabiN44WlSuuWj2AxA9Gz33ptFZhGaZAMjg51DW
kF5Hz3tzjoD1SzyNLAqekUl7gvWQG3swpGeOuBZm9cviTkoy96NuKITpfbJg
3cAEw3vvQSgTpO/Ho0eamzyfivS3V2pjyIotSG7zcj/SEU/G241WxIedxPse
ks9zyv37TN9sbG/L5N9cYOPrvXHr19ZEaN7PY6pj+MKwHq7X0OYq9M504VmV
4fPyGEjeLYAeWlx8UOb5GbvU1EEDJ05m8sWYDcjuzzZy/dqW7GDb4ezwlbsO
3K16ZbVN+jmBXtrdKRs0CSUut1nsVrzYFZyIewwiTm7Zze7YQyBmMMMH/Awd
zVQ2VEAWHStsE7iALjx/PbLfqvJu3vYDGTFMxTmeBUIXkHlaXlEJV+RLivyP
dYcTW/rD/FllULN8JDx/by/48nS2tXla5vNrKopg7cRiwyt/q3tl2YES4JUl
Dde98uLbC9EzZzOGPTYWbsHwMoHh96pEgo4SdR+2geH3HDB8tFRM8SDmTff9
ZH60Bb/0WnoNYZ1wzN1hsgBHVfBjE+Lg6quvhtlTxsLeiTkim48sfO2gZJjR
NwuG9BLrO/L6Qqi4uSOsHxgL9w8Ngy0DQiEz5rJhJoRVUybf6mSBcJsXJ5IQ
HovPa7JCPZzelq7Y0mpdQPABr6q9q01BafJul55xW5fgkXSavezcQnlJXNYF
gifDu/nBTOGa8VYMP99reuXTaVZkk088nsl5HwPQD2SLXhei7VoRT80kcbc6
8s0tq3XklmvXFQWp1mnQDjMuNUZjQVWnJ3FtWUT/AVzbx74ZoYx8uxPy7p74
PxPqD/wmtgnWxzVYS7ftke9KTWo8LEtRcY8DuilVKLvTOjGg6dy5L4a+yysd
oekEcv77boblCyZCzcqRGEvcDB8dLza7W/RWM212CW16JSH++3CKcM4HNOeM
VPuLXbpzToBPENR/36w75zh2zpRwo/j6j6tjNeccBRdWWue7/Xa5FdwL0DFv
L8lWHS1i10O8A7ajHbFNybazU5OC4Vo0bqfw3So3/6psdHkO4U15uDG3dOWR
Vg9MyoXjd0QY8OYgGxn3ygHJUNo7B/pf0wWu/VFPGHtDHlTemArhPhf3eNq2
tXJGy4Lt1q+qJHAZnYi3P8FjKT5GzxkgibSKkYPl9CWs51ea09kpvpfNaHSC
NEGFN8qqCrxHemExbTZD0WsP6YSHEB4uAU6+u3ZJvvLmJ9MiGeVRxqvYf582
omtO3jDCbxEbRCmhoypzAumhpgs/k6kGcqmKnMvdDj9O3d2Bflzk1jrouTVj
yCNx2KYTuWJ4kEyriXnY2ao0fgmUPNyg5Ar6CHn26s0NSLJ/lmOaAK90+Y0n
JPqfzxXZOa/WAEdN49Vzutob4Bj6YgBlZzRSxQx42kn/wXH8RmMGwfqlGC/P
LmPQf3Smi1mpf1rLttt7vTVvTmO365fnwPcO3vwL9uaJpjeXPd0Wb64l1d5d
lAh/XKUD/9pWgf/srGT26Pbd68aeiyq9Pm+i/icyb3bfuExm5cG8Ob2WrMfP
pAWhxykN/8bsDkYafvD1XWHDqDyYXzEeDk3OhJPjIxj+KvX+sMyvUcC96/Yo
WNAvFcYh9Lt2yr/o8XhibdA3+mFEj4xefw+4YJTstKFC2dv4ki8kK+eCmUx7
OabpJRVX167iW6KSZk2TbZ+CQD+cInZieGU+3PDMpySYQ0gVfA6+PNTIrrnp
VZSkQoy3HMuAffM1bO/NVvn0oBU2youp649P6CLUUkDdhnS3iXSfgXQ6eKLr
FjnR1VZhoxOlaZWPiElKNHtMTauU4yXeoOoa7+e4u1MbUPfqUCeMsoN3qxwa
wRyhXb8HPe88amD9WQ59/Ac50gIIa8BAH45AfyGXPuSnfq8ZpHu56Y5TgyJI
dwI87RN+K5vxvqSiJzyzrxesXzYOli+cCLMrhsGRu66AL1/IFUl1vdKmqmwB
zt46qKx+ZS4X3MnZ/0s6+2/Y2Zt5NeXsicEHOPs7xSV3q0flc8GdZr0g7l0a
8L0m8AWVd/Nu4QzG/W3Xd4e6ytRA3Etv3xruX5kdy6v3zPQEvv1ecMzLvZNJ
fD/ZiLdlnr2uPJ4vUr1vci67/COlmVyKJ+w/omH/kMK+TLTtwWi8lz+E2+ck
lbf0sBYKzBeaLN+oa6mLTLtEDUtsyxgSKfbbMzc+K/pb3BKnRmy8P1MUtDwS
jjwX+aQBZUHKKcWlkmUh7Jdpjaiiyjgd3pXa6dosfzlg1nDNTpi1p79N70wN
1oP79nSsfPmgvkbMH6dLvPPmptfUNVlCRIkZA9emU7JwFLTY5W8jxvYJXCJc
W94WQ/KaX8qjc0TMevmxxpMGTk2azliVLJ8b76qLhYu2AdXVFb58NQ9qt14N
Y8aMgdkzJkHNmlHwxpHr4MuX83gaB58/maFX5GTOFzpesn/mjNn96eyfv5P+
+esHzKIX+2eZMQvwz0jKyT//SmTM3ARUXBaEKs/HUIfoOEe84vfUEOsSkA2H
Byd1hAVDCgK6zn8esDWyCCEbHQDZ2QMLYPPoLBtcowNcNL0fBfX0/nSbIK1y
5RtHZMGY3sVQWykge2xKJrfYnaYZaATbEgFbVSlX5TCCrQy+5YUtvIobqz3K
VtRaClIJZlQsqs5dQ+D8tiSOZD1W3Ao6rdyryHoxZMM5WEZAH5Zk+cFMIqiI
2TAGKoGUWyPpYg+7skwifSa9TcDa6lXkYKmQynoVFLBup3qV2hnSsDPfNqNQ
DGGqnt4FKsd0p4meorQbblx5SfFpkW7KNivGb2e7LrVkpXFpuo+RWrO8Czlb
gJ/n0CHu9kHjqQKOtJtfzFMO2OUNSKQZfXLCo5tAdsuW+Kb6y+HEfbcih54C
NWtHwfMP3ci4lgQByUKBsFXbpK16WRayL9HnGlkz6XO/lT73K7vP3a77XG1f
s/S5lDU7VEZze9oCc7QOZubcNDWKL3E8L8EKZmsmTWA5LADLdRVJTNcljt30
IK7g/8fad4BHVWbvz05LqIHQ0zuhurq92tbuKsqiYgVFmoJgqAIaxYIaxQoG
C9ii2NBYUEBiQQSNgiBisK0oa1kVjYtr+z3f/7znnO+7351MArp/nucmzJ2Z
O5Nk3vec857WGoyJIuid0PUj3fk+XAqxOjqjMdVw6ZhSM3n0SaaerPGjI2y1
bHuz1AbfDGcteiE4zzs007Zz6aSBDV606wpky0NwNj6cu3oiV0ZGhvlVWabZ
ML8Hq81xh2n82e2cSikaebCFWP1An1iqTa4+rR9HzZnqPDfWFDoDjO+4zUZI
DDonr7ykVZpK1lZQHjLJbaOcAZ4nIPfqV8mbDiyzTlPEhDVu4TgP68UL/cL2
NYx2i/K1Ba7bxHaYqA4e1sAbPfssIXP7tCEzh8oE7eaXSqQX5Vk0pL6OsbCN
DyjEG0qFDRBOFwcxdUx9c7bXsNX1N/S1IfqrRezKK8Lraw8wc2cO5wNR8+XT
foPGtEg0pcmsnNcBceb7BVEPnI/9E+x28xIV0+7sJXb7tsBu7/KKVb5SMc3Z
bfWvrd1+YEwe4mrBetSF1pEcHiYCBzvFyWaUn/v3Clk3OyOrLZR7xWxhmKNZ
7PrheQHE89uCOF8aL/Gmvgwes2aCJL8fOzPb3D+u1EwbPcw8Tv9HKuyR02zd
a/u0OttBZdKfIluYw4WtWqAmEOcZWMA3w156TZJuFSHGKo44pLepOnEA/kbx
FIwnfYzzUT2yHzZoRMPgzvCsN6N3EYPKOuEJhjX8a8AczjiZ9Ih10HEbDoEW
pbFf31aeOsPHO3/CnEV/nK/KHS1e3XpkD626VqFEdT5VyuRUFsftYtBgpaIE
zslQbxl3VmMu9091xmMB1jezaSeAJ031JPKvL+5vzJbiAOzPCP5jrQEevUFS
0WbdB3nZ9mbXi2WE9AMZ5bDn+P/2pwaKtnb2AG5LDcfZFe6ncnvjn9uNfa9P
b99ZRzuvxPyYxr7/x9aqpNr3eS3tO3S0xind2zLvMTbvBSHgY7wwbPM2Ar0D
/rQ9B/71J+bx6BH8n33z1v1zsek9HeibWMKXl1lyWg43mSLSvn38YB4HbvNn
j42UrhgbaTP4rcpG4NdJJvsFYppblx7CfcKOh7TFbKy3SWdJZupUb4woZo5m
q1lbGE1HBglHBlC32MjflicOfcAEUWaCpAzIWNrHHQzy0/ol9G4QBVbdohwN
B2/6vDM3zpQQZ48fVIEUudfrkp4VcIdrCM/VJFmMiYHb2mpKhBSiLkOWav87
BPb/6cD+6xZtrstqMQo2de1qULPuOfmaApc9FWwuvQ62n+bgZ4pjTwzQ/LJ4
AI4JKIym83E8IO7YgKnEuRFCL3L1zqyu19/Y1+xaV2Y2PPRbM/e84WZm1Slm
waVDzPYVg5ggPLGdpymlaW6t4B+rauQg8QJ8r/8neAFQ2UYfPZC9gB9ul3qX
bz0v4GtbsmpTajUyzSjkBajKBq9/O/sAbTv90jged7SgY/6jAChBdves0Nmx
Amw4GGXluG57xgi9QoywTXV+3EZr+pXHF3Iwf+v4X5s5Y4ZI6k0HPXBf+akS
zPsa3Pwj21mPP3XuJfv0JT4thLYp2RJSeA7t0kjj1cM7mZ339BYPG60XF5WK
nX1EQZdKETI0BT4CDpls5LNDTH2Ce3v7of4ittCOF8AF4ARedQpeuAO8sFSu
ADDNKeVkG3+CUsjhoT0kByIFaUZ3HkM81OmWhiQyQyRhx3LWX6FjJC7qK0JA
TNeZeRXrWieTTgUIZPZkuPQsiA280CDZWmgQ1ZB/C5SAqtGDJMP2HF3rDXgI
LdiBfQVxOTLNrpfKTN3835oRpxzLNFBT/Q+z9t4/Mj04tyEesMHzmKVWFAuP
aYqwkhHsskINkK/p2dgg5CfkpPUTsPGZ9bwFuewnsJ5HfsJ/b9Z8G/sJ3cPV
M1f4fkJX8y+KC5qsnkeUQH8Wld8DCT4S8wOEiJBCgknh1tPyeS2OFMYhQCeA
Rga1zQrKCBvIN5h+VKmpPrZod4wgUYEXGfiUAGJ6TaWIx8f25GtdN35fcz7R
AqflxnTkEngbLXCnO4QB1fkOrQhFCKHS1mKfEuKpa6Oi8CoyAj4Y4YS9QRnm
vVt74XPIfKDeQgofJBR8rBEgyW1dhWhrjABskXOIofwAdvPtuewvgBxAAk3X
F7T3AgyVAEXvbxX9cFeCJvgWBKCewU8hgAxHANDtMarC9b43BEtBZMdCgfUO
ol5nqwoD3Mkm4951Ccl66TdFr6mCX+S/nxYoxNk1QLAw+uTB2sryBkC/BRwQ
cg6Spmn5PmbpjYeYSRNONzUX/sMcN/RQs+HBSk8riKOZXhC/ptipgtEUeb+c
++d51+NajYnSSX9tOgG9Tc3oviz9WSfgO3UCvknjBHyhTgBkP+cE6DRRjE0T
2e+nYL672aTrqBEfKOadKJAW81VhzL+gXoDiXaTBgj2Ae1YI7kw9I/L5raB+
Dy9z1fiDzAVjh0jny7hOLeKEh04J9MDCrhwbKOJDJbBFIU0glHRr5+l9FuUb
ru0Zs360pel6HSWR4ggkwo6ABX7NuErrBLQB/ITZUZvrhH0KELBbAI+/F+Uz
DHln7u/TnjXNIWgwIO1qAvnMdJDneFTtfdQfSNMq3HEd+uA21pbwTDKYefSo
cZ5qdb6v+acFezxVBYzqPAtbCIsAW2vYfm4gAOcfNr7mPKLLxhIz/NhfUhxf
aczW4gD1bPQj7cz2hsGm/pYD2c/Hgf9vXz1YK/H6mqpRg/wAwQP+C8UuJR8N
G/1IhftRdLZ4OApIpwW2Ye9ZB7yrl7P336q936X2vtmz959fFeTvPtH8Hew9
dt79Y/+BsdawHwtc/wwz59gyc+5RFVpkk+UjXuX4bEH8lPSIxzrIG07M49uv
VXVuy7qL89DLoR35hfqxffgtAOl/JeLgtndyODB7Y9JpR5rrydCv0+ra1Bjg
YW2JXzAk2Baxf4BrV+xSGIK8UwnwT437fk4GLEmYZbO72Yy2lJ4FuOeDLeYV
JcwAyTDm1c7zB2FxvljjFLir7Vapn37FBOkErH4MWM9UrLvsXltYT5vqS4Tg
Dm6qv7gsslu8Rzrx7ClrzHkY3KMFroOFS2Ub1IVt4dYnW3PrBfAZfuU7T1zk
vRQtFf+Y79ZHxEInJCX/Ugkn9rgM/g6esvoGQvuGu/ryOYI7zino2dOnd7Xr
1XJTfyvhfdZwtu9LFxwKDoh5Of3mdSUSI6wuiWrVTu1F/bg/vnltsXMCYs7u
x4JsoCAfPwtMvzP7vqffQhFMb/bh5bMamGr2oQaq2f/qOs/s22wfzP7FwRBx
qIGvTOneNvIjv2EpcDOZeiAuqJvPapkDsOY+BH5x5QF6gN8Cf1Mbbj2uiXr8
ZWN68wZzoH3ofgPNvOOKzeoJvXh72tD9B5r7zszlictgAHSvzhmxv7ngmCJz
38juztV/6sygRwYqwHGDE+ze76t+utfI7rZetmSASZYcvG7xQAjENtilfWRK
VNIOjFIaAPSJAlgKCODPUET2ma19f+uCBwwgKA5y+DYBQEF/4Mxfl58EFYAP
+nCor1E+VACtpf9ZbADDf6UG+uH5Ntlp59ropCvp1/KCffj4bP1bUoEwQTyV
CcTFbxdy8W0ZnbOZT5XsJh2QEarNqTpzkBl90mD28gF0IYM44G+OPHRvJgWz
FTU6W4vlvgyza0O52fDo75gKZk6h2P6iYabpqX1AEZEgKCDOqL2ov5QP0As6
JnixOBZunoumUEE/t8mKf9C1BemT/6kyYIoDUD+7hOM8OAA/pHEAvlYHQKbS
dQs5ACjgeWFKL1NzYokbZI7v5Ajwstnxh1fSL2rKURX0i7ri+GJzOR2YfLN4
JDlxj43rEyk1DYRELE7D3HME/kHtbRpm0CAgHTMgI7hqfLc2WeGhM3vzJp1D
6bG8I5FQjyVv6v1rQNKVmQI7Frfrkh68n4vGDzEnHnUABxpIG44/tNzUDMs1
j57R2UUEEAKKs6NeIU9yiNfIPsTLBRQIOchGjrhVDO3yAK2eHWIDgp1ikR8H
L1hykNhA/QJ8EOtzOBhI2JHlhMvme5xfEHXMENXEPooFHCmcU8FFP1FV+Vgb
tq4/ewhKEFENHHi6zcXFQbONSx/utmIgkeoopNJDV25iByXg4FkWj+SLM7sy
L5wsWO1VBKX1EjxuWOtxQzyVG6KaKayZNsDOQ1dqaO9TQ0j6Q3UPzHjd1f0C
BTAJ7DMr4KhfVGlGn7yXMW/C0m8tASlsLDdNK/cxi6850pHCqrv3BVngV2MD
h5hfFUhvhegBGgN5Dk6B1FxjzOmEga8QES0DbgLXE79YEAQI6YoFQm5CsP8U
yxpZJF6Yy27C90vETfiv5yY03+iNuSE3YfXUXDP/1BIz7MBB3AJ74XFl5kld
aEpugnn2nF7mifF9eO/IkpH55kbiA+UG4YqoOfUgDJqErbYbTf0NCagdwHZT
2PXnJ3bbLTtga/bEI8otM0S57LaQtwdjUDSIAAdab1eM75lWFnhXyxjOH1qG
d8g+DsgB+1O2nteDlzQ8MOmX5tExPc0VwwrMCfvL4GlUA048rMQsOL6nuWVY
+9SAIVSYmx9iBH9wLBIEygjwGHhGrI46fzyXu1QSVli39rY+RxghGTBCjNtd
2E2QIZVSYaAJxZqxHhHcmueFDnHxEjD0iHemoVjw3t5x/A+vOFdn2izto+SR
FAfzgT6+t5DSNZsISQRNN7th7a6mt/GGYp4ijdlWdXN4mo0NGVojAiQDeBZk
mAi8CqFWtIF2oVDBJgCan9O5syiBty01Ua+VDlhEeIA0YNPjZaoDZnGakDnA
8UAJ8M9ewo7nywj8vzJLbzpUxD8Cf/1tB5rP1vfncIIjiYAFonA5AHuiAakf
LHb9etE0zgGmXHmjctysrPWFLSOFdLUDadwDiIM3nV3u3IPvFvdk9+Abzz14
blaeufb0UnPc3wbxMNu5w8vNuhm9zTvV3V2GEC7B7SPzJUqI+1ECDh5zQ8T/
z1lBzZCtGwLuH6WI/d5R4qef+/dyTg+gQh8gwwQMbF9A3/zcf4BE7h/Vmz5G
wP+L54g0COzfd0ZvM3co/U6P2XdgpICxv3xcTxcqNLUiCVrsvz49mznMx/6O
C7qat+b0ZPw/fm5/piA4I0gi1p7Ux5x3VBFzAN5m/8LuCBkOECAD004ezPOh
H96NpwPguTFu8eSudo2d4j6uuGdDOreMcZ9wuI8x1tpzM6t6AW6+IRQDhA2M
+UkVyBAEmkFU64acB2BLCe5lkHP+kKem3stHhOOHqDKC8wx+EiN0DDECWm7r
ZpULC9DPhttoteUFdMtDAkJrbIAVstwP/1DR/w82gHCglfZeg12QEkS1D4gA
hEBoDVKCEgu0c0yw/fm9TE31IWbcmJPY/Ncv/hufI4ZgMUEiiIAHIkwEpnZu
fw5BiJGCoqNYaz4A5wki0snHZc6txQehMgH9/XsywY5FIg//3929nf3/luz/
2ovyzQ2jy8zxBwvgLz2F/lYX5Jj3L+uhA27CycA7Ts/neOADVgi2o+/Wgf6P
aUF/PgXsCAlskYCEBVkSFhBSYfjvGpnD/bhAMtL3h/wpIASAHt8J6wC9eWJs
z7QCAa61rQ3Uw/2HxYenYlGP1YNA/rvn9zRzCPkNU6XvANfnAuJztH1vXCdz
3fG9TWk3DgkU+aEpubkh5E/yU4EZXgwAhRDITzrkR1UgcBZfCvKSDvwCq0wx
+qf351AgBHiQga8VxIJ2O5fki6kyyFPMFewMfUY8MUTD3CJr/uWw0mGrmUF5
Xxne2Iy+/EcDxAH3ICXYKdALn9KjFazj44ztnNVjB2h9UCKoDwqKBXHfWjvP
NsX/17rgpCsVhNl3RfnW8MdMXU2ljsXo68p9revfjk0+gv5Vdfs6/W/xtUea
v/zlL2bHGuLnJo7UNBiIpWiHCU4oIIUI5RF6AEUWkQDutrkvxf9P0QoJ9tgr
42qeneuf39L1b6EQBnYff1VUB700r8AsHF9uTjhksNmXqGDeiAqz8ZJc89H8
XuYrHWYHt/+zGk8dvKQrq4PYHK1uvwd7FgW5945+3VYQfPe81P23M7Iigxme
rRUErT6rm7loaBHDHLaeo/1WdEA27AzzrFZh/vh4GQuQCnOs7906J49H8D87
rZyfi5gDr8ezOLRjb+nJHayDr1DfoNU9fCsnBHU7ZZZv6fpozvK/d1tvO9RR
oc6Rfq618XIr6cJ9PJBcth1L8jnTDy4A5NXWq58fE4ur3QIhuPsJPlcgJJjX
JVv39MYH7x7OFQDzPMRudmlbmM9JqQbIlEXmmrcE1J3H8pg3Cf+nIV4t/P+I
+A42J8AH9oRygT7GV68tRnLOjD5xsG3g8SCPUt5Xy1nOgxNvI/kNj/3O7Hqt
Akg3NbMHmurJg2K4kQ71WlzMWURRFVFYDNaJuuJiW2uwyaskTCcLRsqCuud1
bXn70ouBqXY77sg3jdcW8UoRhH34u4KJYfCvGNXXbKnJM58t7C1CYK0nBF4X
CIH/tkKg1xGAWsArTyhmwMcDO5+R1s5TqG9uOw1JZwhw8bCdn6HZuwFh/Hvx
PbAPHtgT7L/VBvYRhmhVM2G/Swj7H9GxcXaxmTbuJNN4XjGXMOA63EiAjn3t
2p345wzeHqPgDxUHh8Hvry204EcewIz4W3sGfzun9dHfH8OkeDakZgRy2cOP
qZbWvJTs+vhKt+icbL2IbTFXGJiaD4j7mb6gGiBs5jMY+PTq1+ZLt734/kut
i6D1fyr6dXSgR2BRN7M8PFeD3EqAnYsWfMC331PAR7nKJ8EtfvU15UHq33nz
iXTdP1rdF/eb6IH3qM6VbXpEavTtzBtY9+YX1dq2YwVuVyOB/Ml9OI0Xkus2
lrOgF2XPPc6Ab95QKpLBC2XxNKCX6D7AfGNJzCsarL+p0rYP7tbkB+4+fvOv
yBpHTMjmn3OdjOnEqil0T2D8Pda/Is06/MjBUdZaevMfA40nUH4wOQV/sA9v
Up3vdgn0WedbZHW+7iGdr4WfTwb/1and2eB/gDJgCfS3z04T6Gem5QJOyO03
EL6A0EFWKh2EsgFvTA3zAXyBc44ot1xAfxm6N1L0s7jgxlMKuZ45HRd8fKHw
AfwBfMdj8Pxt2l8ArQECQHl33+23Q+m4KLhPiA7e8wdJZ6YR+jrga0LpoOqk
ASKaWzrgAuHclCqhTHauYXEtMey4PZ/JgmfRLclP4Yh0LkKEfQQeWEu2IRIL
1RCnuggJdRSqjh/AKSXmEm1BEtrp1PpsDls3pGlDfot3FXixQLI1oohyN1G7
kGOAw7YK/jSiSKQSRShFCGiDJSjWD6UIUc2Hqh6mhwuHcfZ/+zODQylCKwIK
IXAYUH3uIFN7aX9jtpXgSGEMfR6TxSxLFnI5bUTi6GRLcXTPGYPdBfYU9uaG
COgjODCSBLNwayb346ILVFg23U4e0LK8tPFB7cRyc8Fp/cyPbWiCfmwgUzLD
sYGtHLgdqcA2qCLmU0XEHwEAXXD9ZEQW4IrOxBVZIYkgXdwArlg/SWb04fvr
6CQGTRS3ShNvt0ETW2eIJvjmzOy0NPEJHetnVTBVvHVBHp9HeIFr4TXwlp4Y
1dHlBfYT8X+IpgHt8Dtda3wkUcib4Xl6bS3N0Y6khN0GaVMKzEB+yLH43K4M
so74Y8eYZuKB1yHraSTDkHRM03hdkfPlmxYVxrQKGYTD3YwP6x6s3TKMc0Ws
+JDOGUkoxQTOSG9LMKoxduYaB7ixbpjIwkKbfQwTDP0EGK9bfUZ/f6kGx8J7
zi9wqsEvvEhij/mlazp+4QpfaIsMS+IXaIqfreln6m+WqkGoCFw12DCYIw9P
V2yFXGJwQYQgtvF4H59e6Hb1pEHEKgNN8yslXgVTRCZ+siOypVgqFPZMfUBV
0qvSsoQfAlHUjieLW0YiDS0jkdSyBGSlEYU4V0QlRxuFsCuSEoXY6Z2fePNE
IDmOP7zS1iJ73BKJBrVJTC7/nGX7FWNOe6RDWpTIbDGxzGibWOB0wPm46oRC
z/n4eawChoDzsYCckNZY5VOi0JdmV5jp408yOy7qxbf/RY9DdgLXxetN3z+z
IWCVBBhlkvKAq06WlsQOIWoBu7S1cOcXPr2EV1zKKLHYCNDKkD9kMrYYYR0V
a8wtzoURbomrL9N4faD2E7/EbToDSqF1XMiJ0X6HNrglqlMDsYCLq5gkVmnb
gWFdExtc4cDMUgfm3j5+4aTwyo0Fblwo6oHT0AsmeHPbxd0F/wO9IM5BvLPn
9JLVgl7QLgQ0YpvtJw0VZuiQgxylLL76SC5E3vVyedDH4HFLIpVbmFqiSilV
Y1DWXMm34o5gRN2E6iH88mopOzPMMdZ/QaU0jx/dUuy6I3ZLM5F+rMnY2mgM
J5UqrmIX8+y+DzJc4ICu95smlJsf7w68GBfwwItBwHN9OOAJ6h/Fi2k6T1qE
oBuAaKIgmlir/BIPFUFSnBNzFCNxTps0QxSDViReAOYoJqMtilFZpU9ailk+
Xooy2qKYf88VmsEK0s8vzjZf0PHJRfJ4WxlV2ZOTFJEDBfvL/EJH4YOMVHpp
ubbnF3BifoFVPGF2CeVJ23uxEY73FrM0qewCq3dXgXVaIuLIZDCrgHDALMgp
ApzSJJ8ruVJ8JK3bIs0L8RR2Sfrswh4wey03FsTS0Uq2Tyt87LhJ0miYuVEz
WqgEmqv6Palp0fCswrgrl4LHUje7/H+gFExJYtg8XLyHlNIpRClNy8rMkMN+
bWrO+wP3K6NhsWrC8WbmhP25kdG8VpwikwZ8IlFNzBKJRybkbK7UcOatEhwJ
nLaeDHPJbOYSeXbAKFHPa2laXmbrMn1O8fXTTaFO7H6pjRZ25bf8tH7qxBVX
56Vvo3wkcF04W0p/8h/uEhUlNSyylZRfzA/CIhFQu7pSCWv7Uwgl7hMKDuez
aBM1dFQmlChclkiHkHISYhRPOYGC+sCo3j+BTXLSsskHc0RBffKsPm2yyWd0
1E//rakmRvnikmyzkw4wCx734fldzfNnd07JooSmFQsFJFMJxW4B4snjv8A+
gV9c04JLQunVDnKOCyvmj85iTCXwlcUWMuyYAkpoYycFvFJzloisOEcckmhV
eon7nZm7pxN2Ug4f3Eqrdh/EDB6dgELg0uBzhtKcpusKbBKmLSrRyuxMJ7E4
pnzcG9BkqyqSKTJsXqoMa0usMMcUw5jSckmLJmvhkl0vlPK4o5OHH2XOOOMM
bnhetWRfbnhGyoUFVAwOfa2oVS7B7z3wSyJMFdYxAYdwQ9YtlXIrrndAb2Ei
2VAqz4iH2QThK7km0GL1JVo6J4NCzklK00Zo6WngmewmBvJLLzQGgmdSP6fE
/FjX23zveSZ+/CNSbJr4R0sunp/ci627I5G45l7DvEGcweWWAu1M+ppl3mG4
Z4UFFRFfo+AG+oRbBrnp5DyEPUIe+WkrK97SK3Gk00q0A/JAwAbm2x15fE4/
4H1T/2zmTTwG5EHv/MtLs+kt4T48p/qQdg2BNwKxw+4P0F7LFuRhlwsJeWCt
0C9u0X1BAXmEErZKHhjkJCLtE7qFr52WaZDnL/siz/ZI44G8WFC+nfCZQxyQ
kwbA2Lfki7jjC3U7oumaOTtwtLKjNo95Ac096OhOUUtSarXj6V2OgCbsGBeO
1n42TditmwFNdExHE2x0mx6GAiGT0KqnDeOpaNtXDBINNulqsXmXaE2lZYkU
kojE/OpLydF4JBFnkkD0gppM83YJn5AwJqCJjaWJQDNJCOHQBZtfKbEDHkTh
DYgimhrFeL0cPPExUsYORt0VlVJn8lJKfcYeRC68cj7VybgNTkY4aklbl3Gx
1V7FVi/heszZrizDUkOcgWrDlPWTu4MdsiK/CjHD7lSRlyd3ZV/z2QndWq26
2lNuaJopYdaGqT12yw0IUWrPPZj5gZjBfEU/ePNl4mjgcQN6h8KVUA22bgnH
plD8xxKF7jhpubpIPI1rbSTjyGKZN+ZFJRaRWhvmdWeyYGWESzygat4qUis8
DhCHVnq1ZAr2KxYV2uXhLZlCZBD1KLw6D6YJ2N+lfbj3y7V9TKhgxgBDpCRu
Upgi5jOFJJjxQ3hJm9AoOKGKaLCA1FJFpK3wRJI1+bzLqP6qirRcgbnF9QuF
H+A+HHnkkWbSGb+XuWn+DvKAK9wktp/PFcQRzBWN9RVR3IgyYcR8shCZNeHL
rKCM2kv6I4kjrxJrEZzYzq/mdfxGbHBShgUM8qZfKQoHJGv2PCCBW+n8iDvJ
j1hCfgQFJLsWpW/rahGMqI46FXsJLU/EwRNR5Yn3FLhVR5Wb608qZJ6IgiZi
HIJ0a5MhoJdefULhnrKDJn96tGCHD8/vYqaR57Dw1KL07HBRmB3ABGCIaycd
admBrv31vGz6C2yc0sVlYw5MI0HokvDLCOCggql0eAzRcjPSL7AY6RejUhki
/p7OhLQrxdWjGBGxVSBSHfFEblxLvlEbCfzDoyCyiKd0g0HDKGPlVF2KuKsA
D02N5ersy4pT68CSrEX4LaKQPV0MkkCXqC0DCRd9ASDeWpV0k5/cXNiYvwgt
8nPZQSezO3bY1VBi1t7xB7d9YMElQ8wbDw42404m/2tqfztRsTV2wMFpD2wh
9dlBurFSWzk8gsBFtpVY0YI5ov7WSjP6lL1iuJFCD1EXi3ipmDhkDZFkMC9K
RdKYy+tqJzqqv4UlSlK2NkXK+QdAnRrXrVmvYl1BGyNhWkYdqAHDX/7/yBD8
cDcxBUUd3y4W6QJeRVD80U33pWV7k5/txCfVQqu6h2WL92eFZItU7lg/uRv8
jDTc0ZqHQXwBrwJC6E/jjpy03LFmkoRKe8odX9IB7rhzyv7sWRBzmP/Q8Q39
QuYd2d6LPuzuUPYFlDrADePp3Nch6mh78ZJyh7aNp835ys61zI10e7Z6HifR
eSRx8Epr6P/7uFdLpLtLK87jdgkqeM+jJleRspP3KmnIoytTvIFOgvG7WQpQ
ikooRXn+i6OowIWJarCDzyILIhL0xLSrtPGqYFY16pXcENuYtqSCmrg2dU5p
CkXFfIrSktR4atVJVPViEKyuWhUH/Eknr+KpK5myglgnIsFOVoiikLIZcuiv
TcOiX5nFlx/BtCSLF/4gixceKOUCDO7NdKWoCX9OrS08j0S18hz8hAb0lDLU
NkgqEhOhVepLhIDArcRTza+VSj/aOuKPt0uFqOYM5POgrniYrGJKVsjpIHes
7a0BWXldKsxT3AHTQn0VxioLHLJXi1qKrTYOam2GjcZB+Bi8eUO++ZHioO8p
Dvp2Sa/At1noCa1e/cmnofoTSbLeeHIh+zbRtsgqoWSVxQcaz247LS8iUVHM
j4oiIr1mO93Ecde0gLsguUI4SctbM0K8JS+fm5a2dpwvUdydZxTshra6Otr6
ivj6cgqMHp/5O0dbuy4X6hqcE+fASGZaZNiZFrYQZYMWo7AIIoFSDCuitqSp
SGmxRkorUmQDXEab2WV5aBeQGi6FWAwbnX9HR5yeh5f/tzpNbd3n7YJ1g/c6
y7mQ5ttBJ1bXzSnnZlMwV1TTSY4KbOtNwm+6cxWt9aID5wQhmczlac8eEXtc
80qchtN4daHrtq2bzjzGLBUPBvjGeTqv66tJM3/D0VjMpzGce5SDy8dkaR2i
Si7iWh7isT2hsab79zJLrz6Y97ZVnXW8WXXzX9jTsnFY4x1l/haNPaax5hd1
A93q0v+FxtjDYuqqnYemn+qqQfiDMYWVqfdlhR0vPZ1gzRg+F2u0z5fZl9nq
klQcEWLgNxPZSyWSF281mRQpFe8RztcrmilLV4DvQrXccKimzte5wweY/1sa
OF//hfN1CzlftURlCzQR7aZvZKvcG4Rpz4sPE0mJ0+hjK6VzWcRgwl7EXAjX
Ut2t7LTulqWtWqIrtNi1TVlZAWVlp6esC7qYO08vMNOGVOwpZUXBWfSRBmut
nrW3eXtOT7PkjCJzwoGDzEG/62fat2+/X8SO28is9sZt/FJjNr8Qv6vPQ7GW
aehIDI7VaCvd6FZ5cAu4Bo/LPuOMM3ASgvGZWGrZxn3KQXhhF0AqB+E9m6Je
MWafdpp9QnsrOAc8xK2uT+Q6LrJwdr1B7FnFPM8KiW5RinKjadwrepb1rBrn
U8RAHzhcr25GGRKXXjAY92aAcBcY/CnLQdnhaC9dfd2jgR6ETzkIFOSaloN0
9wciE9mJa7Y/NMDUX79/FEsj6RdTf8MB5o2lgyREqi92UlD9fFnP1VBb3kqR
v072ywgm+3kjPHRfz//CQEnHQHCieJUZ2GdTGd39Du/wertUH8JHIoWK4pzZ
hjzEaSw/pR1Vxch2BWnRn2WhyhbL/OAbcuXgq0UtQ0BfWG4lBGy+V2ZBfXhz
buBQ3U4sdBs5VDeTQ0Uh4FeeQ+XCP09U/vACcUeeGN9nd9FfFmhJ6WjzNJGJ
11EU2BojpQsCMaETAeBzmACyJ4yU3yojvaWB68ZpPfbYiXp1Wm9zxUmV5uST
TzbHHvE3c85R/czyCXnmo4u6c0HNoD6s5eikjzg4aJI6UDjCPGSz154bFYOy
fI3lIXlcJxsTwud5gY6b6Vigz2v1PiUhf/J4JEvOScPhkt5B/gqCBBEPlGgQ
Ef0/bjd6KJQx2C/UngSsqyuk/kc4KR7QUFQnAzdeIyO42AOaUY6WITzzQdGv
3aSASEqaS8eSsVt0nzd8PNkaHUW1E8JnI6u1e2wU5dAu2yWydj1ZzJtq506T
rbVLrzrYbH94QLCv9/kCTnzb1dx1l/ZlT4incOpq7j1gow0BGzWv45xxxMVM
umwgmDMW82vxvHy37wwR9ZiqsfgjjD5lr0R6Eoq3KK+xPUt63TddLtxrU5Km
A0+3rggxEJff1Je1lKpDbcd5rYZz6Fe9YEQ/8yP8n7re5rs7iXmWkP9zq/V/
epgvrw/S3X4oJzUzXbheZupRFa2Eclk4mHmiIB5OcGVZ0drRDroPiXuIPegB
KXwTxXBQ+iy1SjUzPaopaJVq/kUHnJ+bTi1qk2qemZRjrj25xBxPXs6+v9/b
XHp8uVkzJZ+rZl6gIHwnV84QJdFj0Y9IdDMpYneOZdrtgRu0sWiZhm02z9Ul
xD42/e2zD5Lgt1iXRb2gYnJjwC7DlHGw2hv6UR09rq370q0CFgKKS9PjQe11
HmBuQsnGclDtlL7KSzGe/2HXDLUPCEh8H4xB0BEI0bADJGp0kjtd4ftw7d2J
A0RhSl8+HE8ZhKKq+SXFXj5sN6TTNUQ6+LBzFp1+BM8FMrseLzYblvyKmWbm
5FPMgguP5v3YuzCb8BmOyZ7NB9sq68ABQh4da4JHnzCYd2wz0FrtdFTaaZ+W
doBdBDnYFKwbzqLhEpvWKSdpmlaVm+FDicGv7w+uAfXg/0nciIdjr6hXyld/
c2XANa4VYQC3IqTNkQVco9OS5Wd4JY3Q7cdafovB4+KV2jk4H96SZ368l7wc
irW+pVjrG/ZyeoqXc6O0FqA+D6lzP86yIje04q3Ts6MB18SUa5hn6EfD1wwX
dVlXZ/WEnpxQd6oR+zlxJpxOIaXoFXVudsM2qmp3b5Nu4NXgHft0896cbmb1
OX3MNSeVmOMOGGQO/8te5pLjysxLU3uZ9y/oFjWfz+1Kb/HDC3tyg8FLs7As
lDiKvqLi949F8Wrg9/dCN1Yp8inHrjzEfcopG7yYTAnAUlDLzLo4QNfac0JB
sdNGy/px73Hx++jcbXTY+/Sh9rT/Msv0zXElofpAQaPlcl1cFlXCgauAEWSE
Wo3QvPyV7cqMqxfkMt86mVFoyI5CfSQ4iIfoz4b0fJL7pPGhBHVwaQ96IZeB
t9rgJH86qxT8Re0jLBP5tTzZoQS9ZSMwEaLMXY8Wm6a7BpvFlxxuZk46hZA4
1Kxa8Gf2gUI5OLsYOckoa15RaBoWStQDMmp+GkTzYkFrcxXjqZJQlDWhjBAV
YdMxj1XeXJza5tQaF2l2vvGRCpnBeg/WwLB8DRUIp5qeroAP1D5MSNi4uEJL
jqUUOWhZeKVUXi4tGZUFs5tXlYTDrXR1PC1GsEq4VX16P3PTpArz433k8NwT
ODy74PAsIodnITk8FG7tvDZweFLrd1S7DkiIvszKijH1xHzqoV/Xu0w4kK2f
Jgp6h2XqdPSzbXpAQZiGXHtKXhv0k6X007VVdRr0A5kH9FJ7WpFZOaGPmUs0
AzoaRrQz/8QSs66Km5foWp9e2DUGhqK/3sf0pDfn5HLf5IZZ9Gn56AL6+ehy
9GP8oVDIB/9+FSag+Ypvu3jNEpB6IKE1jWECapm4j8SQuR+VQkDH0+OawkQV
X6ZZO3tfLCCbmfbV5GU46z9EQ0C8YeUgZAylC9NyEH3FDFR2ba4qkUqAKEKy
qGt3iHkpdU69hZknI9ymeewgU3deOfdRgRWimqOvv1AbH5apoNwq91gJ2lsB
HWmTeGI+8aiM1cM0LtrLnHzCUWbSWSOFbG78s/lsWXlQRfh0XirxSAnhkwVc
aQzNB+VBNef257Zlu9Flt9RT2Cr1SFWQRDGPl+0x9cRM3bX9uNKY6IcjLZxr
rK8w+/11H76Via+ZIB0uDcLoHNQlkwPk9zREvWIhzauld4RKJb02cWDgAO2u
UWFFbmi8K/76CH7/jwLsH3wHaDHxzi3kAFGw9dUC4h3fAbrcE5qJd1DfD6GZ
iScS16bKLJBPQEBh38f6P4i1KObyfB8MfJkRaDxvYeDLNnwhxiGbu4j4B6NZ
d89BLUsGLQdB3FlBvDPiYBnJiu9XDS8xa8/txdz0Ef1MxC4xsEsczyATh+c2
ziwyE8eM5O+43gdg2O3s6w0bnGywDLQXf+Vk2RCNtOzOdqdBS9kxb4RxjVEh
+mk7+S+P6dydbn9Ox3S6D485jB775Whp527rPi078JdM490q9YwA9ew3OMNW
5CxHRAW5Fp6PVuq096Iy1k5EEAraruBZ6I4XqfSJarc4eq0arwu6OpmC7stL
KkHoKApbL6TswyJQXKsOMXyCx1M5ukmk0o0ltHqehUV8s/3ufqb+qv3M3Kkn
sFNTdeahZvbo3+AxT+WhdMGvWk7hm+blBbx6FmHW6OMHYYhKVBsbQD2s8diq
ZRd1ZaRGXT7fRFojHIRdujN+N4QDf2ZjKTMGGGTH2rKEp/tAdhbdh25l4Q7r
G4FqWJiWroeoS+Wnc3Ailf7EaWnBSCcnt9XLrYEW5g0i1wD/5nv4N3eRf3N7
L7OLAq3/3Bz4N19c2918fjX5N1cSx8wLcvNWSm7EDHZgGvwyO4s9HKS1iDwC
FQcCMqKqTVO7MrFIBj7mEwv9aiy1RHKcqoM0PMZItsIsnPJPLUZ+c0a2eXBM
rjnr8Ep+h1h5VTO82NScUMwTblGoDPb4ELPuPsAXoQxmyVk4bHiYMOunFzLD
rJtWaCkSvhq/+ZG/yXAUM0A4AuCd5OXhQTGTLKi5xjgKxlFtxysVapGMl+R9
4vf0//V0kf9o4PRXBFbRNu5TN8q2VPCtrsp/EV1Sx2oyfRRqp/a1FCIeTXsv
gmIdxJJIJ5145fyYx2Q8md8NrvIOozw3yLVHZOAEPm7a46S5roBHRK3J4N48
3ml7a54qN31Sqpk7c3i268FCs+raP5m5U05gH2XpvIPM9rp+7L4jk84ZdUyj
T224zJDFlI8X8CRKdlOOG6TjIVjJcStraqr6c9Dk8cj/QiMOsM+U+jSi3dtB
57b2PVWNQWE46MSms5LKJaCWhrq+tkrorZKk3o0HY1AN4imETPB76J5YUBmU
xnsJJGNyXEBzSLnxe2+r6KchL+1cWhSNOcdlKRFKXW/zLQVN3yzxHZceZuf1
RCjXkONCQdOnFDR9fFnguFxJEJ16VDk7LlkMSee0RAJSscESa8MnFqYES634
K5HuLnSaNaTUTD6yfLeksmV6Ns+UBWkwkRzUn4dObaXzTlZK8HB8jMR66dzu
LC+9x/zh3mcCdMHXdgez3dssYa+uKjcTiGBen9bdvDW9M73V6Z3pR3uBOG9A
YTbzS6XAN1W9sYIxN0Wop2DdG999kU2WMbvsmm9lC4OwtHvGoZ04acQJ7WV5
0rSc6Qm6EHlTOi+Tbj0svrt5EDcUJ11wE9PEEkZceVMhYmnwD1hjYtE5uuU+
DH2z6/5Cs6F2H4b7zHNOpg/pULPh5n3MrmVFErF0cW1P1Wf2510UqVPqdtAl
MF4NeygA/aa7i/1aQEF+gpGPqWxwLJqf5o8+4Eo+RGZoP00a6KdHfhGbayCL
wgIf+ckQ8jF2FhsoCMDtPMkEmAaWm1aW8wm5L5PPgwSA9dGn7MUyiU0R0f8T
rbkQnJ6OlPDkWtdrEQpTWtFpbZji1cTwbFC4D/eT+0Bhynd3B+7D13Afbuph
Ppzf07xcnWMePTffLBpVZOaeUG5GHNKfZQVeO4utGVkErcE8YnLcYZVmCkH6
gmNLeQnN4hF55r5ROeaxsb1Nw4SeXINsw5RH6dyhfx68J2EKoZ5eZEOVqLXp
MI8L33CSgBg453mXI/IJk9nsw6ALM4tfCYgY05tdmVVn9YzYPNRb00WX0SNm
mqZ1jnQyb07rbN6cKsfKyWVmytiTzCNjc8zFQ4vMsfsO5Pcz+pC+ZtQfOmKt
JHsFsop6t3KtADhcORfGe2hCvTw8XgS89+nTx9RMqATW2+FPmvQiB7ZRdQV+
n2TcVbXgT950a2FQLRwNyupM7bkVmH0gLQWxlJanLoJnbabGdDl+odvyzK6l
BabplkFm6aUHOWyvuuZPbOK9IpWoFXMV502LYWv2cTjHIkqL79oZfc2OB4u0
WK5TSs1vfjB+lmwaTDxSw2LiC6w6gee+xEVye2zjBek7GkptkriljW96qtyK
CxHGaIZqFBbLuNVB8d/4cAU/GLRAmI5pdqbhbn3omyxdyFTLwKynFPz24Sw1
D6mu6RcY9j0tPtFowQ4oXH1ZsXl4TolZcHa5uXwUfWyPGmiOPwQxzb5/2DvS
jQfNnzO0v7lsRIW57ewSc19VkXn10lyzraaP+df1vcwTMwv4PB6DgfT4DOD7
xGP7mZnH9zUTjulnRh4+wBz+173oJwU3dHD7I7BTpurv5WYOcQN2w916Wp65
54wcRuPKs3qated0kwAi0sWppNbcw9TffEoen8djsZ8CUAeKcd176TqvTe0q
5cEzJLkcY9pIysKJaXI8Na4HQ3bZqF4xs3UqzPQbhOw3pvBBL7+FvmaZLVWd
zet0vHROF/PAGb3M3GOLzPFH/JWrUGYeXWIeO7O7eXFClnltciezcVInM//v
7Rz6CwKlIrWs1ykVPQXfeMzO9NCv9r2AbnIuGCK3nIEU5HFd7ZdteUwq7jm3
ggGkZP/JvMdbtApAOWAg35Hv3P1U6Gc66NdM+K0Zd9qRAvMZQ039FfuZz+4p
jboBKjltIR6eJlvviTIkFeiXXZT5tjRtjxDfdF+JtDn/ZMTHUxFvK0EwJ8nO
Y4t6E994BaVsnWP9sJ3aZTeaCQX9ojlaTx3AX1bBoGdP/+6+IQceT0L+Q935
Fk59MgX/WXZWtRDUxpaKpMygLZYZtBdW+DNoIzKENpOxb/c78YCe2Vj6UcTT
B8k2oJIZcvKjOZHe/JHAqiAEgxjGAbvB86rVftjx5zzUdlwlF1nfPb2MOyBX
X1xkHpldwvOeFhLHXHBKpTn3uP7mzKMHmiP33wutbeIydGJawHqZMYfSQwje
+G4XxgGiOLdyfE+2+gph+lW9yV+3klUm9DKCo0Aw/YjA8BbvAH6fGNOD5YeF
J1H0uBkrqzedC6u+6dxOjF1geOnInmbGUSX8mkP+OtBceEyRqR/V3Swc81tT
PXaIeeWcTuaViZ3odRrpK/1xJ3QyNx3LS2kxlyAngLttYGwhTMpjYq79Gf86
+3CP24ypnRupvgEeKvPdlsvU9tyYlzS1GiGH/DF16m3/Ipx6KySSO5BMKWWN
8Z+WZzPagSop2KdrfXZ3KUN8bpV47egBXn/tgGhra6jDFalRrbmFugmZAtDH
58jtngykQbyB1Zz0DO2edNAXaTDJ6EfIj6pUDekBgxbAb9xD4Gcy6N2QNK1H
rZsv+YYdz5dlAKGZXgmXQhrvhcvc4bdD9gNJ1F3Tj4P/DIU1yt+R7Wh8qBzn
tha38/fXoscIsTpmF2AiEsZKDz96ryjP2s/kSreq0ymcn0LUfllfU39NhWl6
kOKMJ4pN8zOsZBTQR6JhEXbTV3KZin0KbjfeWYqHmaYHSlC7y0+vnVOJy9E7
o0fTO/Avj8fjsc0NvJ6ngGgbT8NdeBgubR2tpvvo17QGyekCs+Nh4pA6/JYb
ri+N9GD+qaumX8nESj4QkEKewicSlUAY7AeZGZ+DK0ZVmCdmFJhNF/Uy/7oi
27w/t6t576Iu5q05WWbrTJk/vYVN9OaqzjFGbsy8hoW0k3EAkRvpazez9uws
Ru6VwwrMBrLGrxJi15yVZW47uY+ZcFg5I3v4Af1M9ZAis+yM7uZlQvDLEzqa
l3Cc3dEsHPcHc8GYo836szrSNdfR14R58ayO5sXxHc0NRzukq9XO+KUKgqkC
obddLlyDEYJ6YoPmJCcp5DlT2lUdgoiduLakN3pEgiIJVxDht9IQiYOQ4e1H
XeYy7ux/Qgu33JjEOwuAT0/Xa88YRnAOh91qcYsvPMxsX1JJjn0hL7evnVQR
1ZLS8ARGhrxkIshnQ4xhMxp4OQTyTYuLGPc76FIt0gGr81rWPbQLW3u1+MA7
PuHhdIA3RdqBnu97lVfH+RVYr7lOks1YGAuXmosLni3lxfKowRx98mAujopb
be1NF9wD7W9qOXmMI33uallTJgXr6CjYUBqmgVdL5UkM/JBvb5qelOe7obDt
giVU7bgWHeWgeATnFOj/WHyJSdSYvYYyUfZQOvH77MBzUuCmYJ4S14nQz4Jq
d8xYIubhl2t+FT9HMUxIU3EEDTmlMh7yWKFkbLxCwrNmOrHBvEqGfcPCMtN4
G4U8dxeZHQ+Qm1CP/qYcHZKi8s79vQnO/c0j5xWb729HJWkP1gh33tjd/Pu6
bubjq7uZDwHtS7uad+aSW39BF/PGrCyzaXpnsuudzSuE1pcmdjTT/l5ilo/u
ap7kI9vUndbTPDUm27w8sZMZvn8/M/XIEv5+8B8H8/fLhuabB0d2E7C2c2Bd
q8cLOMZ1NFeM+ZuZQ8BeMxbAfn5sh6h5bkwH+qPd+o92Ozslf7FfEFenleaG
WFQXCTyBdLddPozq97y03y/tIAO14tIHN4bxLKgWRZ7RQq67A3TtlJCY3yIZ
mHTQlqKEBBtwGHKtybR45BQd4u+m2waZBXOOcg47NDiCu2QBI7LQnq/u5Pmu
IXyDOqw8yAPuic8briqRZjdt2q2/jH6K0f19fONaZNU7h8sLfJf++bBLD6XO
5f3WFfz/wDeAA0zg0PrqYEVcO42+gVXeG9sk3WrwzIFhHaoab81Bh/9E1wRn
qEDwRnEmIziDEYwKAhAMwAiSUbKJsPHvpLo9b6oAfHngPUGRHI8uOiWawPob
hi3ejd5HP5wXAbykWY01to8Xv31bh6B/QZ4j35u7HDFU4oc7e/K0AbSafLWw
u/nihu7m02u6mX/VZJsP5mWb9y6hCPrCLuZNssBbzqPwltzsV8lVfokM6vhD
y8zsowqBOLOejCYMKCB680l9zPlDChmiU44oMfeP6GZWje5s1hD+CHF0dDTP
0fHIyK7mqVEw2oBg0jw7poN5dnQH8wwd80b/zVw0+nDTcCYhdDW+PD0KMK09
pp3pqDCV2ewtRLX3UkQ1HQwUqgFQpCqI7Q5ovtVD3O9gwNiT/Lm2ILWZKBdX
a98G4m2E1PT/qDrfy0NJN5vkDxALpn5A7TBWLpCPvOshcp6WDObcF9fpQDi7
9k9m1wP8KVdnXExvR94oi0JG3QHPRSYoO8LMVYYm8v4Yf/ZgnvgCeBMZ8nl4
Ko+TaWyJ7yv82SiF0uSyamlQ+nIbKN2YilLpZIdZgwWqvbh/BmDB6ExKf4Sk
0Fghh4L2VHnaGh7GY0JT+uye39nXAl32RNPLQC5vuKMv4xCON1nSqLag2l1w
eEpHfM2Q/rCaWQNQZ/SQli9uLRYfviOwKfceyPdyKeXrqh9u0N/Aek+We8bm
2uwg9rD9PPKAvZz9/K/azy8XdDefkf38hOznjiuzzfbLupp3yT2G/dw6O8ts
ntHZbKQYt5Fi2GfGdTZ//u3ebAQBTHi1FKmyF7zhHPmO2/B64e3iMevUYMJI
riSw4i9wzynZDEoAkjAICJpVdFx45mHmylF/NStOb28ePq2TWTisu7nnpCzz
8KmdzJJh7UxOVpwj2nZBIOzrXqFAuC8ewunzrBAmQ7PNe6pFZT/49t6KScYl
PqvLreBls9tJr6vTa6iy+a7lNgcG24VbSQfMmI4gxdVqJv2Oi1m4OpeAWF+z
Hxe4kEWNhaNjhLSLZQscmh2wFAr/d3U3mHvsKvHigfolCpgUx8RN7bS+YjUF
iwLFrq0O40kHRRhN1sECDSxNe3ihCMah9vBMT/EW1Rs4xCeZrdpJg9kbzVSr
thUGrvmVUi6nw0cF29bRtMn3ZXrrUmD62DV+tpRPJLTjE1dHlM3Qe6LMLl5n
/Nnn4Cp8rfYKa4ALeIaFBNjZhj5fms3G8RDTuKycuSF09zMlgUz2qu0Sx29M
f4vIe6/K1b5MVSwehrbZm+UrFHv7RrL5JjGS/yYj+dFV2ebDy7PNP8lIvkNG
sun8LmwkN8FIVhG+1Eheemx+CIfQjxCVUqzq9OIwLjs6XNYO720OIh8XuLQG
9DnPUM4efbRZeOavzKozOpiVZ7Q3S0/OMvOH9jKXDuljJh+cazq3Y1OmFSRt
i1L9BXqhdHPYUobSTypZo/tJOolkppR+dR9xXjXGC1OvLmFfVs/H1XraYn9V
qwWfCbd1qPlhtVL38Mf4ybyM4MlJ89kDZab+aik4w0w64HV7Xb+Y1yEpGpRW
xcZ0cSNq/2E6Wf08fDAnunRfWkRUz3hQtS+V+6nmk01ofb5o5TChznwm0mEW
9z2Xj1+Gj1nFLcwn9BgPsy0ga2HrINs+gCwddVf1YzBBG4Z9QwCHKJH+z2av
nbqlAAc7wLMGiJZ9yN6SzWKkJRWCsIwsgr2u9hIypwdZup/zznFvjh8PY6it
FNe3o/rEeDn4xEQQbKvZvtJLV08eyLe66Dk4tt7j6Ln9ZRQE7PBm9RT21JbW
93GOLiqP3rgmz3xnY9FFYks/hy2dT46u2tL3yJa+VU2OLtnS12eQozuVYlHC
JmJQ2FLYR2ASWu8rEwWvwO2myZ1YR470chKyhfMrCufTD+rLvnCqmbVwnj56
mFlMf5GQmVU4X3lYxk62kIHQVJ0iNLlqkUGCx1BJSBi+tg+aw1KbcbKO7s4H
eD72k3kdPNfVmxi33JquxhtVT766xBpTtyLsyTwBKblDE/ol0pCBXCjT7Kov
Mmtrf+cqRRdffLjZfk8/M+20vcAEMb/O3kexhLJJ9nUBWrtjDeX0ZHNb5p1y
grxTq5YXcSosL1tfa3nbQnE7+eyloLjxjlK1vm1lnwrTbjFHIzK0X4DLm+GE
EjMWjB8olyA20y9XhfqjkaDrVrZBrtajvCHoj6mBBStwOZida4DHwNjfX873
Ad9gDfKOA3zb9Jc3o9vJTRbTCJurxgziW1EP09LgXAw3DU4yxKYWDyawD+Rg
nDWw9cUB2F9pzWDnpTHYfdhgjx4ykAw2plKRwb5FDPZOGOxru5mP1WC/D4N9
URezjQz2GyhkVfGpkRB79F8HmmuOy2WwwxC/oo4zUA10byaUb6nqHOXscC7n
lAj+4AG+G8ozNCnoVam2HOB/dny2mTFmmLl97OCQLW9Q8A8dmNjQpUsXqznB
2ALQDPBfKmL9HHEI4HG74dyoVNXTk5sWV3VlPCYtKpfnOVRmKI5RQaIT2BSp
Mp6Jh5wsKHYdMj7e494wSYSU+/1pH6n3FvhnSKfbnYPNguqjxZc+byhDnyjA
8Qp4RsNq54ZHg3r2BPvQdg8Abz6r1YgY9fXA/0WlVqb6CfYbwIcNR965+dF8
td/xVOSLEN0+cLvXhN1uqC7QqpAySZd8aoH7BOMeA5ksIHUK7SZOTJG9Qz+M
wAEq82bg/vVi6yBb15yssF+UEveDXac/8TMhI7+kVHJ/uatqwSvjHJwHeiWJ
wG1hOtMJYKlDMiFKWiUqxoIxt/k9VRax54BpjgTeZAHsTXBPE/67Y417sKjo
W21S/SC28HVXVwbRsl+31qacFbbyHyzMMd/d0ZN7ip2Vv76b+VSt/Aew8hd3
NW+rld8yU6z8q4TauwitQO36NkAPpCOjjCxzk9aAbfUyy/efLguCkEHeqDkn
XMeywJqzs81MQv6y8SUiScMFGBt49GXdotUVFRWM9F8Lbo2fHu4UQrpdZAyP
AIciHWPkZLgRQS9TB8Yvz0vqZ9+pV2oDvXYTh/cW2I6zlYzRA/diZVduyRh6
dLAuveJgEasI16tu+DPwDh8APjpjGxG4RuZ+Wjp1uweE66abC2Pe7jEE0/x2
vSFre4LsFUGdKEx6XXXF/4JspJqqzxrQelrZR3aMRywOP4Y3GuPX9FpRXCcw
BmMkRfAqygAO4+pdw+p6/rt1rCEVa/wcSTg4J1TVBpZxbwqOAzWNLxNXLDPS
IBpbjSzTw62OQ4pYgRsdLKqDw3i7KQK8N9XabYvhhjsqRPXiSLtQIu1GlaSt
8W7hrYczR5gsesGplTxa3xrvr27qYb64MTDeOy6XzNG7ary3zhLjvZEX/3Zi
DC86sTfjzSlebWB4Gz1XyjwDTJ93dCnXb4pl7+Qsu8X0ixO6mbNHjzD1Z5WI
ZYdLf5akmR44uT3cda76Ugy7FRgtMBzzM0SR3nrO07jgZiqAE/oR540WkiOy
pd0KZjXsSQZmgoGKkh/gACCtn78//cnmTjsBftz8/c32pf2tFWSQs5eOT+9t
bkqPJpySHKHbdRrY36lqddQpYTJpSLRu2GFrgxOhznd1vjlA4MlrKVBFOTe7
z0EmWIu/uqSpAGkpfnHl0+pCMVdPFPu13VF8GvEL8rQvbB7nkPXGvhxPZ/BM
QXGReb/FJvbPN7E2ppqYPYAxz1vPUO/aj5oz1VvfzEH3Onk8sMogb9ARjC1B
6uWDJfGM2pHimGITETsrYK+W+glot/58TRlndPmhWlTavKFEfW+LV9S2yOyg
HRgrmQ6va3efRmq+K4d/1R/clGJ3FwZ29yOyux/O62r+SXb3HbK7TXPE7m6a
Kmmk607IZYc7HV43KV63pOD17RkyMyjSTUrDCb4oELt7ZA7Dl4u+tFjTwnfN
pN7EcSeZFRMK1CR3dI75qN9IS6nCNZTQVbgWBn63ndCse8RjwRgdgmsHB9eY
mj6YPU7Zc2V2foZDaJQnXyXNJw+UmOHDjpCJV2RD668haN7XP9Phkjkg107D
YKyjPd3BcUpfpHdEWo7aYi4dhUMfyCuknyMwnm1Bsn0LSCLQggWtv7zcL86I
BqYzkQ6OuN5ars4iSKKeCMPgW8AxoXAs5K0s2F7bcFuFmFGuw8bH/7UiN7a0
cWk5n0iol4yI2XnP60s4jm01zG1n98MA03gmEA4rDTRi/AWhJ+auEAAypjKW
Fm2pvaSvmbaiSyvAGpdVwANhNKLsAyEubnVIqRRrXCY5K8Fj5NfiqhMccehs
RPopCz1XuMBr4VD2ayOBVDOmr7ngtEoeJIjJFv+5lcxobYoZvSLbbL9Ua6su
IHeYzOjr0yWB9Iqa0YdGdguJXa+J2GVeP1fwBdcXeNs2TUzoO4TFd9ED+s/z
MEBw81TpDX3xnG7ogOKHWQtrIdowucBMGDPCrD6ngC/ve80V3aPwZX+lMPOT
t2FUhhJFfVI0LQCok0MlxObbilzl6457ChMpgMzgwVBrF/1eBkNRsDppzFAz
e8xvcF62LjE02dnMM40LS1ibhiXmiZ5kmdFsFXV+bswZSitcsXJGsBRlKidc
Ghn3Zp9zTsK+LQvGpjuKxEYGYIwwGvGYUHF0OkAmxEY2qJ0NJYeSzpnFLmmM
tMSmVzKUGQBkXGcIEwglLF3Lyc/XrMPLzic5vGwwE6ni1f3lIjNxhBsaSk5f
2zH+LBabHitzfRdsnWVClufNxoJaCVGS4JW6zgnbUgE3FTjErYyUMi3dlhu0
agQPLvbBeVgInM0vFXv9VSngfNHzcZ/NazWr1Hx3DpddOJu5WPqqxGZK6cVH
XHqhNvNC8nPJZr5BNnMzIWcDGbTryWaefWgZgbNjqhJtxSlGWADOzhacwCZ3
Xn4wu4u5/8wc8w8ynDhnexnFoAZoRX8TEPoMIfX1qk6BQR3X0e1q2QdfOIPb
OQTM0PKWHM+7tUIUAxMFs4uLJLa8tJwrBGun9pU8kviy7d3Atqa7w+OS1t78
e7MLxa+i4MSAkkw8Oq7RKeQotBZwERxdufnhPJV9tWw6Fjab9BT4rzJN6ufA
E8fwv9OPckV5CjzjqfCMAptRBmfSa0gu4OJaHu0d5ICanysy1ROkILj5+SJX
TgH+erUoqYFn3ZUUsZ04mJGa8PDKStGSCpx7DWjeVKS7TTyNSWufxbLiSYzH
ExmPUb8tAniEddV8rW8rLSbtjG9UPPLU74TiD5XR4pFinqOcQys0t1PU9cVf
mrukdrxQZh8HSFo5mcs7RNhi1asocjCXWfAgPayQcY5sG6BsJVVkN1Kz1bw9
xWpq2aKzmnO7mLfVam4hsLxGYFujsi/KFX3xKB0omxSUb7cAZRamF/CcFMyY
Wj6+t2ms6sb3pYJ0dZU0Hm6a2i1kUq87mlcw7qNqkJ/JDZvNSaoSj/C6EaAz
yUSSJ3lYB6u3DVeXso3Dd9g8sprSpCdSsthCBJkEzqVXHhwaL0TgxAefJ94j
GK2fx+OG8KlYmZehLnDT7QJ/2+VbdcpAtdhPShVVNIxUHrIfZHd4s8nNhT8H
rPRZaFwkFnxPwArCCm1rFrxC9D3y4F+6micsPeLF79P6A7h4wVcKA7RamQjg
AmLlVoBgWF4CoPQnZPj6EVxWqx/FFZOvWbzicsAsAT3mQtdwwKqjCqLpUBt3
xc08KXIRpl0FbQ7QgaxDywY2qYaTJyppv1M77XpC7zLPKWgqlsMleWIKX7an
7JcXRX5nGm5X7ciHr4tD8wOn18J3ZTq7Kvuff6zrZb67U+xqM9nVnWRXP7uh
u/nEK2m01RrbtKlgM8FxI0EUFcdnH1bWpvabDr6vT+tqHh/X21QPLeU+Y8wV
wK962P4Yci6dTeMPr8QEBHPF8cX82JcmdzPPTCk3UwnCW6Z7HjJd/8DyOEoq
InsHGG5I0Y8Ew5ztma/ZYHwX7zcO73cny0h39AZAbWUGwMV7NmwlhSZt8Pmv
v4w/cWw1Kf7kOBQuMA6NSZPe6grEg2TncJlVMLkr1X/O5FYevaBkVx7RCol7
C3H5WNj+BmErYKKorp/LG1l9RItHLbVbFs5yuNVA3jz7p/VnghHWYLU1SMd8
SONKL3KbNH30AOmmh0r54G0b11UEfnKA6Shrv5mmeU0xh7BNj5SxuoRlxOjh
UUc65qJa6zUz/mWNqsjE8ITIk0bRPY/6oPso9BWkx7z6SG78lcKOVBQn/BYF
qxVF2iluJes6mG+1VwDbYQRYk5ap5hfgBYh5Soma39YBfAiLYywmPV2sJRqt
APgZ1fXgGK/wBaXABt89tYxno4Vs8IIUG6zlGrDBTUjkzOhsNqkN/jOFnKhB
3l3yZmNVF3PP6TncKXyoTioAOJ8/pxfPLsNSw4uGlZlPiCg2Te9ulo3NNXee
ns/ThjB5CEDHx/qoQ/Y3c8YfZy4/rpjXezx9Vk/zKr1u54xfcLY2Xco2DGLb
VYAbEIPVFkuHwNgujElOpybVXUZBVM2EfiL/0v8dkLGz4TJZpQNYw2O2MOZ5
OmScCcZiAONcrhSTyqr7pXiJz4m5jnNFEywxzPaOpcjKrMDp0CgOhXOKkWYk
i3eFpC1XkdyV/xOQnBFCMlAMl1oTNhGWnaJchRFPTdlIlJvhtQEXsCsNvxl4
briZqyheBn4bC1kORlVhnXbvULzLhptgS3COuuA3k53pDk6N4okcBFV7u2bG
ABsA822xygTbuDdVHkWO0HQTKTFsRgizdmIQbwhbU+ZCV+CUE6gry+GZua3q
OhAIv5Vtuks54R6MaQMK4khLFG9piWLWnyYOSBPe5gf1F+lQ/ESQytmxOE86
C+7pxYOCdsEU30Km+KYUU+wVTm47n0zxeTClYorRoofWvHRy8PKxPcwl/yhi
zRfNwWgYxrggjPvAnB5MLMPUQKD4bR0ZDRR/eqHMescQZtz+GNMHq2VSKuaK
3THx92b48OE8DugwnU+w94Cy9zxTHErHdgy506FUTq6cK2IVqmPUFhkJXPBf
wBbgAozp/wl1oz+5v8QMOWJ/pz2hYALGWLWnlXlJi1PCBXq6q8f0x/8zFMyw
ygC05jtX5glqE9xr5wZr8JEbCaAbWGIPurVVFdILHKjFQRFYGLbpUItPCN6K
juQR1OI1nTbF58gCt2vhVMOhRmMqrC7+CkBtEu51AN0oQzfGQTHQWFvNBVB8
jn1IyfHgvb4K+FoBK+kCYovZ2gv7AbNsgf36Cy/bY0VlHlO6vMxOBEiJev3m
wKjMKq2ZPTDuTwcAYDl96iaCxHgikE4Kwa/wLXmaBsbqQruCqiACLtII+HBp
NNgsR/O6IpGoWsNvKBLODbvSjwWpHWwoemROSWCJb+tpvloUWOKP5nczH16Z
bd7XJgRbOGkt8QsTsrgUAq70C2dJQ/1FxxaZY7zxOHeNyCGsE0ZVO35PI+Ht
Kk/tIAz/izA8nSxx7amFDr92VwO+Y6m4j+fbJu9nLj17CGMfkfQrU7qZQ/ry
QCw1xDt9nIYh7FI7+Jfn6VXLLuimSVWpfEAEDCMLnUp85kyz67HwNO/Rp59g
Lq86gI0wQSRAb4zrEIjQH8u3yU4BNC5PAMLkC2RcYHeb7iiSUDmq1tc51oJj
MEtuLI2iBRvwgE7xuKvg5+IXlheT9AL8xn38BvpVwjTeTpCdLZCFoSX40lOa
HsAnHD+lpGPZ3V5fGGA5xnmguGm4pZyfBme57vLKwLtOBvpWnBO2nEAlz3nH
qpK4i41jqXUUXDQsW1zSxrh6RFMXsdipHZFgeg8cY5aJM3RWH1vmtWV8K65f
7RR0ne0X1aonrXRKA9uKEGzNpkLy6geY+hsrUiLgdLD1ImBUUOjgT5jepoUF
YdO7xJreHmJ6ryXTe1W2efPi7mZLdTezbkZ3s3JSL/PQ2N7mjpE5ZsFJ9EEa
8teBkZ5u9AVQ+/jo7ublc7qkZHzSicpZDrWvTe3OlvdTQqaH2qj54pKuxH2f
k+H/7OIAwAsnHWwunTDEGWQ0+ud3ie4HEMqc33BiVpErg3XC87LyPS2LE7PW
+EKAXFJkq5jUZc6UCqYU3QpjsVVUDpCbVOQCEhxa8i3BL2QkOKkYdkAIjvme
NKJggJZ1LUabj9xUCxwPpnD4xU17DFq4ydw2+1CRgrZdCLSNSxSpR+3Fj8P/
m+5jS/Qi4zNQtPD8dQUJADcK3GYEknQGq1zI6vL6pSeLWaIGfAnKMvg7BcQE
B6hbCJGxsJHhtrHIK5CKB6Y23DlE39sCsS2BAP54w8k2lZXVa+ak68MVcq6j
ghjJHtat3lIbrA9G2AslOhrAOJkOxgAxO86QxYsiOQzhhiVwLX7ZEsIuBs4L
e89pIMze85/2NueeMMCcf2qlmXRcf3PGUQPNcQcPMofvu1fU/PUPe0d5Cnih
OfQve5lj9x9oTiaPdTTFseccWW6mHyU6H8bV/PSkkOjPwO9HBMJhdO27R+WH
NyRh89Gl2Bnw5WXZ9NHaeWk2n8N9N00+2Cyp2l8tclfz0EhOElkAh3K4YQCH
1jQqgIPBF3f0VrC2dwnXhvmlbARRxYRqJusxq1QVDRASF8DP0zn3imWMjMUD
Vudj4IuNMHUPYvPj+TxOEia44TropU/nhWJj1/UjIywCRMfDtlj2cLtJezvu
Lti9Gc5KGYYhiK67qK+pHjvAaViYwlA7S1AM+4r/K4pfKIjBk44qnjGehedk
rOP0r4/nGGd/46xwVZ0+iOFMsI7q8H6g2opg1u9mUINR6CPevEaTUjDHkiqm
2wNF1N6oO1rbcqltNTOsNVoLNK+jSLcBa4BweMRAOJqA417mljUtgnCWWmOr
acG1lpHcb2NeR911/exDdQBvcRp5qyglMD7CWWg+XitkiO9YSc99pUAc7LYg
zgFyjmm8sYgjKjssy67Denh2sVlxYZFZc0m+eXVermm8JNdsuby3effKHmyp
OUi+NGhW4CAZKSeCM8zzDSfkpjYmtKpTv9cKzB8em8trQtLAHCA3X9HRPI++
04HbO+mYN/EYc/uU/cWG0zH6DxnLgNrB+MK54E4hgNtsEzhAz3X0FS4+rD79
NpkfWOEU4SqmmV0WoQFoLm9cpY6ztc6uMGI1h5s8QopFrgeLyNQXM9CrxwwA
yOMtgM3FwhdU2BKoFGAHOhc+frqUEQVYzkonUjHN12WRHMmjFFBj4D3AWzO5
nwNyzbn9eHIbJikhRo7hY8Wojguqq8cPYFPNInVcnWqbgqq7rFKa73HurjKZ
ePtskRQse4EzYf5heQZqPZqfL5LTCT4tAaTrz49E00M4aBWAA3+nNNJrejYA
cMzVZES9MbdMni+UCQwJjvCn1X/urEs73kZCiW36rZVujeKOF8usCmZhzLF2
mhSxetoC4iNbgLhmRn8mLwfiUJScx+528xNEtIuKuS/bTqyCc9a0qMA035Pr
ijk+XJRrvq+jSPkOjZRvpkh5IUXK13c3H8/Xdv15QfNBk1fQsfjUPpw3bkur
Tgfi7QriHQriT+i6APEj4/LCIKbjy0sDEH9NhPKfK+R78+Wykf6xmb8TO06A
H9iHWwi0lRDJ4WVpTXbc7hScrylmsdq8ENpqXmb+5IHmwAMPJE9rmKvZwNI9
CopjLiqG5/VovhWiJb/EYE4CvVHOysZlsjs9hI3/9WVRvW91XgDiqF4NyjWL
XSuYD1ao+x/A0rfT0TQzdXaP5XYOy403l/DSCtAK0IZPNibPNz9ZINFyDDAO
UCwKdUwySjKyTsok42yh41ychYpJPKDpwRJrrRnSVsrWoq1QEB1D4CwiN3ng
Ca13xu366ytSdw8GAXNcAWz7d3c8V7o7Xzums+md/Cxm1uZ9O+BGhtpcgBfb
CS2A8f/ay+CfvWUt+u41rpgfLDMdFUa6MYqb16re9WqBV/VBzLqqwDQsKCWX
qb+sEyFLUTu9Lw8YDrSuPrbRn65ZM6ZvZKD5Aenju2S4/de39jBf1vYwn9/Y
3XxKgfNH3uCqd726SVSAbCLEHvynwea2U/q02WoAFL/TBoqhYcHjHnlI/5T1
x2lRHDW7ruxGsdh/ruxGZHaceXr23mylN03v4qqzBgqSQ1lkRbJuyzqSTr85
OrRYK3Mj3Z6tff5YZIHV7M10bKHjb/R4eWoi3V264yLm57X8Cbjv5eeTez3t
IHP22FODQpHHiyMBJdjkFEvc0pIbCSghppTQ/EQBW3I2Jg8WRTXX2yovsHg2
rzzghXjYsku7gx2cqyzQJWCBFY4FXCUmhlJb5MsA+iL3tqpOGwjlLAafnXXv
uGMCwBN25gWZ1Mqdg7fzyuC1BQndqIVGhqqRA7kajDgh7lx3OMxnDeDzFGCK
MB5Tlx1BefXZUidG7ntSY3WkrnlHue1+sEywWSfvBIVcUa+LmFW0rYrJVsgg
rqIZLLL1uTV/LHJ2RzXlza+p2ScT3nBPX95finOeNy6m3ErpW4MuQS5mgVf+
epFHBWzMEWQUolBzYyFnrupvqDDNzxWaunmyGVqWlhH6z+vLfx2nepNTnoYJ
TPOdYtN/vKeXrGInm77LLya53i8mCRdpopjkdUL7ghNz2TkPKqY7pWticEyQ
mrWyTADtDDZ9y8we2AraFhOACMw3NXRc1c18cWVvcyHRQcOcfYgayMYf1b7B
o4JQLnq3VNAVmAbOsZ/vHfo+i47ksGHD/kH0ANz3GDlypHj9bdyv+2tCvVAi
sSft9kDez3788ceb4/7+Rwhw8bBuniKZx9K4+3F8jTM7JBiGgCCca3ynID8S
a40ipEiN2YFVOqaglgSRFbQpBzMEHDmgjg1GxhECsVfTnUX8tt2b9fXDZ7Tc
LKAIdhbiTBEUfz8qpd6YbU1UkVTPAVI7PtkU2Es9d5I9hxgbP0T65CXILbgI
BX6Qj6dpkJ/JpzMkwF9WmpYaAg8/5jUD29FX0TRBejzYUhx3jjpnoh+pYJmt
q+4I5UzYZf2ZBRrrK0L+wLbilIT1HlHA4UwBUNB5MDW9Sa6jvabcND9d4Fz6
UOLLUUCfEAW4CVyzirkXkeu0UxspWikJbSIov0Hw3kxwx5Tpp8dmBxTQommi
c5rEVyChf6xuPVZ1zjimYg8oIJsp4L84iAZ21hANTDzObJ5bybTwl9IE6soG
BCxg9oAFdEvnH+ncZ3TuFwEzJGH5R6uT4N+vSzz9u+1l/FV42qzRDrf9mSbV
HklghL5ZVo0tAGmzaFxUerlo8ewc8LxoFJXWSagP4Qy9g/VXssYn7BBTymAX
PhJwQcwSzaNuqo+fR4+LD5ASRsR09r6bP/akLLKwUSNCEdSggx50xrUEOS4T
+Hg+v1WMS4YTw3dDQ5LRe5EUeogyPRAPLClh60a+Lt7ZC8x/5FFA0AcNEE+w
Q8HRRUw5AtEFIN94Jw+jXY+nYrIrxw2LynEmk92KdlzOioAD/kRobFh4bJ/f
lCH9inYOUGv8YPV2uAncuzxnIFYlv4073uFsWr2AGNv16HTb5JBWtIv58X5E
COII8REmiMPYtKwkRZ+3BJG7RwRRP6fYnHt8f/MjEcT3RBCyQ7hH0MxxQ9DM
8eE8nTji+wnTxE+YeHh5SKP/KTk2SxDvzc7mn+kN8hMCguianiCuFIL4lgjh
WyKwL4kkzhk30my5pNJ8QqQS0Uy5skQoXd5htyxxOp1bG/YfElgmfo3SgLtf
r+HfZ8+Fdtz1CuIGO1/bTkWx4z31ebIFB8rDTiyYUqWQySKhQNOi1cBXSGok
AaQ13ipwarihLKaw0zSaLR9tgGVOYQqdLmClAcsUMZ8pIoGCGGnnGjhZBdax
2OgObVpC4ewjefYJK3I1c6hZC722q/6xvlDTXUXMX0wc8Cby9OdxzdI+d+CX
cHU5O8Qgkah6Gs0rCzjWwHmikyizSSxUGRtQCRSWx4vlxTm/7+kW5FuAenY8
UdyByaU9D5xnKl1eLEMTtOPT3z4e8jKiGmy4WUMcdKTnEEm8Q9PHS1A00Rl8
kaE00vS0jHdrWlUeppHisObwU2mkYbEUK4BKmBxfyv/ZNNJ8Rx9+jx8uyGEa
wdyDb5RG4GvsbKv0Fb7GjM5m/aQunK5fPS671RzA7lJ9oJF/Ez1dfFyZmUm+
Rps0ckWYRr6j9/Yd93oXmJlnnWz+eUWpeXBU5/c8GrED7veQRs6m209bWlAa
uZrO3aJegbtfr+HfZ8/h5RyNdA9oBOf9VcFuoHeGvA43dA/5Yzu/DVoyDF7O
MO5SChp7JINC8xj7HOAZ8kEEjNAvKQzhBJ4Y9RQ6iSqduAkI4iO0QSdcOwA/
Z3Gh06a9eRC2tIAfuCI3FizLjLsWUsQm+hPhddqmDwTzz+eb6nEDTNWIgVpJ
UMJpi7pL+kqaIml5A0DweUNykZk8Hw2kyuW5dGC7BMckU/qDPzrplgnc5Hkr
doiw5YwNIc4IlEuLYMwaZLJ5Xnd7JwKJgsUIjkfcUH7kA8cOhkaJcvi3Szoo
cUDIRGDCBQJtEIcTK4tS8w3H2NjE5RuaX5TyiMZ7S03z8/pX/h+IwyztZapP
rTR3V5WaH4g4vlsio4J5x6+OCw75IDr17N0LZZvGm0QEW4gcsLoKPsjPTR5+
ojrFP+d0M/v+fu/WiePy9MTxPRHH99d0N+9dXsp+yPtXlpqjByergUUdRwpj
7+oGlDxEUMjBjm765zhEZYaR9Ix1adyQa/Wcu99zQ+x91p1A6sOMDtbvdAlT
yHz1REKbPuTNJYKiQY9Coi6vkdDcJARDCIWiV9BX63dwPpD4AyU8CT1nc4VO
NGAGSTgGkeJ90TgRD2lOM9oaf+i0pLrztWKYvuM2KATiZzwNiXAJcq5zSGzn
nJQ7+TzC4UvML9OHYwHaYAdrQRn7IsnWKCOqreoYK856xvwKu+EHKX5iko6s
jkoLe8Ge0ETUz2lg8ig3s7WQMTPdrm/mB4pPWKF8u4TzGEQJSdzozDSRMHXX
S5tM86ZSs99f98FjIz+DK45twRVY/1M1apDLaoweTkHuteWan8zbQ67oHeKK
HTeprklc8T1xxbe39eBxxl/XdjdfLZCRxp95I1ExLO2fc2VoyzbC/FZyNF5S
R6NhfDY3g/+cHCW44rOLurKTccvIojBX0PH1vLa54gfiii0X5JgLTvktz/sd
etBvTKdOnRCz9BP4zlcJoSVdXEZnAfupdPh08QedSw4F02obz9LtUXoV/37V
Nvy7LWPYbOgkzYhKN3zSX03gT1uWu+P7RbyEqa0Cijp9IGkLGVAv8ARzgNwS
xyLBxADHAhon/o+zSS22x/n6mnKrIjyjqZOYyGAt5A943cQdVacOtL3sAYdI
SJJgEkGoUnXKAO0lLNDhMTHuruc5NZeWybm0LBLjzys2Qo0eNshTQlL9kCT9
OPn89m2pIgBfN7cv+yNJUEgioJAEUwikPjxS94ZgePpatO26haDrtCqvNbrY
XGzXfoWyHhhbKINM/RRoIkQXkDNRLBxniVPrhF8s41tdmTKSTBUsh9ZX4Iyk
UK/r95NYI5QOLdR06NHcfIfKpOYXCqWoobGASQP+lSOO51OJgwjjqbaJw9zT
i9f0PTKj2PxAxPEdEcc3RBz/IeJoXiijVTFLGfPQ7YS27ZfIaJm3CfhNRAZv
EEGcc0Q578xMJQ5JhnTebVrUFhJD5ICj4Yjj0taJ47PLepgXp+eaBSNLzQl/
G8RrSecM62tWzhxoZlCksuS0bI5SlDlC1Q4h5gDyx9O9X4eZIys2bNgw3J5J
92VMmDBhODHFFyh+Usekzfs12LELv/mWCLFJXxLd6UmiuvCXK6e0tjnMGZIX
cdPTYkFGJMa+hs072LAEjGGzJM1PQvtj4gDq2FF/Vh/aKnE4EfMxlUzvLxRX
J26bclfowAU66i8rs94Gp1a0BhK8gdONC5GxDAoolTasGgKtBbQjTkiup6Fm
8HuCjlp3UQW7TjyUB3mWK5HIJSKJSB9CU10REMCV0fiNPZufcGwSUzWkaWkx
Uw5iHXpONvNLFu+4C60YtTzS2CaP2FyJzo2Szj4Mi4oFRVFhIsH3HWvLxJeI
SwRSM2dgFzAGnXsX2dSa8weKPEokggOEAh+kRTb1p9HIEPY7uIATvoetjaI4
BYLHjseKxPf4mTRSf14xb/78UWnkv0Qju5RGviQa+UJp5BOiER4cRz7I+xRP
vEvwf4so4U2iiZcniw/iJ1SaVC99OzWhwjnVrLQ0gmTKcQcMMveOLjBfXtKS
Rj65pLt5cHyhGXXYAKYNfL/htFLz2nl9zMeXUIx1RTfzFR2vVPfl0osDKjsg
uVIpmA7N3QjrHQeQO7DF3iU0wmUUz9PxDR1v0IHHRGJt3KeOS0hW8ZatjNCR
WO/p23BSqeggXFrNQUrDld0j0TYZJKnAR/6EGcG6EvSVcywQAOb2RTvbs04z
XVYUMIcty2jIi/t8gc5FNEvo0gTLFwlOkbj+p9sLbeDBDYvkbEhT4eJCHh4k
/KBpIORbnH+BXvZVuZzIgTzrKGGYpF6JKiQbm2BGQ2EAdylhPXkDn30GYdqz
eZJ8sWMDIiKFJHmvLockV5U7WaTu4r7ZzCBZ/Eupv7qibarY6G1bSaEKtOe7
wVZNJXIQqsESKHgGS0D1bFpZzkJoQl0OG4nA2WAxI8F0ETeNj2p/Ej1AWORt
P0PLfse24hTCKEohjONSE6/c8IDqb/Y5bAnWy/SrWp9vaqbQ+x/fXwiDq6KJ
KFbvhjAeChNG8229RR29ro/5ngjjWyKMb4gwvibC+IoIYycRxmdEGJ8SYXx8
pfgeH5BP8E/yPd4h0G87DytDxfe4+riCn5WB/VSV0c+JNB4bn2eO+MteShhd
zXPn5pjrTykxxx84iH2SMw4dYO4bW2Ca5vQ0X86TSukv6PicyOUzOj69BMSS
bZZN/62ZdMYwW6PVV1AZ2kKmpKG9EKHu4mQA9FQx062C0GGyHFzwNGjNKmgx
VKJl25CdtRrXYXIu+aFCoMuP3FiGBvRnQ6KmPCYRZErEUZCDca9pC2yN1BKO
uK3dhpZQW8JtGrz6u57PrsiNK7jJLZD2iXsLEP8/yXvTbKhBHgU8ix1LC4Iy
XQI6/ISGawgxjwq95EqgYX9kVz7ScH2ppoTUnwHf4QsLoc1P5rvi7B3LCqPK
COA9/iGe03UQmSCBDAZ/H06wMFOiwuunE4DsHdSGRHwH6NH1wEvPTtmLJwDE
HeqjDPZYUCn9Dkud72BCD0PfvEuX2FxmRp+6l2lY2jfq4x8Kh0zvCfAfKr8q
kvKrMP4L+UCrMeKNxqX0F9hQ4GIOK2o2r1bB6vkU/HNXRI4KFn3S4L+Xw7+5
u6epPqXS3D2pxPxA+P+O8P9fwv9/CP/NN3QzXxL+Pyf8/5vw/wnh/1+XdzUf
Ei63k9PwHuH2bcJyE2F7+bge7DT83ATrv1W02H5+Ny7Imvj3SsY7cH/p8WWm
cVovs726m+uG+JSci0/o+Jie8xEd/7qwq9lBx4fVdA063r+gq7l/ym+xPLsh
wH+oLkvxn5eGGhKBrpBOhdSnoB3DTBrS8SdAP6bigQ9rsu3sSJNN7+i18Dc/
JVJEHOfiu8e90yWfdmkI2GaUSAH3TbcXWQ9kJfawrciNeuDn+VxPqfrQnhkg
w7GCzaEC8TjX/IgWaiRskMB7Lc6plHaRp3PlHSVd0hTFi2T/8UNCkUXRv6vB
QKE2pvmR8+OihtRJQs/ld+DUai9GPYKHEPLX7wb5r4eRD5MPSKJrUdFu25I1
GIgp4l1pNd+irx2AdaSfru8vd7zLzREB3G1f1I4XSvcA7seH4M4ryWf01yFd
YVMvOYw8VnnZI3o2N4gNVuX8JLg3Xa2DvAju399CJp/gvovg/vWN5G8T3L8g
uH9GcP+U4P4RwX0Hwf2Di8Xkv0uQfWuWmHxMGrjppNyflAgF3F88t5dZdFoh
xwaAOr7DBVlX1YsnEKRODvmQjg/oudvpeH8O8iCox6D3Qsc7s4iCZsENgQzS
xdw0cT9AHv0VFvM7R3sTRdqHMB9qao4GmLe6wAZPF9BRQs6v37Cgpxt4F00z
HSt1lLMohlAAQg1JBHr+sHdQ5xduLuuJz2pVUpvIzwzUxKfDw/YAe4K/izdW
5tmgXrz3hHXkn5IMxeh/DOLZ1LmiNGZKfdXUvqG94rx8cUGxLod7MjehVRfM
JXxlUAQ20OMWfh+442n+gndh3xwKRZNaqhnMHsqT0ixmhWiayCCDv3bnXw9+
TdwM2BoPvKLTnT0ewHKWxgfLueba7vkm7LM+kHDW3mIffjyrLevLEQgx7On/
4tCvLhc+sLCHJhCMCmod9pETUyosC03T46UiKq4tamnkgfwXBfnwefCBCSHf
OvnL9wz55s6eLDS+NDfP/KDI/4aQ/x9F/k5C/udXZ5t/E/I/JuT/6zIyqIT8
9wn5bOzniLG/c0QOl162zGR2DmUn3pze1Tw5vg9P9EKnM6YVnHVEJU/5euu8
bGaEsw6vNAtPKeTK7O2EaJ7EOUuu8S4db9P13qJjG7FK0wxcM4tHF7wxHdlV
VHlh1D3WzGSZq886aOcxxxwDjFakCd9D4M8coeC3k/2sEGj3GstO43iw7eUp
b8JlzB9HG4k6cR0fUt1kBs++9rxKaY5B1c9TBWh1YJTb4FYnbFmUx3yUCxrk
qklW3vgDe2cRY1sbp+3UhADQTsKTBORTcOWRTQhqJbUYivDNs3rps9O4QCZ2
Y6421tjwIkdYExns6TINMtJoRa6NC+QWewHsbeSxEzD87xQ234FJnAp/1TtY
VriTa579LGYGQ707RwKsEDxcFEB7bXpoN79QZBoWV7CUZpcLY5MhljroVK6o
m9bFsI47I15qqqsGwYI7WHPH1LwBgTWPebBufES7LtqC9QEtYI13xKMHrTH3
hD425i/muUSjxIEF6rvneLAmKD9Ox6N0PNI7Dax7OljXTy8yF5xUaX68pbv5
jmD9X4L1LoJ1M8H6S4L1FwrrTwjWHymstxOs/0mwfpdg/RbDVSqqAe+tKbDG
rPmlo3LMlKPKGcaYwIlhfs9M6GnemNaVIUsGPwrcRnqazdNkNP26Sd3MWzOw
/IXQS8eb0yQt8QYdr0+RIm50dqHZeuO5GL6NZVFYC9nZvDwJ+dDOZv05nc2V
4w5aNnToUEV1qFwhhOqk7YLe6bntsP7yTO6gNtUnd/KaDlMaD8VWZTLgamcG
rQbw1hGg60e0q2KX/3b4xIqRims1j0p4eenAHGeDzdcc0x+qfqiPalVuUr3q
FVZ2Y4O6QrGHWe4Li8Nwnqi1jTJ6G9DFYxnG9ZeUykLYJ3J4l3oOEoY5MX2M
lxbgDk6XCECwDxYBmzTXS2oyQ218/bwybRnLlcA/puWaimoJ7btrjNNffjUp
gEbNYt08mcQL3dtO6t3xdEnIZ+cSxTEs0QXuecJimeLuxkf7Qo+D7/Iuxki8
h+xgw9JKaX7aXApQt8C0eatYhbmyMKaLPEz/JYTpuqt0MDCvjSho1UG34n3N
5Er54VencdB9TC+zIn5LTDfX9hJtbn5v8z1h+lvC9DeE6a8J019dk212EqY/
I0x/Spj+mDC942JylAnT7yum3yZMbiPTueiUPHMsOeuIy1dQnH7pP4rMUIz2
+7OM9rvuxEKzcnwPYJ1+9m3TO0cB/SjAGgVaCc+ghJMP7M89VpsJq5sIp6/R
sZFwiumBmMeJzY4vT+xkXqJj/YROZh0dL56NdY2YUNbJPE/Hc+M7mcfP6GhG
nXgUHOtywXNobEkYz7ZU2W5ExndYbmUCN4d3w409teqmfaiNMFWeBvTQUEwx
aFR1d9QS8gyuZ/OdgcaMAPYxrf7kAbudD2w+ENDa7mngml7ASV0ajccdsiEb
BybUNN7UCpgfCWYICmjx3ydy7FoqhKtP5GD6Ce59Arsv+CF2uRR959xfDkf4
Rf+PtO8OjKu8sp9MUbFsq/de3A0hu9lksxsSpxEIvdtUA8Z04wIGGxeBjatw
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
mXFQgtwcYYCJaMkSptOgKoEb/xgDZD4ShrKtlFOGMaYfuz+AAwbTKG5qpAGB
G4ofgrcK85VwRkwo7KSAY/WPCTojcZx3V9J1CU3MrGoARxST6dtR5bpX1gcZ
TUteyLvbp2GitO7Vy66NWKiCRMwmJ9Nsgo5RmEvnouZEYChZvvzhUS1/YF2l
mUmWfdj+XeVu782FbvKXct0xjSkEU3vNt8ANJUOz8caBFIGFUpfpq5l1jLXq
u8xyUmHkbAtbbYgKAhADY2gsLgqQE1LhtDrAbm6o2et8EjO1WDjoNlp4b7Ow
or16OR8eXKwpTVqA3mEbU+Ft/G0M1OLIHHVH5pLEjmI6sjw7zR8dWlnAhvmX
ddJ/0IIOI0JVwUcaEERTgIUCx1iIhlbYkIhmMlSeYWoP301iKc/rIqO9VDW9
uiGVYUPK13ARMLFV/p8VKPkRQWI4qRsMh3tXmJKPNmi0QLdf2RLOXDhlvG5B
u1Jc+Ba4ge10I8bpxAlBpt+B7eNhRK0XjMbOPWVDaEBJxlkwGI669l5nCPsQ
mOKbpSk+0sEgxVfL0iCvWMCF+eLiB2g0Uf0wYjlZAyxH2BgcVHIwRpZgXyUK
DsxZBebSdVux3I6h3lygo7fKgWS6NQzAwzgf9JitaJyUXs5XG3Ex07+c46m1
MqYhVsZdFGBkEPojWWMz3+RfOpEhZhN0OBKymIKRCuxDszlDgsw4bALFINEM
UBAPrC7NiZgO3oKXkft16wP/Eo7zH+pH+fN4a2mxe3F6DesDfZsB+iFRQAAO
tvuyes2mJTjY6Xe3lpCIqTXkpFmDV+3MGtB6kxUN7aJWEQ8joBStAnOtIjun
xLysjsvJnAN3LfHmkfB7YloGu3el6qH4V/dpiCa8QmEBuaqNKtDBVrANJmU4
sQ90+MJesHNDEi4nQdUhSYomxqLpp7XIW24vo5VAHW+vUBfC7fbK6HzgsHaW
aSJ8RrMKFK0N3Ec0TaCY24jYJxYJfLKiHM31rLds+MfOgyeiNiMf3Hrp2GRg
KImQb+UxZIJKn2khhUPjUQuhUjdEHQT8xnTzGy49Xx2bGrqWfSbqwfHUmKoQ
WMzmcJRDMO2ZXMlvt+nD3NsqbQEkLaHU4IOjvGg3OOwHnifAWdWusoz+hb0V
MIZ27GAIkE9EzYeacbEEK+D+HJ2IFbpetz/wzuRtCbgwQmnLJU1pXXUYIGDj
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
CwZvbQ==\
\>"],ExpressionUUID->"a1cfe246-8242-4c98-a606-8b1b0aefe581"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"precSet", ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<pred win\>\"", ",", " ", "\"\<pred hor\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.783437557009953*^9, 3.7834375573056087`*^9}, {
  3.783437723535213*^9, 3.783437723778599*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"781d526b-6ab9-4bfe-bfb7-6be520e47063"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwt1PdvzlEUx/H7rXpatR5K7FElhCL2iCZtUaMqNEjspFatVlDE+KXR1Cr/
SWvUnoldm9g7au/4QZDifXI+P7xy7/N97vd+zz333JtWWFJQnBBCWIkG0hu3
MQIj8QVvMBdN8RYV2IYP2IFreI3ZOIueSER7fMROXMd7bMdV5COGWViNFpiP
TDTGcHSBxdcOk9AEnTEASeiBKn3nAXIU4woMRDL6oRcaojsK0UxrG4UU9Mdg
jbGx5zAPn7EHbTETHSNfi603nf4urasP/UraG2gTeU5sjRcUSwrP1tK2wnKk
Rp4Hy2GMfjptHIO09mwcRBaeYb9ifI4aDMMjNFK/Di+1hgP4FDw2i+cx8nBU
81g+XqCD8j8U1crlU/UtT080v8XwG2mKLVN7FtMctkarn28os/VjouK3dfyx
PWGNm2iv4CGGKM4jGI9fwetnMo7hElbZPvHeRdpifMdllCLSc/vuQiREHl83
jVln9cGz87RL1a/RWl9pf63WkjVmma2N/hLalnrfam2B5YDnW7Q/RbiLvtiH
WmzAaMYcoh1re0x/r9UE7gSvT6vf+8Fr02o0zpg1+lZJ8PF27u4Fz5PVSTm6
Bq9Jm2srWut75RqzXnNVaG6LcVHwmirS71LleQIyeH6Ydhw6RZ5n+35z+htp
U5X3Ws2dw/PF9n/w82B3gp3Lr/pOXHuzWftepv2wvCXybn3wc2u1V6d9t5qy
e2MaTiEr8jN2K3gOx+BH8Dhz8TP4HTIdp4PfRVNw3Obj3d20N4PfWRnB77B3
KMDJ4GdhBs4gO/JYrQ7/YU7w++pv8DNo9WP321ScCF73eYr5P+tEjaA=
           "]], 
          Polygon3DBox[CompressedData["
1:eJxFlsdzl1UUhs/FoIQOIYEESEiAkFASkoAkwSQU+7jChRVFrCBFRx11RhF1
BnEhKCotBLEX8I/AhW517AXrRhdiRx0Ued45r8Pimft93++Wc95T7q9x7eZV
m4ZFxDNQAX/DxXAR/AWHoAoehRUl4gXGyfAALOc9oJ5hNByAXuiBG2At/Aq/
wO/wB0xg/nbGx2A8z/PhEp4vhXN5HmQcCWvgJ6/R2hPwJxyEcXCLji757UK4
wHPH8W0z40R4zjbfyzjJvnwIH9jfZ+EjmAtnwVPwNAyHRfAN7PL7DPgEvpOd
cLbXa6/3vU57fh/p3+PwA3wF7fZp0Gu0doFt2Q/7dD52VsAenkdAJ3xpTaVt
Jb+NNBt4H+PftOZGz9lvW+bZZtn0ZIYomuFjmM3LLFgAbSXP3gvDStogDZQP
DdbmFAxY84PWdALcb621+WqGa+E/2yl7boKN/jY9Mkc0V3HcAg9F5pdi+6C/
nbBml8Mqa/ku7IAr4ajXaO3WyFz9Dc6HlfBzZB4pnx6GR2AUZ65nvF0alcyp
NZH5qTx9D3bCVfCWdGNOE+NMxamkv8qlWxUX3o9bj36vl3ajoNEabrE/t8G6
yPmqibEwZDtkz11wd+RZ/d5TWl8DV8NUmOYYK9arrd9JhuU+U2erhlbYf9WW
WGlNJvL8JuMU+7iM9+cZa2Cb1vD+L+M/kXmg/JlUspZUU1NK5rTySLXwreee
9Nla8zW0RebsbvgRrnO+DDlnxlvPUz5DuXpZ5NlN1q7POkwv2XvUg5SnhyJr
V1qNLZlT70T2FPWWLzQvMt9Vq4pvt/UZdE5s9FzlSnPJGlDut5fU4D6+V0dq
s906SrsqWAyLoB8GYAY0lNxnTsmepZxTT3wR6kv6MMvntEILdEAn9EA3vMzc
VxRjnqdCo/LOZ3VBn8/s8rrz/K26ZIwUm1qYDDVQ531qPKfW39pc60t87lzb
1Om9q+xrtdd2e+5LkTbW+qx6+13nvRusRYX7hupGNa/+VOk4ve2Y3RF5hyiW
7bap21qoJrdG1rRqVTV3c+Rew+1Tnc+SRmNK1rbWjLYd9da62bYrJoqFfGhx
nBY6Bo3ea04581uzc0FzVOPXR/Y41f5Mx6XV2knL+T5jiX2WvZucl59H9jvV
7mfwKbS6PtTbj8FsOMf10msdlAuvRsZ5KbzG8+uRcerwN/2mO6gu8q5WvnfY
7l7POcq3K+CJyN455FpUfznud/WiO12ruhNqI3u+7gr1QPVa9Vz1Rt1By6DS
9vfZDtn2RuTZ7fbhfxs0yhf5oJ6jujkS2YvmWceucqautKf2Ohx5P6rnqNfo
rm1yzFocg0HXdlfk3arcU99tcr7strZLI3tTv3uLekKPNR/hmByzT/JtsWO1
y9oujOwt+o9xT2QPUy/Tfx71TvVQ/RcasA+yXT6eBiGe3HQ=
           "]], 
          Polygon3DBox[CompressedData["
1:eJwt00WrEFEUAOAZQVRMbH36fHY9+6kLBX22WOhCwQQXBord3dg/xW5xZWB3
d+tCwW7Rb5iz+Lgxc+89c86dxpNnj5pVJkmSzpTlPXOZxyRO0SxNkkHaIxTr
t6MSM4xrspzKxlVZqr+MOZzlBCN5w2becpJxNKAh/7hLEY2oxy4usIJ1rI0z
PmpnUY2VfOEaO+nqeS96c8V4B2MYzTv6mF+v3cASznOcEYxnAq+5QwtaUj9i
qWLtAu18Zse39TW3SbuRxbHffkpoRWvucTViaev9kjSP80O2PouJmZzhF705
yG/+8J1v/GAgh/nJmsjJ4KjLUYbEHtm6v9yPHBfQjQMcYxhjowaveEhHOtGc
3aRinKKdyiLO8ZQe9KQD++LcoRRGLR/Eud2pEDFlc+XTfK9sz4lJfq8qmlut
XcV0TvOZT3ylP4fiHiyPPGf5Lo36bqepfps0z+0T4y5JfpfbR3wveM7LiCnL
waOoTVajZvG9t5P87hVldWIPj2OvbM/SqMteirnOTW5xkS3UEENt6qT5mc/i
PnSN8y+zLauJ503SPPZLxluTfE1Bmj+ry4CodUP9wjQ/r03EdSPOLpfmeZvG
wqhR9m9ldzm708OjvtW91y9yWVO/Fv8Bla965w==
           "]], 
          Polygon3DBox[{{188, 80, 230, 13, 135, 231}, {190, 83, 233, 204, 138,
            234}, {191, 84, 234, 205, 139, 235}, {192, 85, 235, 206, 140, 
           236}, {263, 118, 18, 115, 106, 197}}]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], 
       Line3DBox[{144, 2, 145, 3, 44, 177, 45, 6, 77, 186, 78, 79, 187, 80, 
        188, 81, 189, 82, 83, 190, 84, 191, 85, 192, 86, 87, 193, 88, 194, 89,
         24, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 23, 162, 
        22, 161, 21, 132, 131, 19, 122, 121, 17, 114, 113, 14, 98, 97, 96, 10,
         60, 59, 7, 49, 48, 4, 39, 38, 1, 144}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{2, 31, 32, 5, 40, 41, 8, 50, 51, 11, 61, 62, 63, 15, 102, 
        103, 18, 115, 116, 20, 133, 134, 22}], 
       Line3DBox[{144, 215, 174, 216, 146, 220, 175, 221, 150, 224, 178, 223, 
        155, 239, 57, 238, 157, 237, 196, 264, 159, 271, 200, 270, 160, 322, 
        202, 323, 161}], 
       Line3DBox[{3, 210, 212, 148, 226, 228, 9, 250, 252, 153, 259, 261, 262,
         16, 125, 126, 127, 128, 129, 130, 23}], 
       Line3DBox[{145, 214, 176, 211, 147, 225, 179, 217, 151, 222, 181, 251, 
        152, 258, 34, 254, 158, 257, 201, 263, 197, 267, 268, 269, 203, 321, 
        162}], 
       Line3DBox[{6, 27, 28, 29, 30, 12, 265, 109, 242, 245, 247, 183, 285, 
        292, 301, 311, 164}], 
       Line3DBox[{163, 310, 300, 184, 249, 248, 246, 244, 241, 199, 100, 260, 
        154, 253, 185, 219, 218, 180, 227, 149, 213, 177}], 
       Line3DBox[{186, 229, 195, 255, 256, 156, 266, 198, 240, 243, 182, 276, 
        280, 286, 293, 302, 312, 165}], 
       Line3DBox[{187, 230, 13, 272, 273, 274, 277, 281, 287, 294, 303, 313, 
        166}], Line3DBox[{188, 231, 136, 275, 278, 282, 288, 295, 304, 314, 
        167}], Line3DBox[{189, 232, 233, 204, 279, 283, 289, 296, 305, 315, 
        168}], Line3DBox[{190, 234, 205, 284, 290, 297, 306, 316, 169}], 
       Line3DBox[{191, 235, 206, 291, 298, 307, 317, 170}], 
       Line3DBox[{192, 236, 207, 299, 308, 318, 171}], 
       Line3DBox[{193, 208, 309, 319, 172}], Line3DBox[{194, 209, 320, 173}]}, 
      {GrayLevel[0.2], Line3DBox[{38, 215, 25, 31, 214, 42, 210, 44}], 
       Line3DBox[{45, 213, 212, 211, 43, 32, 216, 26, 39}], 
       Line3DBox[{48, 220, 36, 40, 52, 225, 226, 227, 54, 27, 90, 77}], 
       Line3DBox[{59, 224, 46, 50, 222, 64, 250, 75, 219, 29, 255, 92, 79}], 
       Line3DBox[{89, 143, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 
        310, 74, 130, 124, 321, 134, 323, 120, 132}], 
       Line3DBox[{96, 239, 56, 61, 33, 258, 259, 260, 99, 265, 266, 108, 66, 
        272, 135, 231, 81}], 
       Line3DBox[{113, 237, 94, 102, 257, 117, 104, 125, 244, 245, 69, 276, 
        277, 278, 279, 138, 234, 84}], 
       Line3DBox[{121, 271, 111, 115, 106, 267, 127, 248, 71, 285, 286, 287, 
        288, 289, 290, 291, 140, 236, 86}], 
       Line3DBox[{131, 322, 119, 133, 123, 269, 129, 73, 300, 301, 302, 303, 
        304, 305, 306, 307, 308, 309, 142, 88}], 
       Line3DBox[{49, 37, 221, 41, 217, 53, 228, 55, 218, 28, 91, 229, 78}], 
       Line3DBox[{60, 47, 223, 51, 65, 251, 252, 253, 76, 30, 256, 93, 230, 
        80}], Line3DBox[{82, 232, 136, 273, 67, 240, 109, 100, 261, 34, 62, 
        57, 97}], 
       Line3DBox[{83, 233, 137, 275, 274, 68, 243, 242, 241, 110, 101, 262, 
        35, 254, 63, 238, 58, 98}], 
       Line3DBox[{85, 235, 139, 284, 283, 282, 281, 280, 70, 247, 246, 126, 
        105, 263, 118, 103, 264, 95, 114}], 
       Line3DBox[{87, 141, 299, 298, 297, 296, 295, 294, 293, 292, 72, 249, 
        128, 268, 107, 116, 270, 112, 122}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
Af8Dh8DuYA==
     "]], {}},
  Axes->True,
  AxesLabel->{
    FormBox["\"pred win\"", TraditionalForm], 
    FormBox["\"pred hor\"", TraditionalForm], None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{335.38113217459176`, 281.94520144633316`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-2.3845140225771706`, -0.01640125050349069, 2.4007965084768754`},
  ViewVertical->{0.7094835566069484, 0.004879995432967011, 
   0.7047050933184245}]], "Output",
 CellChangeTimes->{3.783437558867983*^9, 3.783437724709422*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"c0a41709-866f-4c6b-830e-e4d7480fd5f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"recSet", ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<pred win\>\"", ",", " ", "\"\<pred hor\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7834375857584267`*^9, 3.783437585992465*^9}, {
  3.7834377069664183`*^9, 3.7834377072344713`*^9}},
 CellLabel->
  "In[354]:=",ExpressionUUID->"2963289a-3e1a-422c-b3a6-ffa2a87a43ec"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx1mDFoFEEUhtd4yhVbHEE0hBByk7PVNl2msTUgaBGwESyjCNZiaRDSWSpB
sLEVI1hHBAuJRfAwzYlKLskpwdbGmOw3cJ+8I7Dcl9l///f+2dm57d66e+32
RFVVF09V1emqfLKO4u2AdwJ+LuBTAZ8J+FzAU8B74sV3czxcHOftfPnt8Pnj
S/vinfz+3szR366464K7LrjrgrsueAq46yp9z3d2NlZ2Nn4ujnPOG4o7L767
LrjrgrsuuOuCp4C7ruIjP+uvPu2vUhecug7FO/m4DSsH4q6L764L7rrgrgue
Au66yvWaI/7hzgvuvOBcxzpTAbd/eAq4/Ze+SB/uXOD4H4o7F7hzgTsXvrsu
eAq46yrnN0f8w9v5+vFnW9y5wF0X3HXB7b/4lh84fR6I2w/c14W7n/DITxIv
fZRPuOcDvBNw+4TbJ9w+4RzRb+Xx40C8btb/L+Jt8dkT/nBe18WHebcZn8TR
5/nyWdedDLjnFfx8wN3POvP/jx+WHr36fSB9cqQ/jG/nqZv3P125sKfx08F1
nRc6df6+sPZtYW1X+lEfZgN9547OZMCjvnUDngId9xnuPqPj+QD3+oPvVl4a
bV4dbe6rP1V+8++xtvNrcXw899dI450L3Lmgw/8H0ud5uiN95wJ3LuhMSgfu
XNBxLvAU6DsXeDT/nQvcuaBLbofyX+Wzy+tnltfZnzDeuTDeucCdCzp1s6/b
k75zQce5wJ0LOr5f4OTi+eBc4CnQ4TiQ/ylxdJwL3LnQR3IZSb9q7iPuF8Y7
F8bzf/t0Pxnn+wXOc60vnaj/7ic61D2SvnNBJwX67ic6zgUezX9z+uL7osxv
ccazj/qh8Z4PcOeCTt3ofBV3/zk/ytG5MM73BdzrFTpRjinQ8XoF93qFTrCv
OOr/jbF+ljqbI/1nfDu/PP5oP/PfugR339Bh/m9J3/tPzo/67L7x3f2HRzpJ
fC7g3YDTX+bzUHW5n4z37zXGO1+480XH6wm8I46O84I7L3S8bsDtBx3ngm6v
ue/e6XdQr5mH2/LJuuHfKT2tA/OFn8zPffGo/+4D3M9TeNQfzyu4+wDnSF34
K/voapzXAfc8h3v+wF0v+Xl9YLzrhbsuuHWY361m/88+B17nP08mXj94MRT3
7xe464K7Lrj9w+0fbv/cP61m/8y8gpNLX9y5wO0fbv9w+4fbP9z+uW9b2s/A
a733g3u/Dbd/uP3D7R9u/3D7Z356nwZ3/+H0fyCOf7/Xwr/fm7EOWIe6tsRd
F+d7nwPH/0gc/31x9x/u/sPdf7h99sSpC56a40CcvPxeLnq/0dK6Da+D54Lv
I7j7AHcf4F7P4e5PKj5PjkM9d7xvgdsn3Ps9uP3D5b+892G8rxv5j/L1PITX
Aaeuobj3A3D7hDsXuPyX92K+LrrkiP50wNGN9r3OhfHRPIn2mR4Pn9d8TuLs
c1yv91fuJzwV/hc9L83l
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNlWdwVkUUhncJLUQSekkgJEBsoAg2FMUQe7Ci2FBUVESFIKIiKsUGiDQV
rNgbikjUUSn2H4oFewEF7L0gOgjW8X3mvM7w45l7vv3O3T179t7nVg4bPaiu
QUppsygQZ4hCcbo4S5SIj8VxorF4R9QK7nlDHOK41nGRGGiIV4kjxFbiSDFI
NHR8lGgk3hYTRLm4VBztcf4/VTQVp4gzRWsxWBzveqhriOc/wf+R84k4UTQR
7zlmL2vEyaK5GGqIV4uTRAuvdaxo4zkvFK3EBeJc0UWMddxOjBaniWIxTFws
OogvxHDRSXwjLnLM2Nmuhx6PFG3FOWKE6Ox4lOtZ4z609LmM8vxfei/tvG6d
6CjGiPOcTzxVlIkprpX8z5xT6n2dL9p7X9eISvGDGCeqxHpxtWPG/hZ9xMPi
EtfDvh8Se4tF4iaxm2iQU5roOX8Ul7mHkw3xd2KS6CouF1e4NuIbRXcx1/du
K650Tjfva6L3Tk+uEhXOmet7fxY3ix3ENNfCPktV2yxdtxEz/R85m1wreTPE
bLG9mCOucw3XGuIN/o+c38V4sXWK55n8ncQ8cb/oLe4Td4qdxT3iQfeKnt0q
tnP+fMeM3S56idvELWJ3x785h9w7fC6cz91e9y6x0ON/+Tfjf4gbRE/xgPP3
cG33il08/oSoEYd7vIdrflT0F0Xq4QJd9xKFip9yvMBrsna5xh/RtW+KZ2O6
2NE9Xyz6ifoUzxbPP+/LCx5/zGtRW8Mc4zWu60mxr2il8ZcdM7ZU7COWiadd
53KxROznuFj3VOv6jDhGNEvhscYa39PjuIj3Gs901PhzunbLEe+vuI2uz+t6
gFghXhS7ikPFK+JA8aoh7qD8111/S8cHiX9TvNu8s+t8b7XnrHVtH6ZwEz58
P4VLcReexLH4G+/iVhz7lmPcuNp55H/k/bAv3I67ePdxEd7D24NNkdcd6Pnf
TOFE3PhpCg/jMfyKP5s4xqs4Dc8McTzU91LPKu8Fv61N4SDe969TuKzYddIT
vkcfeBx3fZ7imeDZeDaFuypS+Ge4a8P/Y70v8vEpz9W3jtu6fjyMu3Bqnesh
xpN8j/DSSMeMjfEZrXWMc75y71gL5+MjvIRzJqdwywbXg+u+T+Eo3lkcNN61
jXMf+Nas837YFx7GI/jkF8fl3gvuxVH4b5LrIR7hPtCPCa6BWq53bbhqpseZ
E0/yXr+bwpsVrpO9lPlcGMd1v6bwD+8vvpru2qYZ4vXeG3vET3gct//kdbl3
s8dL3cM5ro0cvIrrcNQsx4zhYhw723vp4drneS1qw1m4K+fwLe/yQtfKupuc
jwP/TOFEPIU/8SleLcjhZ9bCqTgTd+Efnrlq0SLH94/ncLHnILcsh6v7+r7D
UvigUw5vUjPfCGL8/49r7un+17t+xhd5ngI7ltr4nr6Wwhv4o9x19HE+399m
Ob7F5HMfTsefjXJc8WnnTJNSOliXle4RvcJ/5Pd2f2q8TpUd3t/341Bc2toe
pS8VObzJPMvcz14+6+W+l9pYj3Vf2qImnL3E9ePwLjl6i+8fd0/q3WPOZWMK
rw7wWTTP4Xzm4bvOs1Lpe/p5vq459rPS58I3rVJjJXZ7d/d2gOde4bPmW0GM
59vnqI86C/08MH/THE6vcc1V3meN/yOHcypxndTLGSz12Wz0vmb4GZrvM/2/
p9TxH7fNOnQ=
           "]], Polygon3DBox[CompressedData["
1:eJwtlXm0jlUUxvfHLddwcQ0XV5eLK4qmpXkV1VJZlRRNSpKSxitUGlEaNKNJ
Iw0SDTRIRTQYS1EyFQ1o1pwGjb9n7eeP39rnfOe85+x3v/t5vjYDh/SurhER
Y6EIVkBNOAaOhXVQAr09b1OI6EU8BNoyXkWsBafCAPgMyuA06A/LQecfBUfC
h1AfjoM+UJczuhLnQjvGG4ilcLrP+xE6wFVwJXwKTeBsOM/nlfi+gbAaiv38
mbARmsEZXv8CWsIlcHHkfQ2hGobCJ9AYLoWzYBM0h3PhHPgIGkBfOAm+htZw
IQyBN+EN6AlHw1fQCs53vmugDgyG4z2v6/oc4fdrCqfAyfAl7AA3wgj4TnWC
MXANfOP7r4ZrPa+Ei2A4fA9VcANcDx+7vsP8/iuhM9wDd8K3+sZwBVwOn0ML
GOX7foKOvm+0z2sEg1zvtX6fE52/vt+OcBPcCrdAOd/5V+JWf58y12+47yt3
fkNdvwq4LPL7/wDt4d7InlU92sLtMA5+hp3gOtejwF17Ep9XHRn/QdwNbnM+
yuVm4i+ROfXyd3sBZkX2S7nrrfr9CbvDBBjv+zp6fhf8DrvANJgI22APuN/r
qncneAymwgNe056/IvPbFe6DB+GfyPy1/1H4DXaGyZ4Xkf9+xEfgYajJfF/i
Q35+m/PV+hTXQL25l2uzHezP+HGvt2L+JHF7Yi2oY30+A0/DU96jteJC5tcF
ZsDMyH7V95I+pZ+G7DmY+BzMc377EKf7vBrM9ybOhiegNvMDiIvhRXgv0pfk
P/IL5XMg8SWY4/MPIi6Ft+B136U7S1krgXown3kDYn3oxvg1WAJVhRx387r2
ypPa+ZlmxMN9vva/DK9E1ky1Wx/pH/K/fpH9Xy/SP+V376rOcEKkvt/Xc5H+
J/+Qn8gP5U/ylw9U+0h/0XmNefjQSH/U+67z+fIH+av8Sn4ovclP5FfyO+lf
+lV+8iv51wX+5vr2d0f2n/xafiN/kn9Jn9KSNLUl0g8qI/UknWyO9EP5w0jv
0d5Rnqv/1b/Su/Qpf5T/yb9HR+pXfiA9y8/kJ/J36VF6kr6kT/Wv+lmakDbU
n+pL+Zn8745Iv5IeOnku/UvD0rJ01ZJ3/TuyPyfDpMh+U/9JX9Kn9CBvkN6l
+60+Q89O8vvK/6pdvwp+fzayR9Qrtd2P6mf1b5H1J71on/Qywzkol2Jrp7KQ
emhdyLuVg/TTiHn3yP5W/2uvtPhq5DOK6j/1q3pZ/T7L+eus9rCM8b/wX+T/
9YLI/yW9X6n1+HbkvjLmh0VqoMp9r15Tz7Vg/A5xESyM/L8XGi/w2fO9rwk0
LaQ+Klwbaa/Ke7Smu5pDD98vvep85axcJZT/Afnc+hM=
           "]]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], 
       Line3DBox[{206, 2, 207, 3, 208, 4, 209, 5, 210, 6, 212, 7, 213, 8, 214,
         9, 101, 18, 118, 27, 135, 36, 151, 44, 150, 53, 194, 195, 196, 197, 
        198, 73, 256, 255, 254, 72, 280, 71, 279, 70, 278, 277, 276, 69, 275, 
        68, 274, 67, 199, 60, 183, 54, 169, 45, 153, 37, 137, 28, 120, 19, 
        103, 10, 86, 1, 206}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{2, 76, 11, 87, 20, 104, 29, 121, 38, 138, 46, 154, 55, 170, 
        61, 184, 68}], 
       Line3DBox[{206, 74, 215, 85, 223, 102, 231, 119, 239, 136, 247, 152, 
        258, 168, 265, 182, 274}], 
       Line3DBox[{3, 80, 12, 91, 21, 108, 30, 125, 39, 142, 47, 158, 56, 174, 
        62, 188, 69}], 
       Line3DBox[{207, 75, 216, 90, 224, 107, 232, 124, 240, 141, 248, 157, 
        259, 173, 266, 187, 275}], 
       Line3DBox[{4, 82, 13, 95, 22, 112, 31, 129, 40, 146, 48, 162, 57, 285, 
        268, 191, 277}], 
       Line3DBox[{208, 81, 217, 94, 225, 111, 233, 128, 241, 145, 249, 161, 
        260, 177, 267, 291, 281, 276}], 
       Line3DBox[{5, 84, 14, 99, 23, 116, 32, 133, 41, 155, 49, 166, 58, 186, 
        63, 192, 70}], 
       Line3DBox[{209, 83, 218, 98, 226, 115, 234, 132, 242, 149, 250, 165, 
        261, 185, 269, 271, 292, 278}], 
       Line3DBox[{6, 89, 15, 106, 24, 123, 33, 282, 244, 283, 50, 286, 263, 
        288, 64, 201, 71}], 
       Line3DBox[{210, 88, 219, 105, 227, 122, 235, 139, 243, 156, 251, 171, 
        262, 189, 270, 200, 279}], 
       Line3DBox[{7, 93, 16, 110, 25, 127, 34, 143, 42, 160, 51, 175, 59, 178,
         65, 203, 72}], 
       Line3DBox[{212, 92, 220, 109, 228, 126, 236, 140, 245, 159, 252, 172, 
        264, 190, 272, 202, 280}], 
       Line3DBox[{8, 97, 17, 114, 26, 131, 35, 147, 43, 164, 52, 179, 180, 
        181, 66, 293, 255}], 
       Line3DBox[{213, 96, 221, 113, 229, 130, 237, 144, 246, 163, 253, 176, 
        287, 193, 273, 204, 254}], 
       Line3DBox[{214, 100, 222, 117, 230, 134, 238, 148, 211, 167, 257, 284, 
        78, 289, 290, 205, 256}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{86, 74, 76, 75, 80, 81, 82, 83, 84, 88, 89, 92, 93, 96, 97, 
        100, 101}], 
       Line3DBox[{18, 222, 17, 221, 16, 220, 15, 219, 14, 218, 13, 217, 12, 
        216, 11, 215, 10}], 
       Line3DBox[{103, 85, 87, 90, 91, 94, 95, 98, 99, 105, 106, 109, 110, 
        113, 114, 117, 118}], 
       Line3DBox[{27, 230, 26, 229, 25, 228, 24, 227, 23, 226, 22, 225, 21, 
        224, 20, 223, 19}], 
       Line3DBox[{120, 102, 104, 107, 108, 111, 112, 115, 116, 122, 123, 126, 
        127, 130, 131, 134, 135}], 
       Line3DBox[{36, 238, 35, 237, 34, 236, 33, 235, 32, 234, 31, 233, 30, 
        232, 29, 231, 28}], 
       Line3DBox[{137, 119, 121, 124, 125, 128, 129, 132, 133, 139, 282, 140, 
        143, 144, 147, 148, 151}], 
       Line3DBox[{53, 257, 52, 253, 51, 252, 50, 251, 49, 250, 48, 249, 47, 
        248, 46, 247, 45}], 
       Line3DBox[{150, 167, 164, 163, 160, 159, 283, 156, 155, 149, 146, 145, 
        142, 141, 138, 136, 153}], 
       Line3DBox[{44, 211, 43, 246, 42, 245, 244, 243, 41, 242, 40, 241, 39, 
        240, 38, 239, 37}], 
       Line3DBox[{169, 152, 154, 157, 158, 161, 162, 165, 166, 171, 286, 172, 
        175, 176, 179, 284, 77, 194}], 
       Line3DBox[{54, 258, 55, 259, 56, 260, 57, 261, 58, 262, 263, 264, 59, 
        287, 180, 78, 195}], 
       Line3DBox[{183, 168, 170, 173, 174, 177, 285, 185, 186, 189, 288, 190, 
        178, 193, 181, 79, 289, 196}], 
       Line3DBox[{198, 205, 293, 204, 203, 202, 201, 200, 192, 292, 191, 291, 
        188, 187, 184, 182, 199}], 
       Line3DBox[{60, 265, 61, 266, 62, 267, 268, 269, 63, 270, 64, 272, 65, 
        273, 66, 290, 197}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
Dmx2
     "]], {}},
  Axes->True,
  AxesLabel->{
    FormBox["\"pred win\"", TraditionalForm], 
    FormBox["\"pred hor\"", TraditionalForm], None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{436.5548535682326, 281.80930915093},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.916837505134293, 2.4513455742551455`, 1.3291496734718176`},
  ViewVertical->{0.24195989042614632`, -0.30943014468085583`, 
   0.9196240519841529}]], "Output",
 CellChangeTimes->{3.783437586334832*^9, 3.783437708509487*^9},
 CellLabel->
  "Out[354]=",ExpressionUUID->"c8be92bd-77dd-4c56-b32e-023e923c6731"]
}, Open  ]]
},
WindowSize->{767, 843},
WindowMargins->{{Automatic, 67}, {0, Automatic}},
Magnification:>1.2 Inherited,
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 5724, 146, 823, "Input",ExpressionUUID->"b92a199a-472a-4586-8b5b-d4cb6128dae8"],
Cell[6285, 168, 620, 13, 67, "Input",ExpressionUUID->"26ce1fbb-7275-4eec-b255-82e293a86acb"],
Cell[6908, 183, 1398, 38, 151, "Input",ExpressionUUID->"c79ea574-7559-4cca-9b28-de4b705c1126"],
Cell[CellGroupData[{
Cell[8331, 225, 394, 9, 67, "Input",ExpressionUUID->"a28396e6-896e-48f6-8c09-336897604308"],
Cell[8728, 236, 55801, 1028, 76, "Output",ExpressionUUID->"ea59e3df-d835-45dc-acbf-0b132ee592f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64566, 1269, 371, 11, 38, "Input",ExpressionUUID->"8e1f8f9f-fbfd-4c66-aa41-17ac782984aa"],
Cell[64940, 1282, 453, 12, 42, "Output",ExpressionUUID->"504efb50-e573-45c1-8ec3-205432a0aefc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65430, 1299, 1003, 27, 123, "Input",ExpressionUUID->"0f406ef8-3295-4b9c-88e4-b2c73cac2a27"],
Cell[66436, 1328, 392, 7, 42, "Output",ExpressionUUID->"73f6bb05-b6c6-488b-953a-f16353ae97a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66865, 1340, 3261, 79, 487, "Input",ExpressionUUID->"ad14427d-40bf-4554-973f-654381238f15"],
Cell[70129, 1421, 4910, 127, 435, "Output",ExpressionUUID->"2a093beb-403d-4c87-8c26-dc637994a159"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75076, 1553, 430, 10, 38, "Input",ExpressionUUID->"6e26ec68-ff28-409e-8017-2a868b35d14f"],
Cell[75509, 1565, 2386, 55, 282, "Output",ExpressionUUID->"2756728e-0eec-4a33-9c94-cfac7d8c4980"]
}, Open  ]],
Cell[77910, 1623, 3824, 94, 487, "Input",ExpressionUUID->"d0b3e9bd-c525-4e82-8eac-2efff73478c6"],
Cell[CellGroupData[{
Cell[81759, 1721, 537, 13, 95, "Input",ExpressionUUID->"5cd90aec-916f-4e89-ab39-d1029ba4ab28"],
Cell[82299, 1736, 56974, 1047, 76, "Output",ExpressionUUID->"2cd292c5-bcff-4b1c-810f-88124d50ead0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139310, 2788, 980, 27, 123, "Input",ExpressionUUID->"fb41438c-c0f4-4536-9643-8c826b7c7c70"],
Cell[140293, 2817, 217, 4, 42, "Output",ExpressionUUID->"be0201d0-ba33-4a7a-be6c-e6549ceade53"]
}, Open  ]],
Cell[140525, 2824, 965, 23, 151, "Input",ExpressionUUID->"2036f10a-0664-43ea-83eb-ac0093169329"],
Cell[141493, 2849, 750, 19, 95, "Input",ExpressionUUID->"3953cb9a-faa0-4790-9fe1-b4efe101c04f"],
Cell[142246, 2870, 3159, 81, 375, "Input",ExpressionUUID->"7ce2e0ea-5482-4ad4-8951-3d80a84533d9"],
Cell[CellGroupData[{
Cell[145430, 2955, 327, 8, 67, "Input",ExpressionUUID->"44d78411-3452-40dc-88c6-d5e169fcdacc"],
Cell[145760, 2965, 54614, 1006, 76, "Output",ExpressionUUID->"5146169c-0ead-4018-a62f-45facdefbc23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200411, 3976, 886, 25, 123, "Input",ExpressionUUID->"83c8cc8a-466f-449c-b0e8-589454243dbc"],
Cell[201300, 4003, 195, 3, 42, "Output",ExpressionUUID->"54bde6df-8023-4f45-aca5-15393f79b5aa"]
}, Open  ]],
Cell[201510, 4009, 4987, 117, 767, "Input",ExpressionUUID->"11c780b2-14e6-4cf4-b82e-8a1a392dd5c7"],
Cell[206500, 4128, 1849, 45, 375, "Input",ExpressionUUID->"bb1b4240-13d2-4663-af8f-82f4305d4666"],
Cell[208352, 4175, 3565, 91, 431, "Input",ExpressionUUID->"71d9b17c-3e8b-4a0e-a6b8-191c9026e0f0"],
Cell[CellGroupData[{
Cell[211942, 4270, 327, 8, 67, "Input",ExpressionUUID->"13824a22-2306-48af-a1c3-3ad397ee5914"],
Cell[212272, 4280, 55232, 1019, 76, "Output",ExpressionUUID->"2d7f6f70-67db-428d-9fc5-50549d7d9ecd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267541, 5304, 352, 7, 38, "Input",ExpressionUUID->"c7e2f21c-b125-4791-97f2-2d9281520521"],
Cell[267896, 5313, 346, 7, 42, "Output",ExpressionUUID->"9bf3e31e-07f6-4f2a-af2f-dca8332477dc"]
}, Open  ]],
Cell[268257, 5323, 652, 16, 95, "Input",ExpressionUUID->"f12b3397-ea02-4231-b1e9-1993fd082209"],
Cell[268912, 5341, 903, 21, 151, "Input",ExpressionUUID->"7e75dce0-7614-451d-a1d3-17d32cea70e0"],
Cell[269818, 5364, 241, 6, 38, "Input",ExpressionUUID->"5ef4dffd-b6ed-4794-90a1-7e83c2818822"],
Cell[CellGroupData[{
Cell[270084, 5374, 323, 7, 95, "Input",ExpressionUUID->"31c4809d-d2cb-4517-9b25-33c03b679a8d"],
Cell[270410, 5383, 13991, 411, 2115, "Output",ExpressionUUID->"7648c619-1c1e-4280-8704-7526297ec021"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284438, 5799, 423, 10, 38, "Input",ExpressionUUID->"9cbb678c-e2d2-4219-8099-575e255d0f48"],
Cell[284864, 5811, 138872, 2302, 364, 21147, 371, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"a1cfe246-8242-4c98-a606-8b1b0aefe581"]
}, Open  ]],
Cell[CellGroupData[{
Cell[423773, 8118, 424, 10, 38, "Input",ExpressionUUID->"781d526b-6ab9-4bfe-bfb7-6be520e47063"],
Cell[424200, 8130, 21241, 366, 358, "Output",ExpressionUUID->"c0a41709-866f-4c6b-830e-e4d7480fd5f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[445478, 8501, 427, 10, 38, "Input",ExpressionUUID->"2963289a-3e1a-422c-b3a6-ffa2a87a43ec"],
Cell[445908, 8513, 16399, 295, 358, "Output",ExpressionUUID->"c8be92bd-77dd-4c56-b32e-023e923c6731"]
}, Open  ]]
}
]
*)

